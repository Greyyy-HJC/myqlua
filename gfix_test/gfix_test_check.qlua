package.path = package.path ..
                   ';../module/qlib/?.qlua;../module/lhpc/?.qlua;../module/jinchen/?.qlua'
require "strict"
require "stdlib"
require "latvec"
require "mygfix"

_rcParam.la = {backend = 'gpu-cublas'} -- use GPU

-- latsize = {4, 4, 4, 8}
-- gauge_file = 'gauge_disord_4c8.NERSC'

latsize = {48, 48, 48, 64}
gauge_file = '/root/test/conf/conf.1008.coulomb.1e-08'

L = qcd.lattice(latsize)
Nd = #L
u = qcd.nersc.read_gauge(L, gauge_file)
vol = L:volume()
Nc = u[1]:colors()

gf_accu = 1e-8
tol_switch_fletcher = 1e-6 -- switch to Fletcher-Reeves if tol < tol_switch_fletcher
gf_maxiter = 1000

for mu = 0, Nd - 1 do
    printf("# [%d]\t%e\t%e\n", mu, u[1 + mu]:norm2() / (Nc * vol),
           u[1 + mu]:trace():real():sum() / (Nc * vol))
end

gfix_func, gfix_grad = gfix_func_and_grad(u, "coulomb")

-- Fourier-accelerated (nonlinear) CG
verbose = true
g, iter, tol = gaugefix_facg(u, gfix_func, gfix_grad, gf_accu, gf_maxiter,
                             verbose, tol_switch_fletcher)

ufix = gauge_transform_U(g, u)

printf("### maxiter=%d   gf_accu_set=%e\n", gf_maxiter, gf_accu)
printf("### iter=%d    gf_accu_done=%e   ReTr(g)=%e\n", iter, tol,
       g:trace():real():sum() / (Nc * vol))
for mu = 0, Nd - 1 do
    printf("# [%d]\t%e\t%e\n", mu, ufix[1 + mu]:norm2() / (Nc * vol),
           ufix[1 + mu]:trace():real():sum() / (Nc * vol))
end
