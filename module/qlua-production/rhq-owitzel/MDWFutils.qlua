-- XXX this version does not take fermion BC into account when computing Dminus;
-- XXX use functions from qlua/lhpc/dwf.h
-- XXX
-- XXX
-- XXX

require "latvec"

-- -----------------------------------------------------------------

function Table2String(tab)
   local i
   local str = tostring(tab[1])
   for i = 2, #tab do
      str = str .. " " .. tostring(tab[i])
   end
   return str
end

-- -----------------------------------------------------------------

function InitLattice(X,Y,Z,T)
  -- initializes lattice and random state
  local L = qcd.lattice{X,Y,Z,T}
  local volume = 1
  local i
  for i = 0, #L - 1 do
     volume = volume * L[i]
  end
  -- Initialize the random state from the system source
  local r = { }
  local S
  do
     r.x = os.random()
     local x = L:Int(r.x)
     for i = 0, #L - 1 do
        r[i+1] = os.random()
         x = x * L[i] + L:pcoord(i) * r[i+1]
     end
     r.f = os.random()
     S = L:RandomState(r.f, x)
  end
  return L, volume, S

end


-- -----------------------------------------------------------------

function plaquette(i, j, U)
   return U[i+1] *
          U[j+1]:shift(i, "from_forward") *
          U[i+1]:shift(j, "from_forward"):adjoin() *
          U[j+1]:adjoin()
end

-- -----------------------------------------------------------------

function AveragePlaquette(U, L, volume)
  local pl = 0
  local i
  local j
  for i = 0, #L - 1 do
     for j = i + 1, #L - 1 do
         pl = pl + plaquette(i, j, U):trace():sum():real()
     end
  end
  pl = pl * 2.0 / (U[1]:colors() * #L * (#L - 1) * volume)
  return pl
end


-- -----------------------------------------------------------------

function LoadGaugefield(fname, L, volume)
  -- read gauge field
  local U
  local msg 
  U, msg = qcd.nersc.read_gauge(L, fname, {unitarity=1.23e-7, FLOATING_POINT="IEEE64BIG"})

  if not U then
    printf("Error reading NERSC gauge\n")
    os.exit(1)
  end

  printf("\n\n")
  printf("HEADER of %s\n", fname)
  local i
  local v
  for i, v in pairs(msg) do
    if i == 'CHECKSUM' then
      v = string.format("%x", v) -- tostring doesn't deal well with hex numbers
      v = string.sub(v, 9, -1)  -- poor hack!
      printf("   %-20s   [number]  %s\n", tostring(i),  v)
    else
      printf("   %-20s   [%s]  %s\n", tostring(i), type(v), tostring(v))
    end
  end
  printf("\n")
 
  local ltr = 0;
  for i = 1, #L do
    ltr = ltr + U[i]:trace():sum():real()
  end
  ltr = ltr / (U[1]:colors() * #L * volume)
  printf("link trace: %d %15.11f %15.7e\n", volume, ltr, (ltr - msg.LINK_TRACE) / ltr)

  local pl = AveragePlaquette(U, L, volume)
  printf("plaquette:  %d %15.11f %15.7e\n", volume, pl, (pl - msg.PLAQUETTE) / pl)
  return U, msg
end

-- -----------------------------------------------------------------

function MakePointSource(xvec)
  -- Build the 4-component point source at the xvec = {X,Y,Z,T}
  local src = L:DiracPropagator()
  local Nc = src:colors()
  local ic, is
  for ic = 0, Nc - 1 do
    for is = 0, qcd.Ns - 1 do
      local dv = L:DiracFermion()
      dv[{xvec[1],xvec[2],xvec[3],xvec[4],c=ic,d=is}] = complex(1,0)
      src[{c=ic,d=is}] = dv
    end
  end
  return src
end

-- -----------------------------------------------------------------

function PrintArray(name, array)
-- Use matlab notation to print arrays

   printf("%s=[", name)
   local i
   for i = 0, #array -2 do
       printf("%17.15g, ", array[i]:real())
   end
   printf("%17.15g];\n\n\n", array[#array-1]:real())
end

-- -----------------------------------------------------------------

function PrintArrayComplex(name, array, timeslice, reim)
-- Use matlab notation to print arrays
-- and shift such that first value is always the start of the correlator
   local i
   local map = {}
   for i = 0, #array -1 do
      map[i] = (i + timeslice)%(#array)
   end
   printf("\n")
   if (reim == 0) or (reim == 2) then
      printf("%s_real=[", name)
      for i = 0, #array -2 do
         printf("%17.15g, ", array[map[i]]:real())
      end
      printf("%17.15g];\n\n", array[map[#array-1]]:real())
   end

   if (reim == 1) or (reim == 2) then
      printf("%s_imag=[", name)
      for i = 0, #array -2 do
         printf("%17.15g, ", array[map[i]]:imag())
      end
      printf("%17.15g];\n\n", array[map[#array-1]]:imag())
   end
   printf("\n")
end

-- -----------------------------------------------------------------

function meson2pt(qq_c, id, p3, timeslice)
  local px = 2 * math.pi * p3[1] / L[0]
  local py = 2 * math.pi * p3[2] / L[1]
  local pz = 2 * math.pi * p3[3] / L[2]
  local w = (L:Real(L:pcoord(0)) * px + L:Real(L:pcoord(1)) * py + L:Real(L:pcoord(2)) * pz):expi()  
        -- plane wave with p=(px,py,pz)
  local pt2 = (qq_c * w):sum(L:MultiSet(L[3], L:pcoord(3)))  -- 2pt function
  local var =  string.format("meson_%d_px=%d_py=%d_pz=%d", id, p3[1], p3[2], p3[3])
  PrintArrayComplex(var, pt2, timeslice, 2)
end

-- -----------------------------------------------------------------

function ComputeMeson2pt(p_prop, q_prop, moments, timeslice)

  a_prop = gamma{mu=5} * p_prop * gamma{mu=5}

  -- Collect the mesons in qq
  local qq = {}
  for i = 0, qcd.Ns * qcd.Ns - 1 do
     qq[i+1] = qcd.dot(a_prop, gamma{n=i} * q_prop * gamma{n=i})
  end

  -- Compute meson 2pt function  
  local i, m
  for i = 0, qcd.Ns * qcd.Ns - 1 do
    for m = 1, #moments do
       meson2pt(qq[i+1], i, moments[m], timeslice)    
    end
  end


end

-- -----------------------------------------------------------------

-- functions from Sergey to fix D_ problem of MDWF for 4D-inversions

function dwf_src_4D_to_5D(src_4d, Ls)
  local src_5d = {}
  src_5d[1]  = (0.5*(1 + gamma{mu=5})) *src_4d
  for s = 1, Ls-2 do
    src_5d[1+s] = 0.0*src_4d
  end
  src_5d[Ls] = (0.5*(1 - gamma{mu=5})) *src_4d
  return src_5d
end

function dwf_sol_5D_to_4D(sol_5d, Ls)
  return (0.5*(1 - gamma{mu=5})) *sol_5d[1] + (0.5*(1 + gamma{mu=5})) *sol_5d[Ls]
end


function latvec.op_mdwf_dminus(x, gauge_u, mdwf_M5, mdwf_b5, mdwf_c5)
  local xw_x = latvec.op_xwilson(x, gauge_u)
  return latvec.scalsum_left(mdwf_c5 * (4.0 - mdwf_M5) - 1.0,  x, -mdwf_c5, xw_x)
end 

function calc_mdwf_prop(mdwf_solver, gauge_u, mdwf_L5, mdwf_M5, mdwf_b5, mdwf_c5, src)
  error("this function MOST LIKELY produces wrong propagators because fermion BCs are not taken into account in the Dminus operator ; use library function in lhpc/dwf.qlua OR otherwise make sure you know what you are doing")
  if type(src) == 'lattice.dirac.propagator' then
    local sol_4d = (src.lattice):DiracPropagator()
    for is = 0, 3 do
      for ic = 0, src:colors()-1 do
        printf("spin = %i, color = %i, ", is, ic) 
        sol_4d[{d=is,c=ic}] = calc_mdwf_prop(mdwf_solver, gauge_u, mdwf_L5, mdwf_M5, mdwf_b5, mdwf_c5, src[{d=is, c=ic}])
      end
    end
    return sol_4d
  elseif type(src) == 'lattice.dirac.fermion' then
    local src_5d = dwf_src_4D_to_5D(src, mdwf_L5)
    src_5d[1]       = latvec.op_mdwf_dminus(src_5d[1], gauge_u, mdwf_M5, mdwf_b5, mdwf_c5)
    src_5d[mdwf_L5] = latvec.op_mdwf_dminus(src_5d[mdwf_L5], gauge_u, mdwf_M5, mdwf_b5, mdwf_c5)
    return dwf_sol_5D_to_4D(mdwf_solver(src_5d), mdwf_L5)
  elseif type(src) == 'table' then
    local src_dminus = {}
    for s = 0, mdwf_L5 - 1 do
      src_dminus[1+s] = latvec.op_mdwf_dminus(src[1+s], gauge_u, mdwf_M5, mdwf_b5, mdwf_c5)
    end 
    return mdwf_solver(src_dminus)
  else
    error(string.format("invalid source type='%s'", type(src)))
    return nil
  end
end

-- wrapper including Dminus application
function make_calc_mdwf_prop(mdwf_solver, gauge_u, mdwf_L5, mdwf_M5, mdwf_b5, mdwf_c5)
  error("this function MOST LIKELY produces wrong propagators because fermion BCs are not taken into account in the Dminus operator ; use library function in lhpc/dwf.qlua OR otherwise make sure you know what you are doing")
  return function(x)
    return calc_mdwf_prop(mdwf_solver, gauge_u, mdwf_L5, mdwf_M5, mdwf_b5, mdwf_c5, x)
  end
end 


-- -----------------------------------------------------------------
