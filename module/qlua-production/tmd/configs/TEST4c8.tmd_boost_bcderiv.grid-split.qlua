-- XXX copy&modify from config_4c8.tmd_boost.qlua
package.path = 'qlib/?.qlua;qlib-lhpc/?.qlua;qlua-production/?.qlua;' .. package.path
require 'strict'
require 'setup_util'
require 'stdlib'
require 'dwf_bcderiv_split'
require 'mdwf_eopc'   -- MDWF ref.impl to check evecs
require 'ape-smear'
require 'hex-smear'
require 'hadron/qbarq_wline'
require 'smear/field_smear'
require 'iter'

function debug_mem_print(cfg_key, msg)
  msg = msg or ""
  if 0 == os.node() then qcd.log_rusage(string.format("%s.rusage", cfg_key), msg) end
  print_obj(qcd.memory_usage(), msg)
end

-------------------------------------------------------------------------------
-- general
-------------------------------------------------------------------------------
--local _P = {}
--jobcfg = _P
--setmetatable(_P, {__index = _G})
--setfenv(1, _P)
jobcfg = _G
job_config = jobcfg

require 'rcparams'
rcparams.backend.laplacian = 'cpu'
rcparams.backend.qbarq = 'cpu'
rcparams.backend.dslash_solver = 'cpu-grid-lib'

preptest = {
  bmark_la            = true,
  test_read_gauge     = true,
  test_save_hadspec   = true,
  test_save_bb        = true,
  test_save_bb_gen    = true,
  test_ape            = true,
  test_wup            = true,
  test_prop           = true,
  test_evec           = true,
  test_g5herm         = true,
}

assert(job_key)
assert(task_key)  -- for keeping track of samples in task 
assert(subjob_key)
if "" == subjob_key then sample_list = false
else sample_list = parse_int_range(subjob_key) end

jobcfg.cfg_key = job_key -- job# enumerates config#
jobcfg.rnd_seed= 1984
jobcfg.ens_top   = 'TEST4c8'

require 'config/dwf/TEST4c8_zmobius'


-------------------------------------------------------------------------------
-- solver & props
-------------------------------------------------------------------------------
--jobcfg.do_contract_only = true
jobcfg.do_contract_only = false
--jobcfg.do_bogus_prop = true
jobcfg.do_bogus_prop = false
require 'config/dwf/TEST4c8_zmobius_grid_split'

-- if all propagators have been computed & stored, do not init solvers
jobcfg.do_save_prop = { 
  F   = true,     -- need full F to compute C with gamma5
  Fg  = false,    -- keep F instead
  B   = true,     -- need for cvi3 with gamma5, for xspace theta; also, read for reuse in one job
  Bg  = true,
  C   = false,    -- grouped C is sufficient
  Cg  = true,
  EpG = false, 
}


-------------------------------------------------------------------------------
-- AMA approximations
-------------------------------------------------------------------------------
--if true then
if false then
  sloppy_csrc_list = make_src_grid(
      {  1,  1,  2,  4 },   -- n_src
      latsize,
      {0,0,0,0},            -- x0
      {7,11,13,23}, jobcfg.cfg_index)   -- displacement by config#
  -- * approx modes
  ama_sl = { ['approx']    = 'sloppy',
      ['csrc_list'] = sloppy_csrc_list,
      ['ncg']       = 50,
      ['prop_prec'] = 'float' }
  ama_ex = { ['approx']    = 'exact',
      ['csrc_list'] = { sloppy_csrc_list[1] },
      ['prop_prec'] = 'double' }
  ama_list = { 
    ama_sl, 
--    ama_ex,
  }
else 
  csrcgrid  = { 1, 1, 2, 2 }
  local x0_1= { 0, 0, 0, 0 }
  local dx_g= { 7,11,13,23 }
  local dx_it={ latsize[1]/2, latsize[2]/2, latsize[3]/2, 0 } -- max displacement
  csrcgrid_nt = csrcgrid[1+t_axis]
  hslab_len_t = math.floor(latsize[1+t_axis] / csrcgrid_nt)

  local l1 = make_srcgrp_grid(csrcgrid, latsize, x0_1, dx_g, jobcfg.cfg_index, dx_it)
  local csrcgrp_list_sl = l1
  local csrcgrp_list_ex = { l1[1] }
  ama_ex = { ['approx']    = 'exact',
        ['csrcgrp_list'] = csrcgrp_list_ex,
  --      ['tol']       = 1e-9 
        ['prop_prec'] = 'double' }
  ama_sl = { ['approx']    = 'sloppy',
        ['csrcgrp_list'] = csrcgrp_list_sl,
        ['ncg']       = 20,
        ['prop_prec'] = 'float' }
  ama_list = { 
    ama_sl, 
--    ama_ex,
  }
end


------------------------------------------------------------------------------
-- file locations
------------------------------------------------------------------------------
jobcfg.data_top  = jobcfg.ens_top..'/data' 
jobcfg.data_pdir = jobcfg.ens_top..'/data_pdir'

prop_qio_stride   = 2
prop_qio_volfmt   = 'part_dir'


require 'tmd/configs/config_filenames'

function arpack_logfile(cfg_key)
  return string.format("%s/arpack.log", logdir, cfg_key)
end

-- logging propagators and samples
function get_prop_log_file(cfg_key, prop_kind)
  return string.format("%s/prop_log/%s.%s", 
      jobcfg.data_pdir, cfg_key, prop_kind)
end

function sample_log_file(cfg_key)
  return string.format("%s/sample_log/%s.%s", 
      jobcfg.data_top, cfg_key, task_key)
end


------------------------------------------------------------------------------
-- correlator parameters
------------------------------------------------------------------------------
-- smearing params
ape_alpha   = 2.5   -- equiv to CPS ape_beta=0.4
ape_N       = 2
ape_accu    = 1e-6
ape_maxiter = 150
wup_N       = 5
wup_alpha   = 2.5

tt = timer("gauge_smear[ape]")
wup_gauge_u = APE_smear(gauge_u, ape_alpha, ape_N, ape_accu, ape_maxiter, t_axis) ; tt("done")
-- smearing opts
smear_shape1 = {type='wuppertal', t_axis=t_axis,
    wup_U=wup_gauge_u, wup_N=wup_N, wup_alpha=wup_alpha }
smear_opt_b0  = table_join(smear_shape1, {tag='GN2p5x5bxp0' }) -- no boost
smear_opt_b05 = table_join(smear_shape1,
        {tag='GN2p5x5bxp05', boost={0.5, 0, 0, 0} })
smear_opt_b10 = table_join(smear_shape1,
        {tag='GN2p5x5bxp10', boost={1.0, 0, 0, 0} })
smear_opt_b15 = table_join(smear_shape1,
        {tag='GN2p5x5bxp15', boost={1.5, 0, 0, 0} })

pm1     = {-1, 0, 1}        -- [-1;1] 

-- momenta for c2pt, insertion
c2pt_psnk_list = make_mom_list(3)
c2pt_symm_psnk_list = c2pt_psnk_list
c2pt_skew_psnk_list = c2pt_psnk_list
c3pt_qext_list_yz1 = range_prod({ {0}, pm1, pm1 })
-- source-sink separation, length for chopping
c3pt_tsep_list = { 2, 3, }
tmd_len_t = nil

-- { { frw_dd1, bkw_dd1 }, ... }

-- for sample_tmdState_bcderiv_cohbkw_boost(v1)
tmd_bcderiv_pair_list = { {'', ''}, {'z', ''}, {'', 'z'} }
tmd_lpspec_list_bfirst = tmd_lpspec_expand({
  { rev=true, 'yy',   'zz',   vl={ rev=true, 'xxxx' } },
  { rev=true, 'yyy',  'zzz',  vl={ rev=true, 'xx',  } },
  { rev=true, 'yyyy', 'zzzz', vl={ rev=true,        } },
})

-- for sample_tmdState_bcderiv_cohbkw_boost_v2
tmd_lpspec_list_bfirst_0d = tmd_lpspec_list_bfirst
tmd_lpspec_list_bfirst_1d = tmd_lpspec_expand({
  { rev=true, 'yy',   'zz',   vl={ rev=true, 'xxx' } },
  { rev=true, 'yyy',  'zzz',  vl={ rev=true, 'x',  } },
})
tmd_table_bcderiv_lpspec = {
  [{'' , '' }]  = tmd_lpspec_list_bfirst_0d, 
  [{'z', '' }]  = tmd_lpspec_list_bfirst_1d,
  [{'' , 'z'}]  = tmd_lpspec_list_bfirst_1d,
}

-- source-sink spec list for correlators
-- XXX modified for sample_tmdState_bcderiv_cohbkw_boost_v2
c3pt_src_sink_pair_list_v1 = {
  { smear_opt_b0,
    { { smear_opt_b0, c2pt_skew_psnk_list, { 0, 0, 0 }, c3pt_qext_list_yz1 } },
    c3pt_tsep_list, 
    tmd_bcderiv_pair_list,
    tmd_lpspec_list_bfirst,   -- XXX for v2
  },
  { smear_opt_b05,
    { { smear_opt_b05, c2pt_skew_psnk_list, { 1, 0, 0 }, c3pt_qext_list_yz1 } },
    c3pt_tsep_list, 
    tmd_bcderiv_pair_list,
    tmd_lpspec_list_bfirst,   -- XXX for v2
  },
}
c3pt_src_sink_pair_list_v2 = {
  { smear_opt_b0,
    { { smear_opt_b0, c2pt_skew_psnk_list, { 0, 0, 0 }, c3pt_qext_list_yz1 } },
    c3pt_tsep_list, 
    tmd_table_bcderiv_lpspec,   -- XXX for v2
  },
  { smear_opt_b05,
    { { smear_opt_b05, c2pt_skew_psnk_list, { 1, 0, 0 }, c3pt_qext_list_yz1 } },
    c3pt_tsep_list, 
    tmd_table_bcderiv_lpspec,   -- XXX for v2
  },
}

-- polarization matrices for nucleon ops
tmd_S1   = gamma{mu=0} * gamma{mu=2}
tmd_S2   = tmd_S1
-- tpol is used in CP-even, tpol5 in CP-odd correlators
tpol_posSzplus  = (1. + gamma{mu=3})/2 *(1. - gamma{mu=0}*gamma{mu=1}*complex(0,1))
tpol_posSzminus = (1. + gamma{mu=3})/2 *(1. + gamma{mu=0}*gamma{mu=1}*complex(0,1))
tpol_posSzplus5 = (1. + gamma{mu=3})/2 *(1. - gamma{mu=0}*gamma{mu=1}*complex(0,1)) *gamma{n=15}
tpol_posSzminus5= (1. + gamma{mu=3})/2 *(1. + gamma{mu=0}*gamma{mu=1}*complex(0,1)) *gamma{n=15}

-- include both spin polarizations for c2pt, one for c3pt
tmd_Tpol_c3pt_list = { 
  posSzplus   = tpol_posSzplus, }

-- flavor components (assuming proton in&out)
flav_list = { 'U', 'D' }
-- tmd linkpath specs



gauge_u_lpath = gauge_hyp_smear_std(gauge_u, 1)
tmd_bkw_indep = false


if false then
  solver_bcd = make_solver_bcderiv(ama_ex)
  src_bcd = iter.ordered_tmap_pair_table(function(i, dd) return dd, S:gaussian_DiracPropagator() end, {'', 'x'})
  print_obj(src_bcd, 'src_bcd')
  sol_bcd = solver_bcd(src_bcd)
  print_obj(sol_bcd, 'sol_bcd')
end
