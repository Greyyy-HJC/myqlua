---------------------------------------------------------------------------------------------------
-- 2019/07/26 syritsyn
--  script for 48I dwf tmd production on KNL with deflation
--  should be run as
--  $ mpirun  qlua  <job.qlua>  <this-config.qlua>  <main-tmd-script.qlua>
--  <main-tmd-script.qlua> may be omitted to perform gauge read, eigenvector read & test.
--
--  This script includes:
--  * lattice and dw action parameters
--  * boosted smearing params
--  * gauge file read & APE smear 
--  * using Grid DWF inverters opt. for KNL
--  * computing exact samples with zMobius-accel. DWF (Grid for zmobius and PV inverters)
--  * regular or split solver
--  * testing of the lowest dwf eigenvector(s)
--
--  XXX imports tmd/config/config_filenames
--  XXX needs actual TMD linkpath params
---------------------------------------------------------------------------------------------------
--package.path = 'qlib/?.qlua;qlib-lhpc/?.qlua;qlua-production/?.qlua;' .. package.path
package.path = '../qlua/qlib/?.qlua;../qlua/lhpc/?.qlua;qlua-production/?.qlua;' .. package.path
require 'strict'
require 'setup_util'
require 'stdlib'
require 'dwf'
require 'dwf_split'
require 'mdwf_eopc'   -- MDWF ref.impl to check evecs
require 'ape-smear' -- gauge smear
require 'hadron/qbarq_wline'
require 'smear/field_smear'
require 'util/strkey'

--package.path = 'qlib/?.qlua;' .. package.path
--require 'stdlib'
printf("num_threads=%d\n", openmp.num_threads())
printf("thread_limits=%d\n", openmp.thread_limit())
for i, la_pp in pairs({
        { "gemm", "c",   300,    300,    300 },        -- float complex  ( 300, 300)x( 300, 300)
        { "gemm", "z",   300,    300,    300 },        -- double complex ( 300, 300)x( 300, 300)
        { "gemm", "c",  1000,   1000,   1000 },    -- float complex  (1000,1000)x(1000,1000)
        { "gemm", "z",  1000,   1000,   1000 },    -- double complex(1000,1000)x(1000,1000)
        { "gemm", "c",  3000,   3000,   3000 },    -- float complex  (3000,3000)x(3000,3000)
        { "gemm", "z",  3000,   3000,   3000 },    -- double complex(3000,3000)x(3000,3000)
      }) do
  local bm, pd, m,n,k = unpack(la_pp)
  local cur_str = string.format("la_benchmark %2s %6s %6d %6d %6d", bm, pd, m, n, k)
  printf("%s\n", cur_str)
  local cur_t = timer(cur_str)
  qcd.latmat.la_benchmark(bm, pd, m, n, k)
  cur_t("done")
end 

require 'rcparams'
rcparams.backend.laplacian = 'cpu-clover'
rcparams.backend.qbarq = 'cpu'

--local _P = {}
--job_config = _P
--setmetatable(_P, {__index = _G})
--setfenv(1, _P)
job_config = _G

--assert(nil == 'ADJUST ALL THE PARAMETERS (marked with TODO)')


---------------------------------------------------------------------------------------------------
-- example job.qlua sns 2019/07/27
---------------------------------------------------------------------------------------------------
  -- run on 32 KNL nodes, to have enough ram: packed evecs are 1.5 TB, 1 node is 96(?)GB
  -- 4 ranks/node for max bandwidth (maybe irrelevant for this cluster)
  -- 
  --network_geom    = { 2, 2, 4, 8 }  --128
  --netblock_geom   = { 2, 2, 1, 1 } -- x,y directions will be packed into 1 netblock
  --split_geom      = { 1, 1, 4, 1 } -- split network into 4 CG solvers along z
  job_key         = '1000'
  task_key        = 'prop_test'
  subjob_key      = ''

-------------------------------------------------------------------------------
-- general
-------------------------------------------------------------------------------
assert(network_geom)        -- job script
assert(split_geom)          -- job script - XXX this is split-CG 4D geometry; product gives the total number of solves
assert(netblock_geom)       -- job script - XXX netblock geometry: if running on KNL with 4 MPI-ranks / node, set it to e.g. {1,1,2,2}; then {1,1,2,2}*local_xyzt will reside on the same node to minimize internode comms

assert(job_key)             -- job script: XXX typically config number (string)
assert(task_key)            -- job script: XXX for keeping track of samples in task 
assert(subjob_key)          -- job script: XXX typically enumerates (groups of) samples on the same config
if "" == subjob_key then sample_list = false
else sample_list = parse_int_range(subjob_key) end

cfg_key = job_key -- job# enumerates config#

latsize = {48,48,48,96}
t_axis = #latsize - 1
rnd_seed= 1984


-------------------------------------------------------------------------------
-- quark action 
-------------------------------------------------------------------------------
ferm_bc = {1,1,1,1} ; bc = ferm_bc
mdwf_M5 = 1.8
mdwf_mf = 0.00078
mdwf_L5_full = 24
mdwf_b5_full = 1.5
mdwf_c5_full = 0.5
-- zMoebius params : etamax=1.45
mdwf_L5  = 10
mdwf_bmc5 = 1.
mdwf_bpc5 = {   -- same as 16c32 test TODO check/update
  1./complex(1.45806438985048,-0),
  1./complex(1.18231318389348,-0),
  1./complex(0.830951166685955,-0),
  1./complex(0.542352409156791,-0),
  1./complex(0.341985020453729,-0),
  1./complex(0.21137902619029,-0),
  1./complex(0.126074299502912,-0),
  1./complex(0.0990136651962626,-0),
  1./complex(0.0686324988446592,0.0550658530827402),
  1./complex(0.0686324988446592,-0.0550658530827402),
}
assert(#mdwf_bpc5 == mdwf_L5)
mdwf_b5, mdwf_c5 = {}, {}
for s = 1, mdwf_L5 do 
  mdwf_b5[s] = .5 * (mdwf_bpc5[s] + mdwf_bmc5)
  mdwf_c5[s] = .5 * (mdwf_bpc5[s] - mdwf_bmc5)
end


-------------------------------------------------------------------------------
-- AMA approximations: TODO parameters and lists of samples
-------------------------------------------------------------------------------
-- * coordinates
cfg_list = {}
-- os module doesn`t work.....
--assert(io.fexists('list.cfg.all.48I'))
for s in io.lines('list.cfg.all.48I') do
  cfg_list[1+#cfg_list] = s
end
cfg_index = table_index(cfg_list, cfg_key)
printf("cfg_key='%s' index=%d\n", cfg_key, cfg_index)

--if true then
if false then
  sloppy_csrc_list = make_src_grid(
      {  4,  4,  2,  4 },   -- n_src
      latsize,
      {0,0,0,0},            -- x0
      {7,11,13,23}, cfg_index)   -- displacement by config#
  -- * approx modes
  ama_sl = { ['approx']    = 'sloppy',
      ['csrc_list'] = sloppy_csrc_list,
      ['ncg']       = 200,
      ['prop_prec'] = 'float' }
  ama_ex = { ['approx']    = 'exact',
      ['csrc_list'] = { sloppy_csrc_list[1] },
      ['prop_prec'] = 'double' }
  ama_list = { 
    ama_sl, 
--    ama_ex,
  }
else 
  csrcgrid  = { 4, 4, 2, 4 }
  local x0_1= { 0, 0, 0, 0 }
  local dx_g= { 7,11,13,23 }
  local dx_it={ latsize[1]/2, latsize[2]/2, latsize[3]/2, 0 } -- max displacement
  csrcgrid_nt = csrcgrid[1+t_axis]
  hslab_len_t = math.floor(latsize[1+t_axis] / csrcgrid_nt)

  local l1 = make_srcgrp_grid(csrcgrid, latsize, x0_1, dx_g, cfg_index, dx_it)
  local csrcgrp_list_sl = l1
  local csrcgrp_list_ex = { l1[1] }
  ama_ex = { ['approx']    = 'exact',
        ['csrcgrp_list'] = csrcgrp_list_ex,
        -- XXX exact samples are computed with Mobius-acc DWF, so tol is irrelevant but required for compat.
        ['tol']       = 1e-9,
        ['prop_prec'] = 'double' }
  ama_sl = { ['approx']    = 'sloppy',
        ['csrcgrp_list'] = csrcgrp_list_sl,
        ['ncg']       = 200,
        ['prop_prec'] = 'float' }
  -- XXX comment out / reorder to select sample production strategy
  ama_list = { 
    ama_sl, 
    ama_ex,
  }
end


------------------------------------------------------------------------------
-- solver section
------------------------------------------------------------------------------
-- if all propagators have been computed & stored, do not init solvers
do_contract_only = false
do_bogus_prop = false
do_save_prop = { 
  F   = true,     -- need full F to compute C with gamma5
  Fg  = false,    -- keep F instead
  B   = true,     -- need for cvi3 with gamma5, for xspace theta; also, read for reuse in one job
  C   = false,    -- grouped C is sufficient
  Cg  = true,
  EpG = false, 
}

-- evec params TODO check / adjust to actual evec storage params
mdwf_opt = {parity=1, pctype='eopc2p', 
  defl_type='qlm', defl_nvec=2000, defl_nvec_basis=400}
printf("mdwf_parity=%d    mdwf_pctype=%s\n", mdwf_opt.parity, mdwf_opt.pctype)
qlmopt= { sublat='odd', array=mdwf_L5, block={4,4,3,4}, arr_block=mdwf_L5,
          nvec_basis=mdwf_opt.defl_nvec_basis,
          prec='single'}
evecdwfcl_opt = { file_geom = {4,4,8,8}, dir_stride=32, bufsizeM=1024 }


function debug_mem_print(cfg_key, msg)
  msg = msg or ""
  if 0 == os.node() then qcd.log_rusage(string.format("%s.rusage", cfg_key), msg) end  -- print getrusage to file
  print_obj(qcd.memory_usage(), msg)  -- print Qlua lattice object count to stdout
end

------------------------------------------------------------------------------
-- file locations TODO adjust
------------------------------------------------------------------------------
ens_top   = '/p/project/chmz37/engel'
data_top  = ens_top .. '/data' 
data_pdir = ens_top .. '/data_pdir'

prop_qio_stride   = 1
prop_qio_volfmt   = 'part_dir'

-- return meta,eval,bpath
function get_evecdwfcl_files(cfg_key)
  local bpath = string.format("")
  bpath = string.format("%s/ckpoint_lat.%s.evecs",       
      ens_top, cfg_key)
  return bpath..'/metadata.txt', bpath..'/eigen-values.txt', bpath
end


function get_gauge_file(cfg_key)
  return string.format("%s/ckpoint_lat.%s",
          ens_top, cfg_key)
end


require 'tmd/configs/config_filenames'

function arpack_logfile(cfg_key)
  return string.format("%s/arpack.log", logdir, cfg_key)
end


-- logging propagators and samples
function get_prop_log_file(cfg_key, prop_kind)
  return string.format("%s/prop_log/%s.%s", 
          data_pdir, cfg_key, prop_kind)
end

function sample_log_file(cfg_key)
  return string.format("%s/sample_log/%s.%s", data_top, cfg_key, task_key)
end



-------------------------------------------------------------------------------
-- SETUP
-------------------------------------------------------------------------------
job_timer = timer("total")
L = qcd.lattice(latsize, {network=network_geom, netblock=netblock_geom})
lat = L     -- alias
S = rnd_init(L, rnd_seed)
rnd = S     -- alias
print_network_settings()
print_subgrid_settings(L)

debug_mem_print(cfg_key,"Init lattice. From config script.")
cur_timer = timer("gauge_read")
printf("read gauge '%s'\n", get_gauge_file(cfg_key))
_grid.init(L, {verbose=true, log='Error,Warning,Message,Iterative', shm_MB=2048, dslash_asm=true, comms_overlap=true})
gauge_u = qcd.nersc.read_gauge(L, get_gauge_file(cfg_key))
cur_timer("done")

------------------------------------------------------------------------------
-- correlator parameters
------------------------------------------------------------------------------
-- source parameters TODO adjust
ape_alpha   = 2.85   -- equiv to CPS ape_beta=0.4
ape_N       = 25
ape_accu    = 1e-12
ape_maxiter = 150
-- match G0.5625x100 from 2013 runs@Ds
wup_N       = 82
wup_alpha   = 2.5

tt = timer("gauge_smear[ape]")
wup_gauge_u = APE_smear(gauge_u, ape_alpha, ape_N, ape_accu, ape_maxiter, t_axis) ; tt("done")
-- smearing opts
smear_shape1 = {type='wuppertal', t_axis=t_axis,
    wup_U=wup_gauge_u, wup_N=wup_N, wup_alpha=wup_alpha }
--smear_opt_b0  = table_join(smear_shape1, {tag='GN2p5x5bxp0' }) -- no boost
smear_opt_b05 = table_join(smear_shape1,
        {tag='GN2p5x5bxp05', boost={0.5, 0, 0, 0} })
smear_opt_b10 = table_join(smear_shape1,
        {tag='GN2p5x5bxp10', boost={1.0, 0, 0, 0} })
smear_opt_b15 = table_join(smear_shape1,
        {tag='GN2p5x5bxp15', boost={1.5, 0, 0, 0} })

pm1     = {-1, 0, 1}        -- [-1;1] 

-- momenta for c2pt, insertion
c2pt_psnk_list = make_mom_list(12)
c2pt_symm_psnk_list = c2pt_psnk_list
c2pt_skew_psnk_list = c2pt_psnk_list
c3pt_qext_list_yz1 = range_prod({ {0}, pm1, pm1 })
-- source-sink separation, length for chopping
c3pt_tsep_list = { 8, 10, }
tmd_len_t = 12

-- source-sink spec list for correlators
c3pt_src_sink_pair_list = {
  -- TODO add zero momentum?
  --   elem  = { smear_src_opt
  --             { { smear_snk_opt, c2pt_skew_psnk_list, c3pt_psnk, c3pt_qext_list}, ... }
  --             tsep_list }
--  { smear_opt_b0,
--    { { smear_opt_b0, c2pt_skew_psnk_list, { 1, 0, 0 }, c3pt_qext_list_yz1 } },
--    c3pt_tsep_list },
  { smear_opt_b05,
    { { smear_opt_b05, c2pt_skew_psnk_list, { 1, 0, 0 }, c3pt_qext_list_yz1 } },
    c3pt_tsep_list },
  { smear_opt_b10,
    { { smear_opt_b10, c2pt_skew_psnk_list, { 2, 0, 0 }, c3pt_qext_list_yz1 } },
    c3pt_tsep_list },
  { smear_opt_b15,
    { { smear_opt_b15, c2pt_skew_psnk_list, { 3, 0, 0 }, c3pt_qext_list_yz1 } },
    c3pt_tsep_list },
}

-- polarization matrices for nucleon ops
tmd_S1   = gamma{mu=0} * gamma{mu=2}
tmd_S2   = tmd_S1
-- tpol is used in CP-even, tpol5 in CP-odd correlators
tpol_posSzplus  = (1. + gamma{mu=3})/2 *(1. - gamma{mu=0}*gamma{mu=1}*complex(0,1))
tpol_posSzminus = (1. + gamma{mu=3})/2 *(1. + gamma{mu=0}*gamma{mu=1}*complex(0,1))
tpol_posSzplus5 = (1. + gamma{mu=3})/2 *(1. - gamma{mu=0}*gamma{mu=1}*complex(0,1)) *gamma{n=15}
tpol_posSzminus5= (1. + gamma{mu=3})/2 *(1. + gamma{mu=0}*gamma{mu=1}*complex(0,1)) *gamma{n=15}

-- include both spin polarizations for c2pt, one for c3pt
tmd_Tpol_c3pt_list = { 
  posSzplus   = tpol_posSzplus, }

-- flavor components (assuming proton in&out)
flav_list = { 'U', 'D' }
-- tmd linkpath specs -- for testing purposes TODO replace with actual links
tmd_lpspec_list_bfirst = tmd_lpspec_expand({
  { rev=true, 'y',   'z',   vl={ rev=true, 'xx' } },
  { rev=true, 'yy',  'zz',  vl={ rev=true, 'x', } },
  { rev=true, 'xxx',        vl={ rev=true,      } },
})


-- XXX note that the solver and the deflator are created in this config file
mdwf_qlmx, mdwf_eval = nil, nil

debug_mem_print(cfg_key,"gauge read")
if do_bogus_prop then
  printf("WARNING: bogus(random) propagators for TESTING ONLY\n")
  make_solver = function() 
    return function(x) return latvec.random_like(x, rnd) end 
  end
  make_split_solver = make_solver 
elseif do_contract_only then    
  printf("WARNING: contractions only, no solver initialized\n")
  make_solver = function() 
    return function(x) return latvec.random_like(x, rnd) end 
  end
  make_split_solver = make_solver 
else

  -- load evecs
  if 'internal' == mdwf_opt.defl_type then  
    -- regular mdwf deflation
    local eigcg_vmax, eigcg_nev, eigcg_tol = 6, 2, 1e-6    -- hack: irrelevant params
    local mdwf_gen  = qcd.MDWF.generic(gauge_u, ferm_bc, 
              mdwf_L5, mdwf_M5, mdwf_mf,
                mdwf_b5, mdwf_c5, mdwf_opt)
    mdwf_eigcg_df = mdwf_gen:eig_deflator(eigcg_vmax, eigcg_nev, eigcg_tol, mdwf_opt.defl_nvec)

    cur_timer = timer("evecs_rawload")
    local evecs_perm = mdwf_evec_file(cfg_key, mdwf_opt.defl_nvec)
    printf("[evec_read] %s\n", evecs_perm)
    mdwf_eigcg_df:evecs_rawload(evecs_perm, mdwf_opt.defl_nvec, 
                  {rank_stride=evec_rawdump_stride})
    mdwf_eigcg_df:stop()
    mdwf_eval = mdwf_eigcg_df:eigenvalues()
    cur_timer("done")

    get_evec = function(i_ev) return mdwf_eigcg_df:get_vector(i_ev) end

  elseif 'int2qlm' == mdwf_opt.defl_type then 
    -- qlm deflation with vectors converted from mdwf rawdump
    local eigcg_vmax, eigcg_nev, eigcg_tol = 6, 2, 1e-6    -- hack: irrelevant params
    local mdwf_load = qcd.MDWF.generic(gauge_u, ferm_bc, mdwf_L5, mdwf_M5, mdwf_mf, 
                mdwf_b5, mdwf_c5, mdwf_opt)
    mdwf_eigcg_df = mdwf_load:eig_deflator(eigcg_vmax, eigcg_nev, eigcg_tol, mdwf_opt.defl_nvec)
    local evecs_perm = mdwf_evec_file(cfg_key, mdwf_opt.defl_nvec)
    cur_timer = timer("evecs_rawload")
    printf("[evec_read] %s\n", evecs_perm)
    mdwf_eigcg_df:evecs_rawload(evecs_perm, mdwf_opt.defl_nvec, 
                  {rank_stride=evec_rawdump_stride})
    mdwf_eigcg_df:stop()                                    ; cur_timer('done')

    mdwf_qlmx  = qcd.latmat.create(L, 'lattice.dirac.fermion', mdwf_opt.defl_nvec, qlmopt)
    cur_timer = timer("evecs_int2qlm")
    for i_ev = 0, mdwf_opt.defl_nvec - 1 do
     mdwf_qlmx:insert(i_ev, mdwf_eigcg_df:get_vector(i_ev))
    end
    mdwf_eval = mdwf_eigcg_df:eigenvalues()
    cur_timer('done')
    mdwf_load = nil
    force_gc('mdwf_load')

    get_evec = function(i_ev) return mdwf_qlmx:extract(i_ev) end

  elseif 'qlm' == mdwf_opt.defl_type then 
    -- MDWF evecs
    mdwf_qlmx  = qcd.latmat.create(L, 'lattice.dirac.fermion', mdwf_opt.defl_nvec, qlmopt)
    cur_timer = timer("read_df_blk_clehner")
    local evec_md,evec_ev,evec_bp = get_evecdwfcl_files(cfg_key)
    printf("[evec-cache] reading  '%s'  '%s'  '%s'\n", evec_md, evec_ev, evec_bp)
    mdwf_eval = qcd.latmat.read_df_blk_clehner(mdwf_qlmx, evec_md, evec_ev, evec_bp, evecdwfcl_opt)
    cur_timer("done")
    printf("mdwf_qlmx=%s\n", tostring(mdwf_qlmx))
    print_vector(mdwf_eval, "eval")
    debug_mem_print(cfg_key,"Eigenvectors read")
    get_evec = function(i_ev) return mdwf_qlmx:extract(i_ev) end

  else
    error(string.format("bad defl_type='%s'", mdwf_opt.defl_type))
  end

  -- check the lowest evec(s)
  local gauge_u_bc = latvec.copy(gauge_u)
  gauge_apply_bc(gauge_u_bc, ferm_bc)
  print_obj(mdwf_opt,"mdwf_opt")
  mdwf_op_ref = make_mdwf_op_ref(gauge_u_bc, mdwf_L5, mdwf_M5, mdwf_mf,
            mdwf_b5, mdwf_c5, mdwf_opt.pctype)
  for i_ev = 0, 1 do
    local v = get_evec(i_ev)
    latvec.print_eo_norm2(v, string.format("v[%2d]", i_ev))
    local MxM_v = mdwf_op_ref.op_MxM(v)
    printf("v.MxM.v[%2d] = %23.16e\n", i_ev, latvec.vdot(v, MxM_v):real())
    latvec.print_eo_norm2(MxM_v, string.format("MxM_v[%2d]", i_ev))
    latvec.print_cmp(MxM_v, v, string.format("MxM(v)<>v[%2d]", i_ev))
  end
  -- madcg/split solver params
  local tol_nostop          = 1e-12     -- norestart
  local maxiter_nostop      = 10000     -- norestart
  local mdwf_madcg_maxiter  = 3
  local dwf_verbose         = 'full'
  local dwf_backend         = 'cpu-grid-lib'
  local mdwf_split_geom     = assert(split_geom) 
  assert(mdwf_qlmx)
  assert(mdwf_eval)
  local mdwf_opt_defl = {   
    verbose         = 1, 
    pctype          = mdwf_opt.pctype, 
    parity          = mdwf_opt.parity,
    defl            = {mdwf_qlmx, mdwf_eval},
    tol_restart     = tol_nostop, maxiter_restart = maxiter_nostop,
  }

  -- XXX params set to I48 ensemble TODO recheck!
  local mdwf_madcg_opt = { 
    verbose   = dwf_verbose,  print_residual = true,
    backend   = dwf_backend,
    mdwf_opt  = mdwf_opt_defl,
    -- sic! new parameterization: tol = sqrt(eps2)
    tol_i     = 3e-3,   maxiter_i     = 300,            -- stop at tol_i
    tol_f     = 3e-2,   maxiter_f     = 300,            -- stop at tol_f
    tol_moeb  = 1e-4,   maxiter_moeb  = 3000,           -- 1defl+stop at tol
    tol_pv    = 1e-5,   maxiter_pv    = 1000,           -- stop at tol_pv
    tol_1     = 1e-5,   maxiter_1     = 500,            -- no restarts
  }
  local mdwf_solver_opt = { 
    verbose   = dwf_verbose, 
    backend   = dwf_backend, 
    mdwf_opt  = mdwf_opt_defl,
    -- sic! new parameterization: tol = sqrt(eps2)
    tol   = 1e-10,      maxiter   = ama_sl['ncg'],     -- stop at maxiter
    tol_1 = tol_nostop, maxiter_1 = maxiter_nostop, -- no restarts
  }

  -- make regular solver
  function make_solver(ama)
    if 'exact' == ama['approx'] then
      return dwf.mdwf_g5herm_madcg_solver(
          gauge_u, ferm_bc, mdwf_M5, mdwf_mf,
          mdwf_L5,      mdwf_b5,      mdwf_c5,
          mdwf_L5_full, mdwf_b5_full, mdwf_c5_full,
          mdwf_madcg_maxiter,
          mdwf_madcg_opt)
    elseif 'sloppy' == ama['approx'] then
      return dwf.mdwf_g5herm_solver(
          gauge_u, ferm_bc, 
          mdwf_L5, mdwf_M5, mdwf_mf,
          mdwf_b5, mdwf_c5,
          mdwf_solver_opt)
    else
      error(string.format("unknown approx='%s'"), ama['approx'])
    end
  end

  -- make split solver
  function make_split_solver(ama)
    if 'exact' == ama['approx'] then
      return dwf.mdwf_g5herm_madcg_split_solver(
          mdwf_split_geom,
          gauge_u, ferm_bc, mdwf_M5, mdwf_mf,
          mdwf_L5,      mdwf_b5,      mdwf_c5,
          mdwf_L5_full, mdwf_b5_full, mdwf_c5_full,
          mdwf_madcg_maxiter,
          mdwf_madcg_opt)
    elseif 'sloppy' == ama['approx'] then
      return dwf.mdwf_g5herm_split_solver(
          mdwf_split_geom,
          gauge_u, ferm_bc, 
          mdwf_L5, mdwf_M5, mdwf_mf,
          mdwf_b5, mdwf_c5,
          mdwf_solver_opt)
    else
      error(string.format("unknown approx='%s'"), ama['approx'])
    end
  end

end


-------------------------------------------------------------------------------
-- prop test TODO uncomment for prop test
-------------------------------------------------------------------------------
if true then 
--if false then 
  local rhs1 = S:gaussian_DiracPropagator()
  for i_ama, ama in ipairs(ama_list) do
    printf("TEST ama='%s'\n", ama.approx)
    local tt

    tt = timer(string.format("solver_test.%s", ama.approx))
    printf("make_solver\n")     ; solver  = make_solver(ama)    ; tt('make_solver')
    printf("solve_dirprop\n")   ; local sol1 = solver(rhs1)     ; tt('solve_dirprop')

    tt = timer(string.format("split_solver_test.%s", ama.approx))
    printf("make_solver\n")     ; spsolver  = make_split_solver(ama)  ; tt('make_solver')
    printf("solve_dirprop\n")   ; local sol2 = spsolver(rhs1)   ; tt('solve_dirprop')

    latvec.print_cmp(sol1, sol2, 'CG<>splitCG')
  end
end
