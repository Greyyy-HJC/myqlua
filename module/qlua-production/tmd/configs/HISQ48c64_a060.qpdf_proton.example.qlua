-- XXX this new-style config does NOT use "relative" momenta: all momenta
-- XXX are defined as absolute
package.path = 'qlib/?.qlua;qlib-lhpc/?.qlua;qlua-production/?.qlua;' .. package.path
--print("package.path - config.qlua: ", package.path)
require 'strict'
require 'setup_util'
require 'debug_util'
require 'latvec'
require 'stdlib'
require 'util/strkey'
require 'lhpc-std'
require 'qdpc_io'
require 'gauge'
require 'ape-smear'
require 'stout-smear'
require 'hex-smear'
require 'hadron/qbarq_wline'
require 'smear/field_smear'
require 'smear/gauge_smear' -- for gauge_hyp_general_shmap 
require 'config/econfig'


-- hardware-specific params
require 'rcparam'
rcparam.set('backend.dslash_solver',  'gpu-quda-mg')    -- Dslash solver @GPU
rcparam.set('backend.laplacian',      'gpu-quda')       -- smearing @GPU
rcparam.set('backend.qbarq',          'gpu-quda')       -- contractions @GPU
rcparam.set('backend.la',             'gpu-cublas')     -- deflation and FT @GPU with cublas(Xt)
rcparam.set('backend.gpu_blockdim',   512)              -- cublas blocksize
print_obj(rcparams, 'rcparams')

contract_only = false -- stub
if contract_only then printf("*** CONTRACT_ONLY ***\n") end

-------------------------------------------------------------------------------
-- general
-------------------------------------------------------------------------------
jobcfg      = _G
job_config  = jobcfg

cfg_key = assert(job_key)
task_key = 'qbarq'
assert(subjob_key)
if "" == subjob_key then sample_list = false
else sample_list = parse_int_range(subjob_key) end

-- ensemble key to select params
ekey        = 'Hotqcd_hisqsea_a060_48c64'
etab      = econfig.ensemble_param[ekey]
latsize   = etab.latsize
t_axis    = #latsize - 1
rnd_seed  = 1984

-- pre-run tests
preptest = {
  bmark_la            = true,
}
-- prop save switches
do_save_prop = {
  F   = false,
  Fg  = false,
  B   = false,
  Bg  = false,
}

-------------------------------------------------------------------------------
-- coord sampling & AMA
-------------------------------------------------------------------------------
-- * coordinates

-- XXX DO INDEPENDENT BACKWARD PROPAGATORS, not coherent!!! 
-- TODO bundle in source groups for contraction efficiency?
c3pt_bkw_indep = true

do 
  cfg_list = {}
  for s in io.lines(string.format('qlua-production/config/cfglist/%s.ALL', ekey)) do
    cfg_list[1+#cfg_list] = s
  end
  cfg_index = table_index(cfg_list, cfg_key)
  printf("cfg_key='%s' index=%d\n", cfg_key, cfg_index)

  csrcgrid  = { 2, 2, 2, 1 }
  local x0_0= { 0, 0, 0, 0*latsize[4]/4 }
  local x0_1= { 0, 0, 0, 1*latsize[4]/4 }
  local x0_2= { 0, 0, 0, 2*latsize[4]/4 }
  local x0_3= { 0, 0, 0, 3*latsize[4]/4 }
  local dx_g= { 7,11,13,23 }
--  local dx_it={ 0,0,0, 0 } -- no displacement
  local dx_it={ latsize[1]/2, latsize[2]/2, latsize[3]/2, 0 } -- max displacement in coh.sources ('X' placement)
  csrcgrid_nt = csrcgrid[1+t_axis]
  hslab_len_t = math.floor(latsize[1+t_axis] / csrcgrid_nt)
  local l1 = list_join(
      make_srcgrp_grid(csrcgrid, latsize, x0_0, dx_g, cfg_index, dx_it),
      make_srcgrp_grid(csrcgrid, latsize, x0_1, dx_g, cfg_index, dx_it),
      make_srcgrp_grid(csrcgrid, latsize, x0_2, dx_g, cfg_index, dx_it),
      make_srcgrp_grid(csrcgrid, latsize, x0_3, dx_g, cfg_index, dx_it))
  local csrcgrp_list_sl = l1
  local csrcgrp_list_ex = { l1[1] }
  local ex_table = { 
     approx    = 'exact',
     csrcgrp_list = csrcgrp_list_ex,
     tol       = 1e-10,
     prop_prec = 'double' 
  }
  local sl_table = { 
     approx    = 'sloppy',
     csrcgrp_list = csrcgrp_list_sl,
     tol       = 1e-4,
     prop_prec = 'float' 
  }

  ama_list = { 
    ex_table, 
    sl_table, 
  }
  -- TODO uncomment to select based on 'smpl' key
--  if smpl == "ex" then
--     ama_list = { ex_table }
--  elseif smpl == "sl" then
--     ama_list = { sl_table }
--  elseif smpl == "all" then
--     ama_list = { ex_table, sl_table }
--  end
end

-------------------------------------------------------------------------------
-- data file param and locations
-------------------------------------------------------------------------------
ens_top   = '.'
data_top  = 'data'
data_pdir = 'data_pdir' 
prop_volfmt     = 'single'
gauge_fmt = 'milc'


-- gauge config
function get_gauge_file(key)
   return string.format('%s/gauge/l4864f21b7373m00125m0250b.%s', 
			ens_top, key)
end
function get_gauge_gfix_file(key, gfix_type)
  return string.format("%s/gauge_gfix/ckpoint_lat.%s.%s",
          data_top, gfix_type, key)
end
function get_colmat_gfix_file(key, gfix_type)
  return string.format("%s/colmat_gfix/colmat_gfix.%s.%s",
          data_top, gfix_type, key)
end

-- c2pt
require 'tmd/configs/config_filenames'

function get_prop_log_file(cfg_key, prop_kind)
  return string.format("%s/prop_log/%s.%s", 
          data_pdir, cfg_key, prop_kind)
end
function sample_log_file(cfg_key)
  return string.format("%s/sample_log/%s.%s", data_top, job_key, task_key)
end


-------------------------------------------------------------------------------
-- setup lattice etc
-------------------------------------------------------------------------------
job_timer = timer("total")
L = qcd.lattice(latsize, {network=network_geom})
S = rnd_init(L, rnd_seed) ; rnd = S
print_network_settings()
print_subgrid_settings(L)
if rawget(_G, 'openmp') then
  printf("OpenMP:num_threads=%d\n", openmp.num_threads())
  printf("OpenMP:thread_limits=%d\n", openmp.thread_limit())
end

gauge_file = get_gauge_file(cfg_key)    
printf("read gauge '%s' [%s]\n", gauge_file, gauge_fmt)
local tt  = timer("gauge_read")
if     'nersc' == gauge_fmt then 
  gauge_u = qcd.nersc.read_gauge(L, gauge_file)
elseif 'milc'  == gauge_fmt then
  gauge_u = qcd.milc.read_gauge(L, gauge_file)
elseif 'lime' == gauge_fmt then
  gauge_u = load_qdpc_gauge(L, gauge_file)
elseif 'random' == gauge_fmt then
  printf("********* BOGUS random gauge field **********\n")
  gauge_u = latvec.fromfunction({4}, function()return toSUn(S:gaussian_ColorMatrix()) end)
else error(string.format("unknown gauge_fmt='%s'", gauge_fmt)) end
tt('done')

print_gauge_norm_det(gauge_u, "gauge_u")
print_gauge_plaquette(gauge_u, "gauge_u")

local tt  = timer('hyp_smear')
gauge_u_hyp1 = gauge_hyp_smear_std(gauge_u, 1)     ; tt('done')
print_gauge_norm_det(gauge_u_hyp1, "gauge_u_hyp1")
print_gauge_plaquette(gauge_u_hyp1, "gauge_u_hyp1")

gfix_type = "coulomb"
colmat_gfix_file = get_colmat_gfix_file(cfg_key, gfix_type)
printf("read colmat '%s'\n", colmat_gfix_file)
colmat_gfix = load_qdpc_colmat(L, colmat_gfix_file)
print_colmat_norm_det(colmat_gfix, "colmat_gfix")

-------------------------------------------------------------------------------
-- source smearing, correlator parameters
-------------------------------------------------------------------------------
-- sic! 4d
kbxp10  = {  1,  0,  0,  0}
kbxm10  = { -1,  0,  0,  0}
kbym10  = {  0, -1,  0,  0}
kbzm10  = {  0,  0, -1,  0}

smear_shape1 = {type='coulgauss', t_axis=t_axis, 
  coulomb_G=colmat_gfix, gauss_W=5.2 }
smear_opt_bx00 = table_join(smear_shape1,
    {tag='CG52bxp00', boost=list_scal(0  , kbxp10)})
smear_opt_bx05 = table_join(smear_shape1,
    {tag='CG52bxp05', boost=list_scal(0.5, kbxp10)})
smear_opt_bx10 = table_join(smear_shape1,
    {tag='CG52bxp10', boost=list_scal(1.0, kbxp10)})
smear_opt_bx15 = table_join(smear_shape1,
    {tag='CG52bxp15', boost=list_scal(1.5, kbxp10)})
smear_opt_bx20 = table_join(smear_shape1,
    {tag='CG52bxp20', boost=list_scal(2.0, kbxp10)})
smear_opt_bx25 = table_join(smear_shape1,
    {tag='CG52bxp25', boost=list_scal(2.5, kbxp10)})
smear_opt_bx30 = table_join(smear_shape1,
    {tag='CG52bxp30', boost=list_scal(3.0, kbxp10)})

-- momenta
pm0     = {0}
pm1     = {-1, 0, 1}        -- [-1;1]
pm2     = {-2,-1, 0, 1, 2}  -- [-2;2]
c2pt_symm_psnk_list = range_prod({range(-10,11), pm1, pm1}) -- 20*9
-- c2pt_symm_psnk_list = range_prod({{2}, pm0, pm0}) -- 20*9

qext_list_maxsq3 = make_mom_list(3) -- up to (1,1,1)+rotations
c3pt_tsep_list = { 8 } --- { 8, 10, 12 }

-------------------------------------------------------------------------------
-- correlator parameters
-------------------------------------------------------------------------------

-- polarization
proton_src_S   = gamma{mu=0} * gamma{mu=2}
proton_snk_S   = proton_src_S
tpol_posSzplus  = (1. + gamma{mu=3})/2 *(1. - gamma{mu=0}*gamma{mu=1}*complex(0,1))
c3pt_Tpol_list = { posSzplus   = tpol_posSzplus, }

-- specification of Wilson line insertions
c3pt_qpdf_spec_list_l24 = {
  -- l=0 is not saved twice
  { 'x',  0, 24 }, 
  { 'X',  0, 24 }, 
}

flav_list = { 'U', 'D' }      --flavor
c3pt_len_t = 16               -- size of time slab to cut out for saving

-------------------------------------------------------------------------------
c3pt_src_sink_pair_list = {
  -- TODO add zero momentum?
  --   smear_src_opt, tsep_list, 
  --   {smear_snk_opt, c2pt_skew_psnk_list, c3pt_psnk, c3pt_qext_list}
  { smear_opt_bx00,
    { { smear_opt_bx00, {}, { 0, 0, 0 }, qext_list_maxsq3 } },
    c3pt_tsep_list,
    c3pt_qpdf_spec_list_l24,
  },
  { smear_opt_bx05,
    { { smear_opt_bx05, {}, { 1, 0, 0 }, qext_list_maxsq3 } },
    c3pt_tsep_list,
    c3pt_qpdf_spec_list_l24,
  },
  { smear_opt_bx10,
    { 
      { smear_opt_bx10, {}, { 2, 0, 0 }, qext_list_maxsq3 },
    },
    c3pt_tsep_list,
    c3pt_qpdf_spec_list_l24,
  },
  { smear_opt_bx15,
    { 
      { smear_opt_bx15, {}, { 3, 0, 0 }, qext_list_maxsq3 },
    },
    c3pt_tsep_list,
    c3pt_qpdf_spec_list_l24,
  },
  { smear_opt_bx20,
    { 
      { smear_opt_bx20, {}, { 4, 0, 0 }, qext_list_maxsq3 },
    },
    c3pt_tsep_list,
    c3pt_qpdf_spec_list_l24,
  },
  { smear_opt_bx25,
    { 
      { smear_opt_bx25, {}, { 5, 0, 0 }, qext_list_maxsq3 },
    },
    c3pt_tsep_list,
    c3pt_qpdf_spec_list_l24,
  },
  { smear_opt_bx30,
    { 
      { smear_opt_bx30, {}, { 6, 0, 0 }, qext_list_maxsq3 },
    },
    c3pt_tsep_list,
    c3pt_qpdf_spec_list_l24,
  },
}



-------------------------------------------------------------------------------
-- quark action
-------------------------------------------------------------------------------

-- * fermion params
quark_flav  = 'UD'
quark_bc    = assert(etab.quark_bc)   ; ferm_bc = quark_bc
quark_mass  = assert(etab.quark_mass[quark_flav])
quark_kappa = 1. / (8. + 2. * quark_mass)
quark_csw   = assert(etab.quark_csw)

-- * gauge smearing
if     'stout' == etab.gauge_smear.type then
  gauge_u_ferm = stout_smear_full(gauge_u, etab.gauge_smear.stout_rho, etab.gauge_smear.stout_nstep)   
elseif 'hyp' == etab.gauge_smear.type then
  if 1 == etab.gauge_smear.hyp_nstep then gauge_u_ferm = gauge_u_hyp1
  else gauge_u_ferm = gauge_hyp_smear_std(gauge_u, etab.gauge_smear.hyp_nstep) end
else
  error(string.format("unknown etab.gauge_smear.type='%s'", etab.gauge_smear.type))
end

if (   string_is_prefix('gpu-quda', rcparam.get('backend.dslash_solver'))
    or string_is_prefix('gpu-quda', rcparam.get('backend.laplacian'))
    or string_is_prefix('gpu-quda', rcparam.get('backend.qbarq'))
    ) then
  require 'quda'
  tt = timer('init_quda')
  qcd.quda.init(L)                                          ; tt('done')
  quda_verbosity = "SUMMARIZE"
  _quda.setVerbosityQuda(quda_verbosity)
end

if 'random' == rcparams.backend.dslash_solver then
  printf("********* BOGUS random Dslash solver **********\n")
  function make_solver(ama)
    return function(x)
      if     ('lattice.dirac.fermion' == type(x)) then return S:gaussian_DiracFermion() 
      elseif ('lattice.dirac.propagator' == type(x)) then return S:gaussian_DiracPropagator() end
    end
  end
elseif 'cpu' == rcparams.backend.dslash_solver then
--if false then
  -- * QOP-MG parameters
  require 'mg_param'
  mg_tol_approx = 1e-4
  mg_maxiter  = 200
  mg_param_null = {    
      blocking      = { {3,3,3,2}, {2,2,2,2} },
      verbose       = {        0,         0  }, 
      null_vecs     = {       24,        24  },
      null_vecs_extra={        0,         0  },
      prehits       = {        0,         0  },
      posthits      = {        4,         4  },
      underrelax    = {       1.,        1.  },
      null_maxiter  = {       20,        20  },
      null_res      = {      0.4,       0.4  },
      null_conv     = {      0.8,       0.8  },
                                             
      coarse_res    = {      0.1,       0.1  },
      coarse_maxiter= {       12,        12  },
      coarse_ngcr   = {        8,         8  },
  }

  tt = timer('inig_mg')
  local mg_param = make_mg_params(
      quark_kappa, quark_csw, quark_bc,
      mg_tol_approx, mg_maxiter, latsize,
      mg_param_null, { name = "mg", verbose = 0 })
  print_obj(mg_param, "mg_param")
  local mg = qcd.qop.WilsonMG(gauge_u_ferm, mg_param)      ; tt('done')

  function make_solver(ama)
    local scale = 2 * quark_kappa
    if contract_only then return function()end end
    if ama['approx'] == 'exact' or ama['approx'] == 'sloppy' then
      return make_solver_general(function(x)
        return (scale * mg:solve(x, {residual = {rsqmin = ama['tol']^2}}))
      end)
    else error(string.format("unknown ama='%s'", ama['approx'])) end
  end
elseif 'gpu-quda' == rcparams.backend.dslash_solver then
  -- * QUDA(-MG) parameters
  local t_boundary
  if      1 == quark_bc[1+t_axis] then t_boundary = "PERIODIC"
  elseif -1 == quark_bc[1+t_axis] then t_boundary = "ANTI_PERIODIC"
  else error(string.format("bad ferm_bc_t = '%s'", tostring(quark_bc[1+t_axis]))) end
  local QS = nil

  function make_solver(ama)
    if contract_only then return function()end end
    if nil ~= QS then 
      QS:close()
      QS = nil
    end
    QS = qcd.quda.inverter.simple(
        -- TODO set sloppy prec->HALF, reliable_delta->0.1
        gauge_u_ferm,
        { t_boundary          = t_boundary },
        { clover_coeff        = quark_csw * quark_kappa,
          dslash_type         = "CLOVER_WILSON",
          kappa               = quark_kappa,
          mass_normalization  = "MASS",
          tol                 = ama['tol'],
          maxiter             = 10000,
          verbosity           = quda_verbosity,
          tune                = 'YES',
        })
    print_obj(QS, "make_solver")
    return make_solver_general(function(x) return QS:solve(x) end)
  end

elseif 'gpu-quda-mg' == rcparams.backend.dslash_solver then
  require 'config/quda_mg_clover_2019spring'

  local QS = nil

  function make_solver(ama)
    if contract_only then return function()end end
    if nil ~= QS then 
      QS:close()
      QS = nil
      force_gc()
    end

    local mgp = table_deepmerge(
        econfig.quda_clover_mg(ekey,
          { verbosity = "SILENT",
            flav = quark_flav,
            tol  = ama.tol }),
        -- modify dslash normalization to MASS
        { invert_params = { mass_normalization = "MASS" }, 
          inner_params  = { mass_normalization = "MASS" } })
    print_obj(mgp, 'make_solver:gpu-quda-mg:param')

    QS = qcd.quda.inverter.multigrid(
        gauge_u_ferm, mgp.gauge_params, mgp.invert_params,
        mgp.multrigrid_params, mgp.inner_params)
    
    print_obj(QS, "make_solver")
    return make_solver_general(function(x) return QS:solve(x) end)
  end
 
else error(string.format("bad dslash_solver='%s'", rcparams.backend.dslash_solver)) end

printf("QLUA_CONFIG_SUCCESS\n")
