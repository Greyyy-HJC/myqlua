-- XXX this new-style config does NOT use "relative" momenta: all momenta
-- XXX are defined as absolute
package.path = 'qlib/?.qlua;qlib-lhpc/?.qlua;qlua-production/?.qlua;' .. package.path
require 'strict'
require 'setup_util'
require 'latvec'
require 'stdlib'
require 'util/strkey'
require 'lhpc-std'
require 'qdpc_io'
require 'ape-smear'
require 'stout-smear'
require 'hex-smear'
require 'hadron/qbarq_wline'
require 'smear/field_smear'
require 'wilson_bcderiv'

require 'rcparam'

-- use GPU mg solver
rcparam.set('backend.dslash_solver', 'gpu-quda-mg')   -- Dslash solver @GPU
--rcparam.set('backend.laplacian', 'gpu-quda')          -- smearing @GPU
rcparam.set('backend.laplacian', 'cpu')               -- smearing @CPU
--rcparam.set('backend.la', 'gpu-cublas')             -- deflation @GPU with cublas(Xt)        
--rcparam.set('backend.gpu_blockdim', 512)        

rcparam.set('backend.qbarq', 'gpu-quda')    -- contractions @GPU

sample_tabopt = {
  backend_smear         = 'gpu-quda',
  backend_smear_bcderiv = 'cpu',
}

print_obj(rcparams, 'rcparams')

contract_only = false -- stub
if contract_only then printf("*** CONTRACT_ONLY ***\n") end

jobcfg      = _G
job_config  = jobcfg


------------------------------------------------------------------------------
-- preptest params
------------------------------------------------------------------------------
preptest = {
  bmark_la            = true,
  test_read_gauge     = true,
  test_save_hadspec   = true,
  test_save_bb        = true,
  test_save_bb_gen    = true,
  test_ape            = true,
  test_wup            = true,
  test_prop           = true,
  test_evec           = true,
  test_g5herm         = true,
}


------------------------------------------------------------------------------
-- prop caching params
------------------------------------------------------------------------------
do_save_prop = {
  F   = false,
  Fg  = false,
  B   = false,
  Bg  = false,
}


-------------------------------------------------------------------------------
-- general
-------------------------------------------------------------------------------
assert(job_key)
assert(task_key)  -- for keeping track of samples in task 
assert(subjob_key)
if "" == subjob_key then sample_list = false
else sample_list = parse_int_range(subjob_key) end

cfg_key = job_key

latsize   = {32,32,32,64}
t_axis    = #latsize - 1
rnd_seed  = 1984


-------------------------------------------------------------------------------
-- coord sampling & AMA
-------------------------------------------------------------------------------
-- * coordinates
cfg_list = {}
for s in io.lines('list.cfg.all1346') do
  cfg_list[1+#cfg_list] = s
end
cfg_index = table_index(cfg_list, cfg_key)
printf("cfg_key='%s' index=%d\n", cfg_key, cfg_index)

-- XXX DO INDEPENDENT BACKWARD PROPAGATORS, not coherent!!! 
-- XXX bundled in source groups for contraction efficiency
tmd_bkw_indep = true

do 
  local cind = cfg_index
  local csrcgrid  = {4,2,2,4}
  local ncoh = 2    -- number of sources in 1 cohgrp
  local x0 = {0,0,0,0}
  local dx = {7,11,13,23}
  local dx_it = {0,0,0,0}

  local nsrc_t  = csrcgrid[1+t_axis]
  local cohgrp_dt = math.floor(latsize[4] / nsrc_t) -- between [1] of groups
  local cg1 = list_copy(csrcgrid)
  cg1[1+t_axis] = ncoh
  assert (0 == (nsrc_t % ncoh))
  local ncohgrp = math.floor(nsrc_t / ncoh)
  local x0_i = list_copy(x0)
  local sloppy_csrcgrp_list = {}
  for icohgrp = 0, ncohgrp - 1 do
    x0_i[1+t_axis] = (x0[1+t_axis] + icohgrp * cohgrp_dt) % latsize[1+t_axis]
    list_extend(
        sloppy_csrcgrp_list,
        make_srcgrp_grid(cg1, latsize, x0_i, dx, cind, dx_it))
  end

  hslab_len_t = math.floor(latsize[1+t_axis] / ncoh)
  
  -- * approx modes
  ama_list = {
    { ['approx']    = 'sloppy',
      ['csrcgrp_list'] = sloppy_csrcgrp_list,
      ['tol']       = 1e-4 },           -- relax somewhat
    { ['approx']    = 'exact',
      ['csrcgrp_list'] = { sloppy_csrcgrp_list[1] }, 
      ['tol']       = 1e-10 },          -- tighten somewhat
  }
end

-------------------------------------------------------------------------------
-- data file param and locations
-------------------------------------------------------------------------------
ens_top   = '..'
data_top  = 'data.tmd.prod' 
data_pdir  = 'data_pdir.tmd' 
prop_volfmt     = 'single'
gauge_fmt = 'lime'


-- gauge config
function get_gauge_file(key)
  return string.format("%s/gauge/cl21_32_64_b6p3_m0p2390_m0p2050_cfg_%s.lime", 
        ens_top, key)
end

-- c2pt
require 'tmd/configs/config_filenames'

function get_prop_log_file(cfg_key, prop_kind)
  return string.format("%s/prop_log/%s.%s", 
          data_pdir, cfg_key, prop_kind)
end
function sample_log_file(cfg_key)
  return string.format("%s/sample_log/%s.%s", data_top, job_key, task_key)
end


-------------------------------------------------------------------------------
-- setup lattice etc
-------------------------------------------------------------------------------
job_timer = timer("total")
L = qcd.lattice(latsize, {network=network_geom})
S = rnd_init(L, rnd_seed) ; rnd = S
print_network_settings()
print_subgrid_settings(L)
if rawget(_G, 'openmp') then
  printf("OpenMP:num_threads=%d\n", openmp.num_threads())
  printf("OpenMP:thread_limits=%d\n", openmp.thread_limit())
end

gauge_file = get_gauge_file(cfg_key)    
printf("read gauge '%s' [%s]\n", gauge_file, gauge_fmt)
tt = timer('read_gauge')
if     'nersc' == gauge_fmt then 
  gauge_u = qcd.nersc.read_gauge(L, gauge_file)
elseif 'milc'  == gauge_fmt then
  gauge_u = qcd.milc.read_gauge(L, gauge_file)
elseif 'lime' == gauge_fmt then
  gauge_u = load_qdpc_gauge(L, gauge_file)
elseif 'random' == gauge_fmt then
  printf("********* BOGUS random gauge field **********\n")
  gauge_u = latvec.fromfunction({4}, function()return toSUn(S:gaussian_ColorMatrix()) end)
else error(string.format("unknown gauge_fmt='%s'", gauge_fmt)) end
tt('done')

-------------------------------------------------------------------------------
-- source parameters
-------------------------------------------------------------------------------
ape_alpha   = 2.5
ape_N       = 25
ape_accu    = 1e-12
ape_maxiter = 150

tt = timer('smear_gauge_ape')
gauge_u_ape = APE_smear(gauge_u, ape_alpha, ape_N, ape_accu, ape_maxiter, t_axis)   ; tt('done')
smear_shape1 = {type='wuppertal', t_axis=t_axis,
    wup_U=gauge_u_ape, wup_N=50, wup_alpha=2.0 }
smear_opt_bz0  = table_join(smear_shape1, {tag='GN2x50' }) -- no boost
smear_opt_bz05 = table_join(smear_shape1,
        {tag='GN2x50bzp05', boost={0, 0, 0.5, 0} })
smear_opt_bz10 = table_join(smear_shape1,
        {tag='GN2x50bzp10', boost={0, 0, 1.0, 0} })
smear_opt_bz15 = table_join(smear_shape1,
        {tag='GN2x50bzp15', boost={0, 0, 1.5, 0} })
smear_opt_bz20 = table_join(smear_shape1,
        {tag='GN2x50bzp20', boost={0, 0, 2.0, 0} })

pm1     = {-1, 0, 1}        -- [-1;1] 


-------------------------------------------------------------------------------
-- correlator parameters
-------------------------------------------------------------------------------
pm1     = {-1, 0, 1}        -- [-1;1]
pm2     = {-2,-1, 0, 1, 2}  -- [-2;2]
pm6     = range(-6, 1+6)    -- [-6;6]
pm10    = range(-10,1+10)   -- [-10;10]
c2pt_symm_psnk_list = range_prod({range(-4,8), pm2, pm2}) -- 12*5*5

-- source-sink spec list for correlators
tmd_len_t = nil -- select depending on tsep and network


-- size of time slab to cut out for saving

tmd_S1   = gamma{mu=0} * gamma{mu=2}
tmd_S2   = tmd_S1
tpol_posSzplus  = (1. + gamma{mu=3})/2 *(1. - gamma{mu=0}*gamma{mu=1}*complex(0,1))
tmd_Tpol_c3pt_list = { posSzplus   = tpol_posSzplus, }

flav_list = { 'U', 'D' }
do
-- now diversified according to whether propagators contain derivatives or not (engel 2020/01/13)
  local tmd_lpspec_list_bfirst_for_noderiv = tmd_lpspec_expand({
    { rev=true, 'y'       , vl={ rev=true, string.rep('x',20), string.rep('z',20), --[[string.rep('v',14), string.rep('w',14)]] } },
    { rev=true, 'yy'      , vl={ rev=true, string.rep('x',15), string.rep('z',15), --[[string.rep('v',11), string.rep('w',11)]] } },
    { rev=true, 'yyy'     , vl={ rev=true, string.rep('x',14), string.rep('z',14), --[[string.rep('v',10), string.rep('w',10)]] } },
    { rev=true, 'yyyy'    , vl={ rev=true, string.rep('x',13), string.rep('z',13), --[[string.rep('v', 9), string.rep('w', 9)]] } },
    { rev=true, 'yyyyy'   , vl={ rev=true, string.rep('x',12), string.rep('z',12), --[[string.rep('v', 9), string.rep('w', 9)]] } },
    { rev=true, 'yyyyyy'  , vl={ rev=true, string.rep('x',10), string.rep('z',10), --[[string.rep('v', 8), string.rep('w', 8)]] } },
    { rev=true, 'yyyyyyy' , vl={ rev=true, string.rep('x', 9), string.rep('z', 9), --[[string.rep('v', 7), string.rep('w', 7)]] } },
    { rev=true, 'yyyyyyyy' , vl={ rev=true, string.rep('x', 8), string.rep('z', 8), --[[string.rep('v', 6), string.rep('w', 6)]] } },
    { rev=true, 'yyyyyyyyy' , vl={ rev=true, string.rep('x', 7), string.rep('z', 7), --[[string.rep('v', 5), string.rep('w', 5)]] } },
    { rev=true, 'zzzzzzzzzzzzzzzz' , vl={ } },
    { rev=true, 'yyyyyyyyyyyyyyyy' , vl={ } },
    --[[{ rev=true, 'ssssssssssss' , vl={ } },]]
    --[[{ rev=true, 'uuuuuuuuuuuu' , vl={ } }]]
  })

  local tmd_lpspec_list_bfirst_for_deriv = tmd_lpspec_expand({
    { rev=true, 'y'       , vl={ rev=true, string.rep('z',20) } },
    { rev=true, 'yy'      , vl={ rev=true, string.rep('z',15) } },
    { rev=true, 'yyy'     , vl={ rev=true, string.rep('z',14) } },
    { rev=true, 'yyyy'    , vl={ rev=true, string.rep('z',13) } },
    { rev=true, 'yyyyy'   , vl={ rev=true, string.rep('z',12) } },
    { rev=true, 'yyyyyy'  , vl={ rev=true, string.rep('z',10) } },
    { rev=true, 'yyyyyyy' , vl={ rev=true, string.rep('z', 9) } },
    { rev=true, 'yyyyyyyy' , vl={ rev=true, string.rep('z', 8) } },
    { rev=true, 'yyyyyyyyy' , vl={ rev=true, string.rep('z', 7) } },
    { rev=true, 'zzzzzzzzzzzzzzzz' , vl={ } },
    { rev=true, 'yyyyyyyyyyyyyyyy' , vl={ } },
    --[[{ rev=true, 'ssssssssssss' , vl={ } },]]
    --[[{ rev=true, 'uuuuuuuuuuuu' , vl={ } }]]
  })

  local c3pt_tsep_list = { 8, 10, 12 }
  local c2pt_skew_psnk_list = c2pt_symm_psnk_list
  local c3pt_qext_list = {{0,0,0}}
  local tmd_table_bcderiv_lpspec = {
    [{'' , '' }]  = tmd_lpspec_list_bfirst_for_noderiv, 
    [{'x', '' }]  = tmd_lpspec_list_bfirst_for_deriv,
    [{'' , 'x'}]  = tmd_lpspec_list_bfirst_for_deriv,
  }
  c3pt_src_sink_pair_list_v2 = {
    -- TODO need zero momentum?
    { smear_opt_bz0,
      { { smear_opt_bz0, c2pt_skew_psnk_list, { 0, 0, 0 }, c3pt_qext_list } },
      c3pt_tsep_list,
      tmd_table_bcderiv_lpspec },
  --  { smear_opt_bz05,
  --    { { smear_opt_bz05, c2pt_skew_psnk_list, { 0, 0, 1 }, c3pt_qext_list } },
  --    c3pt_tsep_list,
  --    tmd_table_bcderiv_lpspec  },
  --  { smear_opt_bz10,
  --    { { smear_opt_bz10, c2pt_skew_psnk_list, { 0, 0, 2 }, c3pt_qext_list } },
  --    c3pt_tsep_list,
  --    tmd_table_bcderiv_lpspec },
  --  { smear_opt_bz15,
  --    { { smear_opt_bz15, c2pt_skew_psnk_list, { 0, 0, 3 }, c3pt_qext_list } },
  --    c3pt_tsep_list,
  --    tmd_table_bcderiv_lpspec  },
  --  { smear_opt_bz20,
  --    { { smear_opt_bz20, c2pt_skew_psnk_list, { 0, 0, 4 }, c3pt_qext_list } },
  --    c3pt_tsep_list,
  --    tmd_table_bcderiv_lpspec  },
  }
end




-------------------------------------------------------------------------------
-- quark action
-------------------------------------------------------------------------------
require 'config/econfig'
ekey  = 'JLab_isoClover_D5'
etab  = econfig.ensemble_param[ekey]

-- * fermion params
quark_flav  = 'UD'
quark_bc    = assert(etab.quark_bc)   ; ferm_bc = quark_bc
quark_mass  = assert(etab.quark_mass[quark_flav])
quark_kappa = 1. / (8. + 2. * quark_mass)
quark_csw   = assert(etab.quark_csw)

-- * gauge smearing
tt = timer('smear_gauge_stout')
assert('stout' == etab.gauge_smear.type)
stout_rho   = assert(etab.gauge_smear.stout_rho)
stout_n     = assert(etab.gauge_smear.stout_nstep)
gauge_u_stout = stout_smear_full(gauge_u, stout_rho, stout_n)   ; tt('done')
gauge_u_lpath = gauge_hyp_smear_std(gauge_u, 1)

if (   string_is_prefix('gpu-quda', rcparam.get('backend.dslash_solver'))
    or string_is_prefix('gpu-quda', rcparam.get('backend.laplacian'))
    or string_is_prefix('gpu-quda', rcparam.get('backend.qbarq'))
    ) then
  require 'quda'
  tt = timer('init_quda')
  qcd.quda.init(L)                                          ; tt('done')
  quda_verbosity = "SUMMARIZE"
  _quda.setVerbosityQuda(quda_verbosity)
end

if 'random' == rcparams.backend.dslash_solver then
  printf("********* BOGUS random Dslash solver **********\n")
  function make_solver(ama)
    return function(x)
      if     ('lattice.dirac.fermion' == type(x)) then return S:gaussian_DiracFermion() 
      elseif ('lattice.dirac.propagator' == type(x)) then return S:gaussian_DiracPropagator() end
    end
  end
elseif 'cpu' == rcparams.backend.dslash_solver then
--if false then
  -- * QOP-MG parameters
  require 'mg_param'
  mg_tol_approx = 1e-4
  mg_maxiter  = 200
  mg_param_null = {    
      blocking      = { {3,3,3,2}, {2,2,2,2} },
      verbose       = {        0,         0  }, 
      null_vecs     = {       24,        24  },
      null_vecs_extra={        0,         0  },
      prehits       = {        0,         0  },
      posthits      = {        4,         4  },
      underrelax    = {       1.,        1.  },
      null_maxiter  = {       20,        20  },
      null_res      = {      0.4,       0.4  },
      null_conv     = {      0.8,       0.8  },
                                             
      coarse_res    = {      0.1,       0.1  },
      coarse_maxiter= {       12,        12  },
      coarse_ngcr   = {        8,         8  },
  }

  tt = timer('inig_mg')
  local mg_param = make_mg_params(
      quark_kappa, quark_csw, quark_bc,
      mg_tol_approx, mg_maxiter, latsize,
      mg_param_null, { name = "mg", verbose = 0 })
  print_obj(mg_param, "mg_param")
  local mg = qcd.qop.WilsonMG(gauge_u_stout, mg_param)      ; tt('done')

  function make_solver(ama)
    local scale = 2 * quark_kappa
    if contract_only then return function()end end
    if ama['approx'] == 'exact' or ama['approx'] == 'sloppy' then
      return make_solver_general(function(x)
        return (scale * mg:solve(x, {residual = {rsqmin = ama['tol']^2}}))
      end)
    else error(string.format("unknown ama='%s'", ama['approx'])) end
  end
elseif 'gpu-quda' == rcparams.backend.dslash_solver then
  -- * QUDA(-MG) parameters
  local t_boundary
  if      1 == quark_bc[1+t_axis] then t_boundary = "PERIODIC"
  elseif -1 == quark_bc[1+t_axis] then t_boundary = "ANTI_PERIODIC"
  else error(string.format("bad ferm_bc_t = '%s'", tostring(quark_bc[1+t_axis]))) end
  local QS = nil

  function make_solver(ama)
    if contract_only then return function()end end
    if nil ~= QS then 
      QS:close()
      QS = nil
    end
    QS = qcd.quda.inverter.simple(
        -- TODO set sloppy prec->HALF, reliable_delta->0.1
        gauge_u_stout,
        { t_boundary          = t_boundary },
        { clover_coeff        = quark_csw * quark_kappa,
          dslash_type         = "CLOVER_WILSON",
          kappa               = quark_kappa,
          mass_normalization  = "MASS",
          tol                 = ama['tol'],
          maxiter             = 10000,
          verbosity           = quda_verbosity,
          tune                = 'YES',
        })
    print_obj(QS, "make_solver")
    return make_solver_general(function(x) return QS:solve(x) end)
  end

elseif 'gpu-quda-mg' == rcparams.backend.dslash_solver then
  require 'config/quda_mg_clover_2019spring'

  local QS = nil

  function make_solver(ama)
    if contract_only then return function()end end
    if nil ~= QS then 
      QS:close()
      QS = nil
      force_gc()
    end

    local mgp = table_deepmerge(
        econfig.quda_clover_mg(ekey,
          { verbosity = "SILENT",
            flav = quark_flav,
            tol  = ama.tol }),
        -- modify dslash normalization to MASS
        { invert_params = { mass_normalization = "MASS" }, 
          inner_params  = { mass_normalization = "MASS" } })
    print_obj(mgp, 'make_solver:gpu-quda-mg:param')

    QS = qcd.quda.inverter.multigrid(
        gauge_u_stout, mgp.gauge_params, mgp.invert_params,
        mgp.multrigrid_params, mgp.inner_params)
    
    print_obj(QS, "make_solver")
    return make_solver_general(function(x) return QS:solve(x) end)
  end
 
else error(string.format("bad dslash_solver='%s'", rcparams.backend.dslash_solver)) end

function make_solver_bcderiv(ama)
  return bcderiv.wrapsolver_wilson(make_solver(ama), gauge_u_stout, quark_bc) 
end
