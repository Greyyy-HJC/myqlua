package.path = package.path .. ';qlib/?.qlua;qlib-lhpc/?.qlua'
require "strict"
require "gaugefix"
require "stdlib"
require "lhpc-std"
require "qdpc_io"


function report_gauge(u)
  local L   = u[1].lattice
  local Nc  = u[1]:colors()
  local Nd  = #L
  local vol = L:volume()
  printf("# [mu]  Sum(|U.U+|)/Nc/V  Sum(Re Tr(U))/Nc/V")
  for mu = 0, Nd - 1 do
    printf("# [%d]\t%f\t%f\n",
           mu,
           u[1+mu]:norm2() /(Nc * vol),
           u[1+mu]:trace():real():sum() /(Nc * vol))
  end
  printf("# [mu, nu]  1.-Sum(Re Tr(U_P))/Nc/V")
  for mu = 0, Nd - 2 do
    for nu = 1+mu, Nd - 1 do
      printf("# [%d,%d]\t%f\n",
             mu, nu,
             1. - plaquette(u, mu, nu):trace():real():sum() /(Nc * vol))
    end
  end
end

tot_timer = timer("total")
cfg_key = job_key

print_network_settings()
L = qcd.lattice(latsize, {network=network_geom})
print_subgrid_settings(L)


--u   = qcd.qdpc.Reader(L, "gauge_disord_4c8.qdpcc"):ColorMatrix()

cur_timer = timer("read gauge")
u   = qcd.nersc.read_gauge(L, get_gauge_file(cfg_key))
cur_timer("done")

report_gauge(u)

cur_timer = timer("gaugefix landau")
if nil == tol_switch_fletcher then tol_switch_fletcher = 1e-6 end
g, iter, tol = gaugefix_facg(
        u, gaugefix_landau_func, gaugefix_landau_grad, 
        gfix_landau_accu, gfix_landau_maxiter, true, tol_switch_fletcher)
ufix  = gauge_transform_U(g, u)

cur_timer("done")

printf("### or=%f   gf_accu=%f\n", gfix_landau_or, gfix_landau_accu)
report_gauge(u)


cur_timer = timer("save colmat landaufix")
save_qdpc_colmat(L, g, get_colmat_landaufix_file(cfg_key), 
      "colmat_landaufix", "colmat_landaufix", "single")
cur_timer("done")

cur_timer = timer("save gauge landaufix")
save_qdpc_colmat(L, ufix, get_gauge_landaufix_file(cfg_key), 
      "gauge_landaufix", "gauge_landaufix", "single")
cur_timer("done")

tot_timer("done")
