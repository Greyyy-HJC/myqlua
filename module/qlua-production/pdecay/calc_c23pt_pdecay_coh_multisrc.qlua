-- full pdecay calculation:
--  * propagators :
--    prop_F prop_B prop_B
--  ** c2pt : prop_F^3 
--  ** bb : prop_F*prop_F*prop_B


package.path = 'qlua-production/?.qlua;qlib-lhpc/?.qlua;qlib/?.qlua;' .. package.path
require "strict"    -- catch all undefined (nil) variables
require "stdlib"    -- standard printf, etc
require "lhpc-std"  -- make_source, etc
require "ape-smear" -- gauge smear
require "gauge"
require "qdpc_io"
require "setup_util"
require "latvec"

require "hadspec"
require "hex-smear"
require "madwf_sns"

require "hadron/baryon_corr"
require "pdecay/pdecay_ops"
require "util/geom"

require 'dwf'
require 'dwf_split'

------------------------------------------------------------------------------
-- INITIALIZATION
------------------------------------------------------------------------------
tot_timer = timer("total")
--L = qcd.lattice(latsize, {network=network_geom})
--S = rnd_init(L, rnd_seed)



function save_midpoint_list(
    L,
    aff_w, 
    aff_kpath_prefix,
    d, u,
    csrc, psnk_list, t_axis,
    bc_quark_t,
    meson_list
    )
  -- insert '/' between kpath prefix and the rest of kpath
  if (0 < aff_kpath_prefix:len()) then aff_kpath_prefix = aff_kpath_prefix .. '/midpoint/' end
  -- create a list of 4d momenta appropriate for momentum projection
  -- XXX note that <N(t,p)\bar{N}(0)> = \sum_x exp(-ipx) <N(t,x)\bar{N}(0)>
  local psnk_pw = {}
  for i,p in ipairs(psnk_list) do 
    local psnk_list_neg = {}
    for j,pj in ipairs(p) do
      psnk_list_neg[j] = -pj
    end
    psnk_list_neg[1+t_axis] = 0
    psnk_pw[i] = L:planewave(csrc, psnk_list_neg)
  end
  
  local tsrc = csrc[1+t_axis]
  local tsize = L[t_axis]
  -- create MultiSet for projections
  -- TODO replace with shifted and sign-aware multiset?
  local mset_tcoord = L:MultiSet(tsize, L:pcoord(t_axis))
  
  -- calc meson 2pts
  local bc_mes_t = bc_quark_t * bc_quark_t
  for i, mes in pairs(meson_list) do
    local c2pt = meson_2pt(d, u, gamma{n=meson_tab[mes]})
    for i,psnk in ipairs(psnk_list) do
      aff_w:write(aff_kpath_prefix .. hadspec_kpath(mes, csrc, psnk),
                  make_hadspec_standard(c2pt:project(psnk_pw[i], mset_tcoord),
                                        tsrc, tsize, bc_mes_t)) 
    end
  end
end

function have_c3pt(cfg_key, c3pt_file)
  local c3pt_log = get_c3pt_log_file(cfg_key)
  local bn = basename(c3pt_file)
  if not io.fexists(c3pt_log) then return false end
  for s in io.lines(c3pt_log) do
    if s == bn then return true end
  end
  return false
end

function done_c3pt(cfg_key, c3pt_file)
  local c3pt_log = get_c3pt_log_file(cfg_key)
  local bn = basename(c3pt_file)
  os.mkdir_path(dirname(c3pt_log))
  local f = io.open(c3pt_log, "a")
  f:write(string.format("%s\n", bn))
  f:flush()
  f:close()
end


require 'pdecay/sample_c23pt_pdecay_coh_multisrc'

------------------------------------------------------------------------------
-- MAIN
------------------------------------------------------------------------------

-- in config file that is executed before this:
-- * lattice initialized
-- * gauge read to gauge_u 
-- * mdwf and deflator initialized


-- * smear gauge field for source construction
wup_gauge_u = APE_smear(gauge_u, ape_alpha, ape_N, ape_accu, ape_maxiter, t_axis)

-- * init mdwf for S(strange quark)


-- PROD
if true then
--if false then  

  -- * main loop over ama modes
  for i_ama, ama in pairs(ama_list) do
    local function smear_func_wup(x, opt) -- TODO support opt {pos=tsnk_list} if too expensive
      -- reqiures global wup_a, wup_n, wup_gauge_u, t_axis
      return wuppertal_smear(wup_gauge_u, wup_alpha, wup_N, x, t_axis)
    end
    local solver_func_UD = nil
    local solver_func_S = nil
    
    -- init solvers
    splitsolver_func_UD = make_split_solver(ama, 'UD')
    splitsolver_func_S  = make_split_solver(ama, 'S')

    -- loop over sample csrc
    for i_csrcgrp_list, csrcgrp_list in pairs(ama['csrcgrp_list2']) do 
         pdecay.sample_c23pt_pdecay_coh_multisrc(L, cfg_key, 
              csrcgrp_list, hslab_len_t, ama,
              c2pt_psnk_list, c3pt_tsep_list,
              pdecay.proton_Ssrc, pdecay.pdecay_contract_list, 
              smear_func_wup, splitsolver_func_UD, splitsolver_func_S,
              t_axis, ferm_bc)
    end -- i_csrcgrp_list

    -- cleanup to help gc
    solver_func_UD  = nil
    solver_func_S   = nil
    force_gc()
    print_obj(qcd.memory_usage())
  end -- ama
end

_grid.close()



tot_timer("done")
printf("QLUA_RUN_SUCCESS\n")
-- vim : syn=lua
