require 'stdlib'
require 'util/strkey'

function debug_mem_print(cfg_key, msg)
  msg = msg or ""
--  if 0 == os.node() then qcd.log_rusage(string.format("%s.rusage", cfg_key), msg) end
--  print_obj(qcd.memory_usage(), msg)
end

function sample_c23pt_bb_proton_cohbkw(
        L, cfg_key, csrcgrp, ama,                     -- [1-4]
        hslab_tlen, c3pt_tlen,                        -- [5-6]
        src_smear_opt_q,                              -- [7]
        c2pt_symm_psnk_list,                          -- [8]
        c3pt_snk_spec_list, tsep_list, c3pt_bb_spec,  -- [9-11]
        proton_snk_S, proton_src_S, c3pt_Tpol_list,   -- [12-14]
        c3pt_flav_list, gf_lpath_,                    -- [15-16]
        solver_func,                                  -- [17]
        t_axis, ferm_bc, redo_contract, gg)           -- [18-21]
  assert(0 < #csrcgrp)
  for i_tsep, tsep in ipairs(tsep_list) do 
    assert(tsep < hslab_tlen)  -- XXX need c2pt value for ratios
--    assert(tsep <= c3pt_tlen) 
  end

  local timer_1srcgrp = timer(string.format('1srcgrp[%d] proton_bb_cohbkw', #csrcgrp))
  local csrcgrp_key = strkey.csrcgrp_str(csrcgrp)
  redo_contract = redo_contract or {}  
  local tt    -- timer
  local bc_quark_t  = ferm_bc[1+t_axis]
  local bc_meson_t  = 1 -- FIXME bc_t * conj(bc_t)
  local bc_baryon_t = bc_quark_t * bc_quark_t * bc_quark_t
  local lt          = L[t_axis]     -- time extent

  local csrc_coh0 = csrcgrp[1]

  -- build hyperslab subsets for constructing frwprop_grp, c2pt, 
  -- XXX all c2pt are psnk-projected at once, with reference point csrc_coh0
  -- one has to correct the phases of c2pt with csrc!= csrc_coh0 as
  --    c2pt_correct(t,psnk) = c2pt_saved(t,psnk) * exp((2*pi*i/L)*psnk*(csrc-csrc0))
  -- (correction is done in post-process scripts)
  local csrc_hslab = hyperslab_subset_grp(L, csrcgrp, hslab_tlen, t_axis,
          {verbose=true})

  -- scatter map for TMD prop & gf "chopping"
  -- XXX all c3pt are qext-projected at once, with reference point csrc_coh0
  -- one has to correct the phases of c3pt with csrc!= csrc_coh0 as
  --    c3pt_correct(t,psnk,qext) = c3pt_saved(t,psnk,qext) * exp(-(2*pi*i/L)*(psnk-qext)*(csrc-csrc0))
  -- (correction is done in post-process scripts)
  local c3pt_chop_map, c3pt_L = function(x)return x end, L
  local csrc_chop0 = table_copy(csrc_coh0)
  if true then 
--  if false then -- XXX not sure if QUDA will work with a two different lattice sizes
    c3pt_chop_map, c3pt_L = hyperslab_subvol_scatter_grp(L, csrcgrp,
          c3pt_tlen, t_axis,
          { copy_network=true,  -- use the same network_geom as L
            shift_space=false   -- DO NOT shift all sources to (0,0,0)
          })
    csrc_chop0[1+t_axis] = 0
  end
  local lt_chop = c3pt_L[t_axis]
  printf("c3pt_chop_lat='%s'\n", tostring(c3pt_L))
--  assert(lt_chop == c3pt_tlen * #csrcgrp)   -- fake fail if not using chopping
  
  -- chopped gauge field for contractions
  tt = timer('gauge_chop')
  if gg then gf_lpath_ = gauge_transform_U(gg, gf_lpath_) end                 --**
  local gf_lpath_chop = latvec.apply(c3pt_chop_map, gf_lpath_)     ; tt('done')

  -- smearing with pos and neg boost at source
  local ksrc_tag = src_smear_opt_q.tag
  local bsm_tag_symm  = string.format('%s_%s', ksrc_tag, ksrc_tag)
  local smfunc_ksrc_q = make_smear_func(L, src_smear_opt_q)
  debug_mem_print(cfg_key, "mem_sample.0") --**

  -- XXX Fa-,Fq-props are computed separately (due to opposite boost)
  local prop_Fq_list = {}
  local propgrp_Fq   = L:DiracPropagator()
  for i_csrc, csrc in ipairs(csrcgrp) do
    -- quark src, frwprop
    tt = timer('prop_Fq')
    local src_F_q = smfunc_ksrc_q(make_source_point(L, csrc), {t_slice=csrc[1+t_axis]})     ; tt('src')
    local prop_Fq = solver_func(src_F_q)                          ; tt('done')
--    prop_Fq_list[i_csrc]  = prop_Fq
    csrc_hslab[i_csrc]:where(function()propgrp_Fq:set(prop_Fq)end)
  end -- csrc
  force_gc("1")
  debug_mem_print(cfg_key, "mem_sample.1") --**

  -- smeared prop with ksrc==ksnk
  tt = timer('prop_Fq_smear')
  local propgrp_Fq_sm_symm  = smfunc_ksrc_q(propgrp_Fq)           ; tt('done')
--  latvec.print_cmp(propgrp_Fq_sm_symm, propgrp_Fq, 'Fq<>bsm')
  debug_mem_print(cfg_key, "mem_sample.2") --**

  if (redo_contract.c2pt) then
    -- symmetric smearing c2pt
    -- TODO save c2pt separately for coh.sources (and smear too) to have full extend of t
    --      OR put csrcgrp_str label on datafile
    local c2pt_file = get_c2pt_file_tag(cfg_key, csrcgrp, bsm_tag_symm, ama)
    printf("[save_c2pt] %s\n", c2pt_file)
    os.mkdir_path(dirname(c2pt_file))
    local aff_c2pt = qcd.aff.Writer(c2pt_file)
    local tt 
    local mpopt = { csrc=csrc_coh0, mom_list=c2pt_symm_psnk_list,  t_axis=t_axis, ft_sign=-1 }
    if (redo_contract.c2pt) then    
      tt = timer('c2pt_nucleon_symm')
      qcd.contract_('baryon_sigma_UUS', 
          { propgrp_Fq, propgrp_Fq, propgrp_Fq, proton_snk_S, proton_src_S }, 
          { result = false,
            backend = contract_backend(),
            save = { file=aff_c2pt, kpath='/c2pt/SP', fkey='proton_Tg', mkey='P' },
            momproj = table_join(mpopt, {bc_t=bc_baryon_t}) })    ; tt('done')
      tt = timer('c2pt_nucleon_symm')
      qcd.contract_('baryon_sigma_UUS', 
          { propgrp_Fq_sm_symm, propgrp_Fq_sm_symm, propgrp_Fq_sm_symm, proton_snk_S, proton_src_S }, 
          { result = false,
            backend = contract_backend(),
            save = { file=aff_c2pt, kpath='/c2pt/SS', fkey='proton_Tg', mkey='P' },
            momproj = table_join(mpopt, {bc_t=bc_baryon_t}) })     ; tt('done')
    end
    aff_c2pt:close()
  end
  debug_mem_print(cfg_key, "mem_sample.3") --**

  -- for qbarq contractions
  tt=timer('propgrp_Fq_chop')
  local propgrp_Fq_chop = c3pt_chop_map(propgrp_Fq)               ; tt('done')
  if gg then propgrp_Fq_chop = c3pt_chop_map(gg * propgrp_Fq * L:ColorMatrix(gg[csrc_coh0]):adjoin()) end    --**
  
  for i_psnk, snk_spec in pairs(c3pt_snk_spec_list) do
    local snk_smear_opt_q, c2pt_skew_psnk_list, c3pt_psnk, c3pt_qext_list = unpack(snk_spec)
    -- smearing with pos and neg boost at sink
    local ksnk_tag = snk_smear_opt_q.tag
    local bsm_tag_skew = string.format('%s_%s', ksrc_tag, ksnk_tag)
    local smfunc_ksnk_q = make_smear_func(L, snk_smear_opt_q)

    -- smeared prop for ksnk!=ksrc (recalc only if necessary)
    local propgrp_Fq_sm_skew
    -- XXX table_equal may be "false negative" and enforce smear and c2pt for skew bsm
    if table_equal(src_smear_opt_q, snk_smear_opt_q) then  
      propgrp_Fq_sm_skew = propgrp_Fq_sm_symm
    else 
      tt = timer('prop_Fq_smear')
      propgrp_Fq_sm_skew = smfunc_ksnk_q(propgrp_Fq)              ; tt('done')

      if (redo_contract.c2pt and 0 < #c2pt_skew_psnk_list) then
        -- skew-symmetric smearing c2pt
        local c2pt_file = get_c2pt_file_tag(cfg_key, csrcgrp, bsm_tag_skew, ama)
        printf("[save_c2pt] %s\n", c2pt_file)
        os.mkdir_path(dirname(c2pt_file))
        local aff_c2pt = qcd.aff.Writer(c2pt_file)
        local mpopt = { csrc=csrc_coh0, mom_list=c2pt_skew_psnk_list,  t_axis=t_axis, ft_sign=-1 }
        local tt 
        if (redo_contract.c2pt) then
          tt = timer('c2pt_nucleon_skew')
          qcd.contract_('baryon_sigma_UUS', 
              { propgrp_Fq_sm_skew, propgrp_Fq_sm_skew, propgrp_Fq_sm_skew, proton_snk_S, proton_src_S }, 
              { result = false,
                backend = contract_backend(),
                save = { file=aff_c2pt, kpath='/c2pt/SS', fkey='proton_Tg', mkey='P' },
                momproj = table_join(mpopt, {bc_t=bc_baryon_t}) })    ; tt('done')
            
        end
        aff_c2pt:close()
      end -- redo_contract.c2pt(|proton)
    end -- ksrc !=ksnk 
    force_gc("4")
    debug_mem_print(cfg_key, "mem_sample.4") --**

    -- TODO restrict smearing to relevant timeslices (all tsep for all csrc)
    local psnk_mom_ph = L:Complex(0.)       -- == exp(ipx)
    for i_csrc, csrc in ipairs(csrcgrp) do 
      csrc_hslab[i_csrc]:where(function()
          psnk_mom_ph:set(L:planewave(csrc, space2full(c3pt_psnk, t_axis)))end)
    end
    
    for tpol_tag, Tpol in pairs(c3pt_Tpol_list) do 
      for i_flav, flav in ipairs(c3pt_flav_list) do
        tt = timer('srcgrp_Bq')
        -- TODO replace with GPU qcd.contract_('bkwsrc_baryon_sigma_UUS', {propgrp_Fq_sm_skew, propgrp_Fq_sm_skew, proton_snk_S, proton_src_S, Tpol, flav})
        local srcgrp_Bq_g5adj_allt = psnk_mom_ph * (        -- sic! this is conjugated bkwprop
            gamma{n=15} * baryon_sigma_seqsource_func[flav](
                  propgrp_Fq_sm_skew, propgrp_Fq_sm_skew, 
                  proton_snk_S, proton_src_S, Tpol):adjoin())      ; tt('done')
        debug_mem_print(cfg_key, "mem_sample.5") --**
        for i_tsep, tsep in pairs(tsep_list) do
          assert(tsep < hslab_tlen)
          tt = timer('srcgrp_Bq_set')
          local srcgrp_Bq_g5adj  = L:DiracPropagator()
          local t_seqsrc = {}
          for i_csrc, csrc in ipairs(csrcgrp) do
            local tsrc = csrc[1+t_axis]
            local tsnk = (tsrc + tsep) % lt
            L:Subset({axis=t_axis, position=tsnk}):where(function() 
                srcgrp_Bq_g5adj:set(srcgrp_Bq_g5adj_allt) end)    -- sic! no bc factor because bc_t_u == bc_t_d
            list_append(t_seqsrc, tsnk)
          end
          tt('done')
          tt = timer('srcgrp_Bq_smear')
          local srcgrp_Bq_sm_g5adj = smfunc_ksnk_q(srcgrp_Bq_g5adj, {t_slice=t_seqsrc})   ; tt('done')

          debug_mem_print(cfg_key, "mem_sample.6") --**

          tt = timer('propgrp_Bq')
          local propgrp_Bq_g5adj = solver_func(srcgrp_Bq_sm_g5adj)                        ; tt('done')
    --      if true then
          if false then 
            -- test bkwprop against c2pt (works only for independent backward props!)
            local propgrp_Bq_g5adj_sm = smfunc_ksrc_q(propgrp_Bq_g5adj)
            local bkwtr = propgrp_Bq_g5adj_sm:adjoin():trace()
            for i_csrc, csrc in ipairs(csrcgrp) do
              printf("c2pt[c0=%s,dt=%d]=(%+13.8e,%+13.8e)\n", 
                  strkey.csrc_str(csrc), tsep, bkwtr[csrc]:real(), bkwtr[csrc]:imag())
            end
          end

          local propgrp_Bq = (gamma{n=15} * propgrp_Bq_g5adj):adjoin()
          tt = timer('propgrp_Bq_chop')
          local propgrp_Bq_chop = c3pt_chop_map(propgrp_Bq)                               ; tt('done')
          if gg then propgrp_Bq_chop = c3pt_chop_map(L:ColorMatrix(gg[csrc_coh0]) * propgrp_Bq * gg:adjoin()) end    --**
          propgrp_Bq, propgrp_Bq_g5adj = nil, nil
          force_gc("7")
          debug_mem_print(cfg_key, "mem_sample.7") --**

          if (redo_contract.c3pt_bb) then
            tt = timer('contract_c3pt_bb')
            local bb_file = get_bb_file_tag(cfg_key, csrcgrp, c3pt_psnk, tsep,
                tpol_tag, flav, bsm_tag_skew, ama)
            printf("[save_c3pt_bb] %s\n", bb_file)
            os.mkdir_path(dirname(bb_file))
            local aff_bb = qcd.aff.Writer(bb_file)
            local this_snk_str = strkey.snk_str_k(c3pt_psnk, tsep)
            general_save_bb(aff_bb,
                string.format("/bb/SS/proton_%s/%s/%s/%s", 
                    tpol_tag, csrcgrp_key, this_snk_str, flav),
                propgrp_Fq_chop, propgrp_Bq_chop,     -- sic! Tr[Bq . Gamma_n . Fq]
                gf_lpath_chop, 
                csrc_chop0, lt_chop - 1, c3pt_bb_spec.bb_lmin, c3pt_bb_spec.bb_lmax,
                c3pt_qext_list, t_axis, ferm_bc)      -- note: ferm_bc[1+t_axis] is not used to correct wrap-around bc; it is corrected in pproc
            aff_bb:close()
            debug_mem_print(cfg_key, "mem_sample.8") --**
            
            tt('done')
          end
          -- TODO insert here qPDF, TMD, etc
        end   -- tsep
      end   -- flav
    end   -- tpol
  end   -- psnk
  force_gc("sample_proton_c3pt")
  timer_1srcgrp('done')
end

