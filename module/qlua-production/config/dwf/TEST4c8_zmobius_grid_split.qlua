
require 'config/dwf/TEST4c8_zmobius'

------------------------------------------------------------------------------
-- Lanczos parameters
------------------------------------------------------------------------------
l_nev         = 200   -- wanted vectors
l_ncv         = 250
l_maxiter     = 50000
l_tol         = 1e-6
-- Chebyshev acc parameters
l_poly_n      = 40
l_poly_a      = .2 -- adjusted for 1400 based on a 1600 run results; eval[1400=67e-5]
l_poly_b      = 10  -- actual lambda_max=4.647 from an LR run
l_poly_x0     = 0.  -- P_n normalization point
-- eigcg parameters (used only to init space for Lanczos)
eigcg_nev     = 2
eigcg_tol     = 1e-6
eigcg_vmax    = 10
eigcg_umax    = l_ncv

function arpack_logfile(cfg_key)
  return string.format("%s/arpack.log", logdir, cfg_key)
end


------------------------------------------------------------------------------
-- evec params
------------------------------------------------------------------------------
mdwf_nvec, mdwf_nvec_basis = l_nev, l_nev
mdwf_opt = {parity=1, pctype='eopc2p',
  defl_type='int2qlm', defl_nvec=200, defl_nvec_basis = nil}
printf("mdwf_parity=%d    mdwf_pctype=%s\n", mdwf_opt.parity, mdwf_opt.pctype)

qlmopt= { sublat='odd', array=mdwf_L5,
          nvec_basis=mdwf_opt.defl_nvec_basis,
          prec='single'}

evec_pdir = string.format('%s/evec_rawdump.%s.%d', jobcfg.ens_top, mdwf_opt.pctype, mdwf_opt.parity)
--scratch_dir     = "/scratch/evec_rawdump"
scratch_dir     = evec_pdir   -- taking chances ...
evec_rawdump_stride = 4
--evec_volfmt     = 'part_dir'
--evec_pack_eopc  = true
--evec_qio_prec   = 'float'
--evec_qio_stride = 32
out_tag         = string.format('zm%d', mdwf_L5)
function mdwf_evec_file(cfg_key, nev)
  return string.format("%s/mdwf_evec_nev%05d.%s.%s.raw", 
          evec_pdir, nev, out_tag, cfg_key)
end
function mdwf_evec_file_scratch(cfg_key, nev)
  return string.format("%s/mdwf_evec_nev%05d.%s.%s.raw", 
          scratch_dir, nev, out_tag, cfg_key)
end

-------------------------------------------------------------------------------
-- SETUP: libs; depend on L
-------------------------------------------------------------------------------
if 'cpu-grid-lib' == rcparams.backend.dslash_solver then        -- FIXME scan all backends for 'grid'
  tt = timer('_grid.init')
  _grid.init(L, {verbose=true, log='Error,Warning,Message', shm_MB=64})
  tt('done')
  debug_mem_print(cfg_key,"grid init")
end


if jobcfg.do_bogus_prop then
  printf("WARNING: bogus(random) propagators for TESTING ONLY\n")
  make_solver_bcderiv = function(ama) 
    return function(x_bcd)
      local x = assert(x_bcd[''])
      if 'lattice.dirac.propagator' == type(x) then 
        return iter.ordered_tmap_table(function(p) return rnd:gaussian_DiracPropagator() end, x_bcd)
      elseif 'lattice.dirac.fermion' == type(x) then 
        return iter.ordered_tmap_table(function(p) return rnd:gaussian_DiracFermion() end, x_bcd)
      else error(string.format("solver: argument type '%s'", type(x))) end
    end 
  end
elseif jobcfg.do_contract_only then    
  printf("WARNING: contractions only, no solver initialized\n")
  make_solver_bcderiv = function(ama) 
    return function(x)
      error("invoke solver in 'do_contract_only' mode") 
      -- return nothing (nil)
    end 
  end
else

  -- load evecs
  if 'internal' == mdwf_opt.defl_type then
    -- regular mdwf deflation
    local eigcg_vmax, eigcg_nev, eigcg_tol = 6, 2, 1e-6    -- hack: irrelevant params
    local mdwf_gen  = qcd.MDWF.generic(gauge_u, ferm_bc,
              mdwf_L5, mdwf_M5, mdwf_mf,
                mdwf_b5, mdwf_c5, mdwf_opt)
    mdwf_eigcg_df = mdwf_gen:eig_deflator(eigcg_vmax, eigcg_nev, eigcg_tol, mdwf_opt.defl_nvec)

    cur_timer = timer("evecs_rawload")
    local evecs_perm = mdwf_evec_file(cfg_key, mdwf_opt.defl_nvec)
    printf("[evec_read] %s\n", evecs_perm)
    mdwf_eigcg_df:evecs_rawload(evecs_perm, mdwf_opt.defl_nvec,
                  {rank_stride=evec_rawdump_stride})
    mdwf_eigcg_df:stop()
    mdwf_eval = mdwf_eigcg_df:eigenvalues()
    cur_timer("done")

    get_evec = function(i_ev) return mdwf_eigcg_df:get_vector(i_ev) end

  elseif 'int2qlm' == mdwf_opt.defl_type then
    -- qlm deflation with vectors converted from mdwf rawdump
    local eigcg_vmax, eigcg_nev, eigcg_tol = 6, 2, 1e-6    -- hack: irrelevant params
    local mdwf_load = qcd.MDWF.generic(gauge_u, ferm_bc, mdwf_L5, mdwf_M5, mdwf_mf,
                mdwf_b5, mdwf_c5, mdwf_opt)
    mdwf_eigcg_df = mdwf_load:eig_deflator(eigcg_vmax, eigcg_nev, eigcg_tol, mdwf_opt.defl_nvec)
    local evecs_perm = mdwf_evec_file(cfg_key, mdwf_opt.defl_nvec)
    cur_timer = timer("evecs_rawload")
    printf("[evec_read] %s\n", evecs_perm)
    mdwf_eigcg_df:evecs_rawload(evecs_perm, mdwf_opt.defl_nvec,
                  {rank_stride=evec_rawdump_stride})
    mdwf_eigcg_df:stop()                                    ; cur_timer('done')

    mdwf_qlmx  = qcd.latmat.create(L, 'lattice.dirac.fermion', mdwf_opt.defl_nvec, qlmopt)
    cur_timer = timer("evecs_int2qlm")
    for i_ev = 0, mdwf_opt.defl_nvec - 1 do
     mdwf_qlmx:insert(i_ev, mdwf_eigcg_df:get_vector(i_ev))
    end
    mdwf_eval = mdwf_eigcg_df:eigenvalues()
    cur_timer('done')
    mdwf_load = nil
    force_gc('mdwf_load')

    get_evec = function(i_ev) return mdwf_qlmx:extract(i_ev) end

  elseif 'qlm' == mdwf_opt.defl_type then
    -- qlm deflation with vectors loaded using qcd.latmat.read_df_blk_clehner
    local mdwf = qcd.MDWF.generic(gauge_u, ferm_bc, mdwf_L5, mdwf_M5, mdwf_mf,
                mdwf_b5, mdwf_c5,
                { pctype = mdwf_opt.pctype, parity = mdwf_opt.parity })

    -- MDWF evecs
    mdwf_qlmx  = qcd.latmat.create(L, 'lattice.dirac.fermion', mdwf_opt.defl_nvec, qlmopt)
    cur_timer = timer("read_df_blk_clehner")
    local evec_md,evec_ev,evec_bp = get_evecdwfcl_files(cfg_key)
    printf("[evec-cache] reading  '%s'  '%s'  '%s'\n", evec_md, evec_ev, evec_bp)
    mdwf_eval = qcd.latmat.read_df_blk_clehner(mdwf_qlmx, evec_md, evec_ev, evec_bp, evecdwfcl_opt)
    cur_timer("done")
    printf("mdwf_qlmx=%s\n", tostring(mdwf_qlmx))
    print_vector(mdwf_eval, "eval")

    debug_mem_print(cfg_key,"Eigenvectors read")
    get_evec = function(i_ev) return mdwf_qlmx:extract(i_ev) end

  else
    error(string.format("bad defl_type='%s'", mdwf_opt.defl_type))
  end


  -- check the lowest evec[0]
  local gauge_u_bc = latvec.copy(gauge_u)
  gauge_apply_bc(gauge_u_bc, ferm_bc)
  print_obj(mdwf_opt)
  mdwf_op_ref = make_mdwf_op_ref(gauge_u_bc, mdwf_L5, mdwf_M5, mdwf_mf,
            mdwf_b5, mdwf_c5, mdwf_opt.pctype)
  for i_ev = 0, -1 do
    local v = get_evec(i_ev)
    latvec.print_eo_norm2(v, string.format("v[%2d]", i_ev))
    local MxM_v = mdwf_op_ref.op_MxM(v)
    printf("v.MxM.v[%2d] = %23.16e\n", i_ev, latvec.vdot(v, MxM_v):real())
    latvec.print_eo_norm2(MxM_v, string.format("MxM_v[%2d]", i_ev))
    latvec.print_cmp(MxM_v, v, string.format("MxM(v)<>v[%2d]", i_ev))
  end


  -- solver for each ama setup
  function make_solver(ama)
    local maxiter_exact       = 10000     -- stop at tol
    local tol_nostop          = 1e-12     -- norestart
    local maxiter_nostop      = 10000     -- norestart
    local tol_moeb            = 2.6e-3
    local tol_1               = 1e-6
    local maxiter_1           = 3000
    local mdwf_madcg_maxiter  = 3
    local dwf_verbose         = 'full'
    local dwf_backend         = 'cpu-grid-lib'
    local mdwf_split_geom     = assert(split_geom) 

    assert(mdwf_qlmx)
    assert(mdwf_eval)
    -- make params with deflation data
    local mdwf_opt_defl = {
      pctype          = mdwf_opt.pctype, 
      parity          = mdwf_opt.parity,
      defl            = {mdwf_qlmx, mdwf_eval},
      tol_restart     = tol_nostop, maxiter_restart = maxiter_nostop,
    }
    if 'exact' == ama['approx'] then
      return dwf.mdwf_g5herm_madcg_split_solver(
          mdwf_split_geom, gauge_u, ferm_bc, mdwf_M5, mdwf_mf, 
          mdwf_L5,      mdwf_b5,      mdwf_c5,
          mdwf_L5_full, mdwf_b5_full, mdwf_c5_full,
          mdwf_madcg_maxiter,
          { verbose   = dwf_verbose,  print_residual = true,
            backend   = dwf_backend,
            mdwf_opt  = mdwf_opt_defl,
            -- sic! new parameterization: tol = sqrt(eps2)
            tol_i     = 2.2e-3,     maxiter_i     = 10,           -- stop at tol_i
            tol_f     = 7e-3,       maxiter_f     = 10,           -- stop at tol_f
            tol_moeb  = tol_moeb,   maxiter_moeb  = 30,            -- 1defl+stop at tol FIXME use maxiter to stop
            tol_pv    = tol_moeb,   maxiter_pv    = 5,            -- stop at tol_pv FIXME use maxiter to stop
            tol_1     = tol_nostop, maxiter_1     = maxiter_nostop, -- no restarts
          })
    elseif 'sloppy' == ama['approx'] then
      return dwf.mdwf_g5herm_split_solver(
          mdwf_split_geom, gauge_u, ferm_bc, 
          mdwf_L5, mdwf_M5, mdwf_mf, mdwf_b5, mdwf_c5,
          { verbose   = dwf_verbose, 
            backend   = dwf_backend, 
            mdwf_opt  = mdwf_opt_defl,
            -- sic! new parameterization: tol = sqrt(eps2)
            tol   = 1e-10,      maxiter   = ama['ncg'],     -- stop at maxiter
            tol_1 = tol_nostop, maxiter_1 = maxiter_nostop, -- no restarts
          })
    else
      error(string.format("unknown approx='%s'"), ama['approx'])
    end
  end

  function make_solver_bcderiv(ama)
    local maxiter_exact       = 10000     -- stop at tol
    local tol_nostop          = 1e-12     -- norestart
    local maxiter_nostop      = 10000     -- norestart
    local tol_moeb            = 2.6e-3
    local tol_1               = 1e-6
    local maxiter_1           = 3000
    local mdwf_madcg_maxiter  = 3
    local dwf_verbose         = 'full'
    local dwf_backend         = 'cpu-grid-lib'
    local mdwf_split_geom     = assert(split_geom) 

    assert(mdwf_qlmx)
    assert(mdwf_eval)
    -- make params with deflation data
    local mdwf_opt_defl = {
      pctype          = mdwf_opt.pctype, 
      parity          = mdwf_opt.parity,
      defl            = {mdwf_qlmx, mdwf_eval},
      tol_restart     = tol_nostop, maxiter_restart = maxiter_nostop,
    }
    if 'exact' == ama['approx'] then
      return dwf.mdwf_g5herm_madcg_split_solver_bcderiv(
          mdwf_split_geom, gauge_u, ferm_bc, mdwf_M5, mdwf_mf, 
          mdwf_L5,      mdwf_b5,      mdwf_c5,
          mdwf_L5_full, mdwf_b5_full, mdwf_c5_full,
          mdwf_madcg_maxiter,
          { verbose   = dwf_verbose,  print_residual = true,
            backend   = dwf_backend,
            mdwf_opt  = mdwf_opt_defl,
            -- sic! new parameterization: tol = sqrt(eps2)
            tol_i     = 2.2e-3,     maxiter_i     = 10,           -- stop at tol_i
            tol_f     = 7e-3,       maxiter_f     = 10,           -- stop at tol_f
            tol_moeb  = tol_moeb,   maxiter_moeb  = 30,            -- 1defl+stop at tol FIXME use maxiter to stop
            tol_pv    = tol_moeb,   maxiter_pv    = 5,            -- stop at tol_pv FIXME use maxiter to stop
            tol_1     = tol_nostop, maxiter_1     = maxiter_nostop, -- no restarts
          })
    elseif 'sloppy' == ama['approx'] then
      return dwf.mdwf_g5herm_split_solver_bcderiv(
          mdwf_split_geom, gauge_u, ferm_bc, 
          mdwf_L5, mdwf_M5, mdwf_mf, mdwf_b5, mdwf_c5,
          { verbose   = dwf_verbose, 
            backend   = dwf_backend, 
            mdwf_opt  = mdwf_opt_defl,
            -- sic! new parameterization: tol = sqrt(eps2)
            tol   = 1e-10,      maxiter   = ama['ncg'],     -- stop at maxiter
            tol_1 = tol_nostop, maxiter_1 = maxiter_nostop, -- no restarts
          })
    else
      error(string.format("unknown approx='%s'"), ama['approx'])
    end
  end

end
