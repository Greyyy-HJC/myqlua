-- full nedm calculation:
--  * propagators :
--    prop_F 
--  ** hadspec : traditional (Chroma HSPECTRUM)

-- XXX NOTES
-- * before running, make sure that directories and links are set
--   $ mkdir data/c2pt data_pdir/{frw_prop,prop_log}
--   qlib -> $QLUADIR/qlib 
--   qlib-lhpc -> $QLUADIR/lhpc
--   file

-- TODO
-- * hyp smearing
-- * MILC gauge reading?

package.path = 'qlua-production/?.qlua;qlib-lhpc/?.qlua;qlib/?.qlua;' .. package.path
require 'strict'    -- catch all undefined (nil) variables
require 'stdlib'    -- standard printf, etc
require 'lhpc-std'  -- make_source, etc
require 'ape-smear' -- gauge smear
require 'hex-smear'
require 'gauge'
require 'qdpc_io'
require 'setup_util'
require 'debug_util'
require 'latvec'

require 'hadspec'

require 'hadron/baryon_corr'
require 'smear/coulgauss_smear'


------------------------------------------------------------------------------
-- INITIALIZATION
------------------------------------------------------------------------------
tot_timer = timer("total")
L = qcd.lattice(latsize, {network=network_geom})
print_network_settings()
print_subgrid_settings(L)
S = rnd_init(L, rnd_seed)

contract_only = false -- stub
if contract_only then printf("*** CONTRACT_ONLY ***\n") end

------------------------------------------------------------------------------
-- aux functions
------------------------------------------------------------------------------
function have_prop(cfg_key, prop_kind, prop_file)
  local prop_log = get_prop_log_file(cfg_key, prop_kind)
  local bn = basename(prop_file)
  os.mkdir_path(dirname(prop_log))
  if not io.fexists(prop_log) then return false end
  for s in io.lines(prop_log) do
    if s == bn then return true end
  end
  return false
end
function done_prop(cfg_key, prop_kind, prop_file)
  local prop_log = get_prop_log_file(cfg_key, prop_kind)
  local bn = basename(prop_file)
  os.mkdir_path(dirname(prop_log))
  local f = io.open(prop_log, "a")
  f:write(string.format("%s\n", bn))
  f:flush()
  f:close()
end
function prop_save_func(fname, x, title, prop_prec)
  -- requires in the scope:
  --  prop_volfmt       part_dir for fast
  --  prop_vol_stride   spacing between ranks doing IO (set equal to the number of ranks per 1 IO node)
  if nil == title then
    title = tostring(x)
  end
  printf("SAVE %s '%s'\n", title, fname)
  local tt = timer(string.format("SAVE %s", title))
  printf("$ mkdir %s\n", dirname(fname))
  os.mkdir_path(dirname(fname))
  local qio_w = open_qdpc_write(L, fname, "", prop_qio_volfmt, 
                    {rank_stride=prop_qio_stride})
  qio_w:DiracPropagator(prop_prec, x, title)
  qio_w:close()
  tt("done")
end
function prop_load_func(fname, title)
  -- requires in the scope:
  --  prop_vol_stride   spacing between ranks doing IO (set equal to the number of ranks per 1 IO node)
  if nil == title then
    title = ''
  end
  printf("LOAD %s '%s'\n", title, fname)
  local tt = timer(string.format("LOAD %s", title))
  local qio_r = open_qdpc_read(L, fname, {rank_stride=prop_qio_stride})
  local res = qio_r:DiracPropagator()
  qio_r:close()
  tt("done")
  return res
end


------------------------------------------------------------------------------
-- load or compute propagators
------------------------------------------------------------------------------
-- general parameter order :
--    coord; [polaris/flavor]; [prop(s)]; [gf] ; smear/solve
-- return (prop_F, is_new)
function get_prop_F(
      L, cfg_key, csrc, ama, sample_tag,
      smear_func, solver_func)
  local prop_F = nil
  local prop_file = get_frwprop_file_tag(cfg_key, csrc, ama, sample_tag)
  local is_new = not have_prop(cfg_key, "prop_F", prop_file) 
  if is_new then
    local tt = timer("CALC prop_F")
    local src_F = smear_func(make_source_point(L, csrc))  ; tt("src")
    prop_F  = solver_func(src_F)                          ; tt("prop")
    prop_save_func(prop_file, prop_F, "prop_F", ama['prop_prec'])
    done_prop(cfg_key, "prop_F", prop_file)
    tt("done")
  else
    prop_F = prop_load_func(prop_file, "prop_F")
  end
  return prop_F, is_new
end


function veclist_xpay(x_list, a, y)
  local xpay_list = {}
  for i = 1, #x_list do
    local x = x_list[i]
    local xpay = {}
    for j = 1, #x do xpay[j] = x[j] + a * y[j] end
    xpay_list[i] = xpay
  end
  return xpay_list
end
------------------------------------------------------------------------------
-- function to sample one source location
------------------------------------------------------------------------------
function sample_c2pt_boostsm(
        L, cfg_key, csrc, ama, sample_tag,
        c2pt_psnk_list, ksrc_q,
        proton_snk_S, proton_src_S,
        sm_tag, smear_func, 
        solver_func,
        t_axis, ferm_bc,
        redo_contract)
  -- parameters
  --  L               lattice object
  --  cfg_key          gauge cfg "key" : string
  --  csrc            forward source position for the sample
  --  ama             AMA parameter for saving files
  --  c2pt_psnk_list  sink momentum for c2pt, c2pt_volcedm
  --  smear_func      source smearing function x_smeared = smear_func(x_point)
  --  solver_func     fermion solver x = solver_func(y) <-> Dslash.x = y

  -- also requires global functions for propagator storage
  --  get_frwprop_file            F
  --  get_c2pt_file
  -- and variables

  -- XXX envs : 
  --    latsize
  --    hadspec_baryon_list, hadspec_meson_list 
  local timer_1src  = timer('1src')
  local tt    -- timer
  local bc_quark_t  = ferm_bc[1+t_axis]
  local bc_meson_t = bc_quark_t^2
  local bc_baryon_t = bc_quark_t^3
  
  -- source quark and qqq field boosting/twisting phases 
  -- XXX the origin of the twisting phase HAS to be at spatial {0,0,0} because 
  --    that's where the solver will also have discontinuity if k_tw is fractional
  local src_twph_q  = L:planewave({0,0,0,0}, ksrc_q)    -- origin at 0

  -- meson, baryon phase shifts
  local src_twph_qq, src_twph_qqq             -- origin at csrc
  do 
    local x = (src_twph_q * src_twph_q[csrc]:conj())
    src_twph_qq   = x*x
    src_twph_qqq  = x*x*x 
  end
  -- list of momenta relative to (Nq*ksrc): subtract the boost momentum of quark smearing
  local meson_psnkrel_list = veclist_xpay(c2pt_psnk_list, -2, ksrc_q)
  local baryon_psnkrel_list= veclist_xpay(c2pt_psnk_list, -3, ksrc_q)

  -- frw prop, quark
  tt = timer("frwprop_q")
  local frwsrc_q  = src_twph_q * smear_func(
            make_source_point(L, csrc) * src_twph_q:conj())       ; tt("src")
  local prop_Fq = solver_func(frwsrc_q)                             ; tt("inv")
  local prop_Fq_sm  = src_twph_q * smear_func(prop_Fq * src_twph_q:conj())
  tt('done')
  -- frw prop, antiquark: same as quark but with the opposite smearing boost
  tt = timer("frwprop_a")
  local frwsrc_a  = src_twph_q:conj() * smear_func(
            make_source_point(L, csrc) * src_twph_q)       ; tt("src")
  local prop_Fa = solver_func(frwsrc_a)                    ; tt("inv")
  local prop_Fa_sm  = src_twph_q:conj() * smear_func(prop_Fa * src_twph_q)
  tt('done')
  

  tt('done')
  if true then -- contract hadspec, c2pt (CP-even)
    -- c2pt (all mesons, baryons)
    local c2pt_file = get_c2pt_file_tag(cfg_key, csrc, ama, sample_tag)
    printf('[save_c2pt] %s\n', c2pt_file)
    os.mkdir_path(dirname(c2pt_file))

    local cur_t = timer("save_c2pt_list_fast*2")
    local aff_c2pt = qcd.aff.Writer(c2pt_file .. ".fast")   ; cur_t("open")
    local c2pt_list_SP_mes  = {}
    local c2pt_list_SS_mes  = {}
    local c2pt_list_SP_bar  = {}
    local c2pt_list_SS_bar  = {}
    for gn = 0, 15 do 
      c2pt_list_SP_mes[string.format('meson_g%d', gn)] = (src_twph_qq:conj() *
          meson_2pt(prop_Fa, prop_Fq, gamma{n=gn}))
      c2pt_list_SS_mes[string.format('meson_g%d', gn)] = (src_twph_qq:conj() * 
          meson_2pt(prop_Fa_sm, prop_Fq_sm, gamma{n=gn}))
      c2pt_list_SP_bar[string.format('proton_g%d', gn)] = (src_twph_qqq:conj() *
          baryon_sigma_twopt(prop_Fq, prop_Fq, proton_snk_S, proton_src_S, gamma({n=gn})))
      c2pt_list_SS_bar[string.format('proton_g%d', gn)] = (src_twph_qqq:conj() *
          baryon_sigma_twopt(prop_Fq_sm, prop_Fq_sm, proton_snk_S, proton_src_S, gamma({n=gn})))
    end
    cur_t('calc')
    save_2pt_list_fast(L, aff_c2pt, '/c2pt/SP',
          c2pt_list_SP_mes, csrc, meson_psnkrel_list, t_axis, bc_meson_t)
    save_2pt_list_fast(L, aff_c2pt, '/c2pt/SS',
          c2pt_list_SS_mes, csrc, meson_psnkrel_list, t_axis, bc_meson_t)
    save_2pt_list_fast(L, aff_c2pt, '/c2pt/SP',
          c2pt_list_SP_bar, csrc, baryon_psnkrel_list,t_axis, bc_baryon_t)
    save_2pt_list_fast(L, aff_c2pt, '/c2pt/SS',
          c2pt_list_SS_bar, csrc, baryon_psnkrel_list,t_axis, bc_baryon_t)
    aff_c2pt:close()
    cur_t("done")
  end
end

------------------------------------------------------------------------------
-- MAIN
------------------------------------------------------------------------------

--for k,v in pairs(qcd) do
--  printf("[%s] -> %s\n", tostring(k), tostring(v))
--end
--print_obj(qcd)
--os.exit(1)

cur_timer = timer("gauge_read")
gauge_file = get_gauge_file(cfg_key)
printf("read gauge '%s'\n", gauge_file)
if     'nersc' == gauge_fmt then 
  gauge_u = qcd.nersc.read_gauge(L, gauge_file)
elseif 'milc'  == gauge_fmt then
  gauge_u = qcd.milc.read_gauge(L, gauge_file)
else error(string.format("unknown gauge_fmt='%s'", gauge_fmt)) end

gfix_type = "coulomb"
colmat_gfix_file = get_colmat_gfix_file(cfg_key, gfix_type)
printf("read colmat '%s'\n", colmat_gfix_file)
colmat_gfix = load_qdpc_colmat(L, colmat_gfix_file)

print_gauge_norm_det(gauge_u, "gauge_u")
print_gauge_plaquette(gauge_u, "gauge_u")


cur_timer("done")

-- gauge field for source construction
gauge_u_ape = APE_smear(gauge_u, ape_alpha, ape_N, ape_accu, ape_maxiter, t_axis)
--print_gauge_norm_det(gauge_u_ape, "gauge_u_ape")
--print_gauge_plaquette(gauge_u_ape, "gauge_u_ape")

-- gauge field for solver
gauge_u_hyp = gauge_hyp_smear_std(gauge_u, 1)
print_gauge_norm_det(gauge_u_hyp, "gauge_u_hyp")
print_gauge_plaquette(gauge_u_hyp, "gauge_u_hyp")
  
--for mq_tag, mq_l in pairs(mq_list) 
do  -- main part
  -- init QOP-MG
  cur_timer = timer("init_mg")
  local kappa_l = 1./2./(4. + mq_l)
  local mg_param = make_mg_params(
      kappa_l, c_sw, ferm_bc, 
      mg_tol_approx, mg_maxiter, latsize, 
      mg_param_null,
      { name = "mg", verbose = 0 })
  print_obj(mg_param, "mg_param")
  local mg = nil
  if not contract_only then mg = qcd.qop.WilsonMG(gauge_u_hyp, mg_param) end
  cur_timer("done")

  -- smear param scan loop
  for sm_tag, sm_param in pairs(smear_param_list) do
    local smear_func = nil
    if 'wup' == sm_param.type then
      smear_func = function(x) 
      -- reqiures global wup_a, wup_n, wup_gauge_u, t_axis
      return wuppertal_smear(gauge_u_ape, sm_param.wup_alpha, sm_param.wup_N, x, t_axis)
      end
    elseif 'cgauss' == sm_param.type then
      local cg_w = sm_param.cg_width
      smear_func = make_gauss_smear_func(L, {cg_w, cg_w, cg_w, 0}, colmat_gfix)
    else error(string.format("unknown sm_param.type='%s'", sm_param.type)) end
    local c2pt_ksrc_list = sm_param.c2pt_ksrc_list

    for ksrc_tag, ksrc_q in pairs(c2pt_ksrc_list) do
      local sample_tag = string.format("%s_%s_%s", mq_tag, sm_tag, ksrc_tag)
      local sample_timer = timer(string.format("scan %s", sample_tag))
      -- ama loop
      for i_ama, ama in pairs(ama_list) do
        -- stamp to discriminate different qmass, ...
        -- solver func for given AMA mode (note the normalization)
        local calc_prop = function()end
        if not contract_only then calc_prop = make_mg_solver(mg, ama, 2 * kappa_l) end
        cur_timer = timer(string.format('AMA="%s", #src=%d', ama['approx'], #(ama['csrc_list'])))

        -- csrc scan loop
        for i_csrc, csrc in ipairs(ama['csrc_list']) do
          sample_c2pt_boostsm(
            L, cfg_key, csrc, ama, sample_tag,
            c2pt_psnk_list, ksrc_q,
            proton_snk_S, proton_src_S,
            sm_tag, smear_func, 
            calc_prop, 
            t_axis, ferm_bc, 
            true)
        end
        cur_timer("done")
      end
      sample_timer("done")
    end
  end
  if not contract_only then mg:close() end
  mg = nil
end

tot_timer("done")
printf("QLUA_RUN_SUCCESS\n")
