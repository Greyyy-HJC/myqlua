package.path = 'qlib/?.qlua;qlib-lhpc/?.qlua;qlua-production/?.qlua;' .. package.path
require 'strict'
require 'setup_util'
require 'latvec'
require 'stdlib'
require 'lhpc-std'
require 'util/strkey'
require 'qdpc_io'
require 'gauge'
require 'ape-smear'
require 'hex-smear'
require 'debug_util'

require 'rcparams'
rcparams.backend.dslash_solver = 'cpu'
--rcparams.backend.dslash_solver = 'gpu-quda'
--rcparams.backend.laplacian = 'cpu'
rcparams.backend.laplacian = 'cpu-clover'
--rcparams.backend.laplacian = 'gpu-quda'
rcparams.backend.qbarq = 'cpu'
--rcparams.backend.qbarq = 'gpu-quda'
print_obj(rcparams, 'rcparams')


-------------------------------------------------------------------------------
-- general
-------------------------------------------------------------------------------
cfg_key = assert(job_key)
task_key=rawget(_G, 'task_key') or 'scan_smear'
subjob_key = rawget(_G, 'subjob_key') or ''
if "" == subjob_key then sample_list = false
else sample_list = parse_int_range(subjob_key) end



latsize   = {4,4,4,8}
t_axis    = #latsize - 1
rnd_seed  = 1984

contract_only = false -- stub
if contract_only then printf("*** CONTRACT_ONLY ***\n") end


------------------------------------------------------------------------------
-- file locations
------------------------------------------------------------------------------
ens_top   = 'TEST4c8'
data_top  = 'TEST4c8/data' 
data_pdir = 'TEST4c8/data_pdir'

-- AMA-dependent output file names
function ama_str(ama)
  if 'exact' == ama['approx'] then
    return string.format("ex")
  elseif 'sloppy' == ama['approx'] then
    return string.format("sl")
  else
    error(string.format('unknown ama="%s"', ama['approx']))
  end
end

-- gauge file(s)
gauge_fmt = 'nersc'
function get_gauge_file(key)
  return string.format("%s/gauge/ckpoint_lat.%s",
          ens_top, key)
end
function get_gauge_gfix_file(key, gfix_type)
  return string.format("%s/gauge_gfix/ckpoint_lat.%s.%s",
          data_top, gfix_type, key)
end
function get_colmat_gfix_file(key, gfix_type)
  return string.format("%s/colmat_gfix/colmat_gfix.%s.%s",
          data_top, gfix_type, key)
end

-- data output
function sample_log_file(cfg_key)
  return string.format("%s/sample_log/%s.%s", data_top, job_key, task_key)
end

function get_c2pt_file_tag(key, csrc, ama, sample_tag)
  return string.format('%s/c2pt/c2pt.%s.%s.%s.%s.aff',
          data_top, cfg_key, ama_str(ama), sample_tag, strkey.csrc_str_f(csrc))
end


------------------------------------------------------------------------------
-- INITIALIZATION
------------------------------------------------------------------------------
tot_timer = timer("total")
L = qcd.lattice(latsize, {network=network_geom})
print_network_settings()
print_subgrid_settings(L)
S = rnd_init(L, rnd_seed)

-- gauge
cur_timer = timer("gauge_read")
gauge_file = get_gauge_file(cfg_key)
printf("read gauge '%s'\n", gauge_file)
if     'nersc' == gauge_fmt then 
  gauge_u = qcd.nersc.read_gauge(L, gauge_file)
elseif 'milc'  == gauge_fmt then
  gauge_u = qcd.milc.read_gauge(L, gauge_file)
elseif 'lime' == gauge_fmt then
  gauge_u = load_qdpc_gauge(L, gauge_file)
else error(string.format("unknown gauge_fmt='%s'", gauge_fmt)) end

print_gauge_norm_det(gauge_u, "gauge_u")
print_gauge_plaquette(gauge_u, "gauge_u")



-------------------------------------------------------------------------------
-- source smearing
-------------------------------------------------------------------------------
ape_alpha   = 2.5   -- equiv to CPS ape_beta=0.4
ape_N       = 2
ape_accu    = 1e-6
ape_maxiter = 150

-- gauge field for source construction  
tt = timer("ape_smear")
gauge_u_ape = APE_smear(gauge_u, ape_alpha, ape_N, 
    ape_accu, ape_maxiter, t_axis)                              ; tt('done')

-- Coulomb gauge-fix for source construction  
gfix_type = "coulomb"
colmat_gfix_file = get_colmat_gfix_file(cfg_key, gfix_type)
printf("read colmat '%s'\n", colmat_gfix_file)
tt = timer('read_colmat')
colmat_gfix = load_qdpc_colmat(L, colmat_gfix_file)             ; tt('done')

-- generate smearing/boost combinations
smear_shape_list = {
  -- Wuppertal
  ['G2.5x14'] = {type='wuppertal', t_axis=t_axis,
      wup_U=gauge_u_ape, wup_alpha=2.5, wup_N=14  },
  ['G2.5x20'] = {type='wuppertal', t_axis=t_axis,
      wup_U=gauge_u_ape, wup_alpha=2.5, wup_N=20  },
  ['G2.5x28'] = {type='wuppertal', t_axis=t_axis,
      wup_U=gauge_u_ape, wup_alpha=2.5, wup_N=28  },

  -- Coulomb-Gaussian
  ['CG1.8']   = {type='coulgauss', t_axis=t_axis,
      coulomb_G=colmat_gfix, width=1.8            },
  ['CG2.4']   = {type='coulgauss', t_axis=t_axis,
      coulomb_G=colmat_gfix, width=2.4            },
  ['CG3.2']   = {type='coulgauss', t_axis=t_axis,
      coulomb_G=colmat_gfix, width=3.2            },

  -- Coulomb-Exponential ("hydrogen")
  ['CE0.9'] = {type='coulexp', t_axis=t_axis,
      coulomb_G=colmat_gfix, width=0.9            },
  ['CE1.2'] = {type='coulexp', t_axis=t_axis,
      coulomb_G=colmat_gfix, width=1.2            },
  ['CE1.6'] = {type='coulexp', t_axis=t_axis,
      coulomb_G=colmat_gfix, width=1.6            },
}

kbxp10  = {  1,  0,  0,  0}
smear_boost_list = {
  kbxp10 = list_scal(1, kbxp10),
  kbxp20 = list_scal(2, kbxp10),
  kbxp30 = list_scal(3, kbxp10),
  kbxp40 = list_scal(4, kbxp10),
  kbxp50 = list_scal(5, kbxp10),
}

smear_group_list = {}
for ksrc_tag, ksrc in pairs(smear_boost_list) do
  local sm_grp = {}
  for sm_shape_tag, sm_shape_opt in pairs(smear_shape_list) do
    local sm_tag = string.format("%s%s", sm_shape_tag, ksrc_tag)
    sm_grp[sm_tag] = table_join(sm_shape_opt, {boost=ksrc})
  end
  list_append(smear_group_list, sm_grp)
end
print_obj(smear_group_list, 'smear_group_list')

-- momenta
pm1     = {-1, 0, 1}        -- [-1;1]
pm2     = {-2,-1, 0, 1, 2}  -- [-2;2]
c2pt_psnk_list = range_prod({range(-10,11), pm1, pm1}) -- 21*9

-- spin structure for baryons
proton_src_S   = gamma{mu=0} * gamma{mu=2}
proton_snk_S   = proton_src_S



-------------------------------------------------------------------------------
-- sampling parameters
-------------------------------------------------------------------------------
do
  -- * sample coordinates
  local cfg_list = {}
  for s in io.lines('TEST4c8/list.cfg.all.4c8') do
    cfg_list[1+#cfg_list] = s
  end
  local cfg_index = table_index(cfg_list, cfg_key)
  printf("cfg_key='%s' index=%d\n", cfg_key, cfg_index)
  local csrcgrid  = { 1, 1, 1, 2 }
  local x0_0= { 0, 0, 0, 0 }
  local dx_g= { 7,11,13,23 }
  local sloppy_csrc_list = make_src_grid(csrcgrid, latsize, x0_0, dx_g, cfg_index)

  -- * approx modes
  ama_list = {
    { approx    = 'exact',
      csrc_list = { sloppy_csrc_list[1] }, 
      tol       = 1e-9,
      prop_prec = 'double' },
    { approx    = 'sloppy',
      csrc_list = sloppy_csrc_list,
      tol       = 1e-4,
      prop_prec = 'float' }
    }
end



-------------------------------------------------------------------------------
-- quark action & solver
-------------------------------------------------------------------------------
-- fermion params
ferm_bc = {1,1,1,-1}
c_sw    = 1.03  -- tadpole 1./u_0^3 
mq_tag, mq_l = "mXYZ", 0.123
kappa_l = 1./2./(4. + mq_l)

-- gauge field for solver TODO move to solver part
tt = timer('hyp_smear')
gauge_u_hyp = gauge_hyp_smear_std(gauge_u, 1)         ; tt('done')
  
-- solver init
if 'cpu' == rcparams.backend.dslash_solver then
  -- * QOP-MG parameters
  require 'mg_param'
  mg_tol_approx = 1e-4
  mg_maxiter  = 200
  mg_param_null = {    
    blocking      = { {2,2,2,2} },
    verbose       = {        0  }, 
    null_vecs     = {       24  },
    null_vecs_extra={        0  },
    prehits       = {        0  },
    posthits      = {        4  },
    underrelax    = {       1.  },
    null_maxiter  = {       20  },
    null_res      = {      0.4  },
    null_conv     = {      0.8  },
                                
    coarse_res    = {      0.1  },
    coarse_maxiter= {       12  },
    coarse_ngcr   = {        8  },
  }
  tt = timer('inig_mg')
  local mg_param = make_mg_params(
      kappa_l, c_sw, ferm_bc,
      mg_tol_approx, mg_maxiter, latsize,
      mg_param_null, { name = "mg", verbose = 0 })
  print_obj(mg_param, "mg_param")
  local mg = nil
  if not contract_only then 
    local tt = timer("init_mg")
    mg = qcd.qop.WilsonMG(gauge_u_hyp, mg_param)    ; tt('done')
  end

  function make_solver(ama)
    local scale = 2 * kappa_l
    if contract_only then return function()end end
    if ama['approx'] == 'exact' or ama['approx'] == 'sloppy' then
      return make_solver_general(function(x)
        return (scale * mg:solve(x, {residual = {rsqmin = ama['tol']^2}}))
      end)
    else error(string.format("unknown ama='%s'", ama['approx'])) end
  end
elseif 'gpu-quda' == rcparams.backend.dslash_solver then
  -- * QUDA(-MG) parameters
  require 'quda'
  tt = timer('init_quda')
  qcd.quda.init(L)                                          ; tt('done')
  local t_boundary
  if      1 == ferm_bc[1+t_axis] then t_boundary = "PERIODIC"
  elseif -1 == ferm_bc[1+t_axis] then t_boundary = "ANTI_PERIODIC"
  else error(string.format("bad ferm_bc_t = '%s'", tostring(ferm_bc[1+t_axis]))) end
  local QS = nil
  function make_solver(ama)
    if contract_only then return function()end end
    if nil ~= QS then 
      QS:close()
      QS = nil
    end
    QS = qcd.quda.inverter.simple(
        -- TODO set sloppy prec->HALF, reliable_delta->0.1
        gauge_u_hyp,
        { t_boundary          = t_boundary },
        { clover_coeff        = c_sw * kappa_l,
          dslash_type         = "CLOVER_WILSON",
          kappa               = kappa_l,
          mass_normalization  = "MASS",
          tol                 = ama['tol'],
          maxiter             = 10000,
          verbosity           = "SUMMARIZE",
          tune                = 'YES',
        })
    print_obj(QS, "make_solver")
    return make_solver_general(function(x) return QS:solve(x) end)
  end
end
