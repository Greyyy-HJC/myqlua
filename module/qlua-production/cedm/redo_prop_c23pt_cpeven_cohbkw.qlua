require 'cedm/cedm_get_prop'
require 'cedm/cedm_redo_prop'

------------------------------------------------------------------------------
-- sample cpeven c2,c3 (coherent)
------------------------------------------------------------------------------
function redo_prop_c23pt_cpeven_cohbkw(
        L, cfg_key, csrcgrp, hslab_len_t, bbspace_len_t, ama,
        c2pt_psnk_list, c3pt_psnk_list, c3pt_qext_list, tsep_list,
        S2, S1, 
        Tpol_list_c3pt,
        flav_list,
        gf_lpath, 
        smear_func, solver_func, 
        t_axis, ferm_bc,
        redo_prop)
  -- parameters
  --  L               lattice object
  --  cfg_key          gauge cfg "key" : string
  --  csrcgrp         group of coherent sources for the coh.sample
  --  ama             AMA parameter for saving files
  --  c2pt_psnk_list  sink momentum for c2pt, c2pt_volcedm
  --  c3pt_psnk_list  sink momentum for c3pt, c2pt_cpbar
  --  c3pt_qext_list  list of momenta for insertions
  --  tsep_list       source-sink separation list
  --  S2, S1          sink and source diquark spin structures
  --  Tpol_list
  --                  list of nucleon polarization matrices for 0- and 1-st order in CEDM insertions
  --  flav_list       flavors for cedm and current insertions
  --  gf_lpath        gauge field for link paths in building blocks
  --  smear_func      source smearing function x_smeared = smear_func(x_point)
  --  solver_func     fermion solver x = solver_func(y) <-> Dslash.x = y
  --  redo_prop       { F=false, B=false }

  -- also requires global functions for propagator storage
  --  get_frwprop_file            F
  --  get_hadspec_file
  -- and variables

  -- XXX envs : 
  --    latsize
  --    hadspec_baryon_list, hadspec_meson_list 
  --    bb_link_min, bb_link_max,
  --    bb_volcedm_link_min, bb_volcedm_link_max,
  --    t_axis
  --    ferm_bc
  local timer_1srcgrp = timer(string.format('1srcgrp[%d] c23pt_cpeven_cohbkw', #csrcgrp))
  local csrcgrp_key = csrcgrp_str(csrcgrp)
  redo_prop = redo_prop or {}
  local tt    -- timer
  local bc_quark_t  = ferm_bc[1+t_axis]
  local bc_baryon_t = bc_quark_t^3
  local bc_quark_tpos = table_copy(ferm_bc)
  bc_quark_tpos[1+t_axis] = 1   -- for baryon_save_bb
  local lt          = L[t_axis]           -- time extent

  assert(0 < #csrcgrp)

  -- build hyperslab subsets for constructing frwprop_grp, bbspace
  local csrc_hslab = hyperslab_subset_grp(L, csrcgrp, hslab_len_t, t_axis,
          {verbose=true})
  local bbspace_hslab_map, bbspace_L = hyperslab_subvol_scatter_grp(L, csrcgrp, 
          bbspace_len_t, t_axis, {shift_space=true})

  local prop_F_list = {}    -- FIXME rearrange to compute F&C together, drop list to save RAM
  local propgrp_F = L:DiracPropagator()
  for i_csrc, csrc in pairs(csrcgrp) do
    local prop_F, is_new_F
    if redo_prop.F then
      prop_F, is_new_F = redo_prop_F(L, cfg_key, csrc, ama, smear_func, solver_func)
    else 
      prop_F, is_new_F = get_prop_F(L, cfg_key, csrc, ama, smear_func, solver_func)
    end
    prop_F_list[i_csrc]   = prop_F
    csrc_hslab[i_csrc]:where(function()propgrp_F:set(prop_F)end)
  end -- csrc
    
  if redo_prop.B then
    tt  = timer('smear_prop_F')
    local propgrp_F_sm  = smear_func(propgrp_F)
    tt('done')
    for i_tsep, tsep in pairs(tsep_list) do
      for i_psnk, psnk in pairs(c3pt_psnk_list) do
        local psnk_str = string.format("PX%d_PY%d_PZ%d", psnk[1], psnk[2], psnk[3])
        -- compute prop_B, save CP-even c3pt
        for tpol_tag, tpol in pairs(Tpol_list_c3pt) do
          for i_flav_cur, flav_cur in pairs(flav_list) do
            local propgrp_B, is_new_B_grp = redo_propgrp_B(
                L, cfg_key, csrcgrp, ama, psnk, tsep, 
                S2, S1, tpol, tpol_tag, flav_cur, 
                propgrp_F_sm,
                smear_func, solver_func)
          end -- flav_cur
        end -- tpol
        force_gc("sample_cedm_2pt:prop_B")

      end -- psnk
    end -- tsep
  end -- redo_prop.B

  force_gc("redo_prop_c23pt")
  timer_1srcgrp('done')
end
