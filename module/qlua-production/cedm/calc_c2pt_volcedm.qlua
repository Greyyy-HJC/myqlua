package.path = './?.qlua;./qlib-lhpc/?.qlua;./qlib/?.qlua;' .. package.path
require "strict"    -- catch all undefined (nil) variables
require "stdlib"    -- standard printf, etc
require "lhpc-std"  -- make_source, etc
require "ape-smear" -- gauge smear
require "gauge"
require "qdpc_io"
require "setup_util"
require "latvec"

require "cedm-seq"  -- sequential sources
require "hadspec"
require "hex-smear"
require "madwf_sns"

------------------------------------------------------------------------------
-- INITIALIZATION
------------------------------------------------------------------------------
tot_timer = timer("total")
L = qcd.lattice(latsize, {network=network_geom})
S = rnd_init(L, rnd_seed)

------------------------------------------------------------------------------
-- function to sample one source location
------------------------------------------------------------------------------
-- compute & save cedm-sequential propagators and perform contraction at the nucleon sink
function sample_c2pt_cedm_vol(L, cfg_key, gauge_u_clover_list, 
        smear_func, solver_func, prop_save_func, prop_load_func,
        csrc, c2pt_psnk_list, cedm_flav_list,
        S2, S1, Tpol_list, ama)
  -- parameters
  --  L               lattice object
  --  cfg_key          gauge cfg "key" : string
  --  gauge_u_clover  {mu,nu} table of gauge clover term for the cEDM insertion
  --  smear_func      source smearing function x_smeared = smear_func(x_point)
  --  solver_func     fermion solver x = solver_func(y) <-> Dslash.x = y
  --  prop_save_func  function to save propagators prop_save_func(filename, x, [title])
  --  csrc            forward source position for the sample
  --  c2pt_psnk_list  sink momentum, time separation list
  --  cedm_flav_list  flavors for cedm insertion
  --  S2, S1          sink and source diquark spin structures
  --  Tpol_list       list of nucleon polarization matrices
  --  ama        AMA parameter for saving files
  -- also requires global functions for propagator storage
  --  get_frwprop_file            F
  --  get_hadspec_file
  --  get_hadspec_volcedm_file
  --  get_cedmseqprop_file
  -- and variables
  --  flav_list
  --  have_frwprop
  --  t_axis
  --  ferm_bc
  local tt    -- timer
  local bc_quark_t  = ferm_bc[1+t_axis]
  local bc_baryon_t = bc_quark_t^3
  
  local frwprop = nil
  local frwprop_sm = nil
  if have_frwprop then
    -- load & smear frw_prop
    frwprop     = prop_load_func(get_frwprop_file(cfg_key, csrc, ama), "frwprop")
    frwprop_sm  = smear_func(frwprop)
  else
    -- calc & save frw prop
    tt = timer("frwprop")
    local frwsrc = smear_func(make_source_point(L, csrc))     ; tt("src")
    frwprop  = solver_func(frwsrc)                        ; tt("prop")
    prop_save_func(get_frwprop_file(cfg_key, csrc, ama),
                   frwprop, "frwprop", ama['prop_prec'])
    tt("done")
    
    -- smear for hadspec and backward props
    frwprop_sm  = smear_func(frwprop)

    -- save hadspec
    -- TODO adjust the lists of 2pt functions to save
    local hadspec_file = get_hadspec_file(cfg_key, csrc, ama)
    tt  = timer(string.format('write[hadspec]: %s', hadspec_file))
    local aff_hadspec = qcd.aff.Writer(hadspec_file)
    save_hadspec_list(L, aff_hadspec, '/hadpec/SP',
                     frwprop, frwprop, csrc, hadspec_psnk_list,
                     t_axis, bc_quark_t, hadspec_baryon_list, hadspec_meson_list)
    save_hadspec_list(L, aff_hadspec, '/hadspec/SS',
                     frwprop_sm, frwprop_sm, csrc, hadspec_psnk_list,
                     t_axis, bc_quark_t, hadspec_baryon_list, hadspec_meson_list)
    aff_hadspec:close()
    tt('done')
  end

  -- compute and save cedm-seq-frw props, and c2pt with modified props
  -- cycle over gauge_u_clover insertions, flav, tpol
  for gauge_sm_tag, gauge_u_clover in pairs(gauge_u_clover_list) do
    tt = timer("cedmseq_prop")
    local cedmseqsrc = cedm_seqsrc_edm(frwprop, gauge_u_clover)    ; tt("src")
    local cedmseqprop= solver_func(cedmseqsrc)                        ; tt("prop")
    printf("%s\n", get_cedmseqprop_file(cfg_key, csrc, gauge_sm_tag, ama))
    prop_save_func(get_cedmseqprop_file(cfg_key, csrc, gauge_sm_tag, ama), 
                   cedmseqprop, "cedmseq_prop", ama['prop_prec'])
    local cedmseqprop_sm = smear_func(cedmseqprop)
    tt("done")

    local c2pt_volcedm = {}
    for i_flav, flav in pairs(cedm_flav_list) do
      for i_tpol, tpol in pairs(Tpol_list) do
        local k_cc = string.format('%s/proton_%s/%s', 
                              gauge_sm_tag, i_tpol, flav)
        c2pt_volcedm[k_cc] = cedm_baryon_sigma_seqone(
                              frwprop_sm, frwprop_sm, cedmseqprop_sm, 
                              flav, S2, S1, tpol)
      end
    end
      
    local c2pt_volcedm_file = get_hadspec_volcedm_file(cfg_key, csrc, gauge_sm_tag, ama)
    printf("[save_c2pt_volcedm] %s\n", c2pt_volcedm_file)
    local c2pt_volcedm_aff  = qcd.aff.Writer(c2pt_volcedm_file)
    save_2pt_list(L, c2pt_volcedm_aff, '/hadspec_volcedm/', 
              c2pt_volcedm, csrc, c2pt_psnk_list, t_axis, bc_baryon_t)
    c2pt_volcedm_aff:close()
  end

  force_gc("sample_cedm_2pt")
end


------------------------------------------------------------------------------
-- MAIN
------------------------------------------------------------------------------

cur_timer = timer("gauge_read")
printf("read gauge '%s'\n", get_gauge_file(cfg_key))
gauge_u = qcd.nersc.read_gauge(L, get_gauge_file(cfg_key))
cur_timer("done")

-- gauge field for source construction
wup_gauge_u = APE_smear(gauge_u, ape_alpha, ape_N, ape_accu, ape_maxiter, t_axis)

-- calc gauge_clover term
function gauge_clover_cedm(gauge_u)
  -- calc clover G_{mu nu} with color trace subtracted
  local L = latvec.lattice(gauge_u)
  local cm_1 = L:ColorMatrix(1.)
  local gauge_clover = {}
  for i = 0, #L-1 do
    gauge_clover[1+i] = {}
    gauge_clover[1+i][1+i] = false
    for j = 0, i - 1 do
      local c = clover_term(gauge_u, i, j)
      c = c - (c:trace() / c:colors()) * cm_1
      gauge_clover[1+i][1+j]  =  c
      gauge_clover[1+j][1+i]  = -c
    end
  end
  return gauge_clover
end
gauge_u_clover_list = {
  orig  = gauge_clover_cedm(gauge_u)
}

-------------------------------------------------------------------------------
-- initialize mdwf object 
-- LOAD EIGENVECTORS
-------------------------------------------------------------------------------
mdwf  = qcd.MDWF.generic(gauge_u, ferm_bc, 
            mdwf_L5, mdwf_M5, mdwf_mf,
            mdwf_b5, mdwf_c5)
mdwf_eigcg_df = mdwf:eig_deflator(eigcg_vmax, eigcg_nev, eigcg_tol, l_nev)
do
  local evecs_perm = mdwf_evec_file(cfg_key, l_nev)
  local evecs_scratch = mdwf_evec_file_scratch(cfg_key, l_nev)

  if evecs_scratch ~= evecs_perm then
    cur_timer = timer("evecs_rawdump_sync")
    printf("evecs_rawdump_sync: '%s' -> '%s'\n", evecs_perm, evecs_scratch)
    evecs_rawdump_sync(evecs_perm, evecs_scratch, evec_rawdump_stride)
    cur_timer("done")
  end

  cur_timer = timer("evecs_rawload")
  printf("[evec_read] %s\n", evecs_scratch)
  mdwf_eigcg_df:evecs_rawload(evecs_scratch, l_nev, 
                {rank_stride=evec_rawdump_stride})
  mdwf_eigcg_df:stop()
  cur_timer("done")
end


------------------------------------------------------------------------------
-- AUX FUNCTIONS
------------------------------------------------------------------------------
function smear_func_wup(x) 
  -- reqiures global wup_a, wup_n, wup_gauge_u, t_axis
  return wuppertal_smear(wup_gauge_u, wup_alpha, wup_N, x, t_axis)
end
function prop_save_func(fname, x, title, prop_prec)
  -- requires in the scope:
  --  prop_volfmt       part_dir for fast
  --  prop_vol_stride   spacing between ranks doing IO (set equal to the number of ranks per 1 IO node)
  if nil == title then
    title = tostring(x)
  end
  local tt = timer(string.format("SAVE %s", title))
  local qio_w = open_qdpc_write(L, fname, "", prop_qio_volfmt, 
                    {rank_stride=prop_qio_stride})
  qio_w:DiracPropagator(prop_prec, x, title)
  qio_w:close()
  tt("done")
end
function prop_load_func(fname, title)
  -- requires in the scope:
  --  prop_vol_stride   spacing between ranks doing IO (set equal to the number of ranks per 1 IO node)
  if nil == title then
    title = ''
  end
  local tt = timer(string.format("LOAD %s", title))
  local qio_r = open_qdpc_read(L, fname, {rank_stride=prop_qio_stride})
  local res = qio_r:DiracPropagator()
  qio_r:close()
  tt("done")
  return res
end


for i_ama, ama in pairs(ama_list) do
  local solver_func = make_solver(mdwf_eigcg_df, gauge_u, ferm_bc, ama)
  for i_csrc, csrc in pairs(ama['csrc_list']) do 
    sample_c2pt_cedm_vol(L, cfg_key, gauge_u_clover_list,
              smear_func_wup, solver_func, prop_save_func, prop_load_func,
              csrc, c2pt_psnk_list, cedm_flav_list,
              cedm_S2, cedm_S1, c2pt_tpol_list, ama)
  end
  solver_func = nil
  force_gc()
  print_obj(qcd.memory_usage())
end

tot_timer("done")
printf("QLUA_RUN_SUCCESS\n")
-- vim : syn=lua
