package.path = './?.qlua;./qlib-lhpc/?.qlua;./qlib/?.qlua;' .. package.path
require "strict"    -- catch all undefined (nil) variables
require "stdlib"    -- standard printf, etc
require "lhpc-std"  -- make_source, etc
require "ape-smear" -- gauge smear
require "gauge"
require "qdpc_io"
require "setup_util"
require "latvec"

require "cedm-seq"  -- sequential sources
require "hadspec"
require "hex-smear"
require "madwf_sns"

require "wilson-flow"

------------------------------------------------------------------------------
-- INITIALIZATION
------------------------------------------------------------------------------
tot_timer = timer("total")
L = qcd.lattice(latsize, {network=network_geom})
S = rnd_init(L, rnd_seed)

------------------------------------------------------------------------------
-- function to sample one source location
------------------------------------------------------------------------------
-- compute & save forward and CP-odd backward propagators and do final contraction
--  at the cEDM insertion, sum over timeslice
function sample_contract_wf_cedm_2pt(L, cfg_key, 
        gauge_u, wf_eps, wf_nmax,
        prop_load_func,
        csrc, c3pt_psnk_list, c3pt_tsep_list, c3pt_flav_list,
        Tpol_list, ama)
  -- parameters
  --  L               lattice object
  --  cfg_key          gauge cfg "key" : string
  --  gauge_u_smearings  a table of smeared gauge fields for cEDM contractions
  --  smear_func      source smearing function x_smeared = smear_func(x_point)
  --  solver_func     fermion solver x = solver_func(y) <-> Dslash.x = y
  --  prop_save_func  function to save propagators prop_save_func(filename, x, [title])
  --  csrc            forward source position for the sample
  --  c3pt_psnk_list, c3pt_tsep_list      sink momentum, time separation list
  --  c3pt_flav_list  list of cedm flavor insertions
  --  S2, S1          sink and source diquark spin structures
  --  Tpol_list       list of nucleon polarization matrices
  --  ama        AMA parameter for saving files
  -- also requires global functions for propagator storage
  --  get_frwprop_file            F
  --  get_bkwprop_file            B
  --  get_hadspec_file
  --  get_hadspec_cpbar_file
  -- and variables
  --  flav_list
  --  have_frwprop
  

  local tt    -- timer

  -- load frwprop
  local frwprop = prop_load_func(get_frwprop_file(cfg_key, csrc, ama), "frwprop")

  -- calc gauge_clover term

  for i_tsep, tsep in pairs(c3pt_tsep_list) do
    local tsrc = csrc[1+t_axis]
    local tsnk = (tsrc + tsep) % latsize[1+t_axis]
    -- correct for boundary conditions if necessary
    local bc_fac = 1.
    if tsnk <= tsrc then bc_fac = ferm_bc[1+t_axis]^3 end

    for i_psnk, psnk in pairs(c3pt_psnk_list) do
      -- combine several propagators to go grad.flow simultaneously
      local prop_tab = { frwprop = frwprop }
      for i_tpol, tpol in pairs(Tpol_list) do
        for i_flav, flav in pairs(c3pt_flav_list) do
          local bkwprop_str = string.format("bkwprop_%s_%s", i_tpol, flav)
          tt  = timer(bkwprop_str)
          local bkwprop_file  = get_bkwprop_file(cfg_key, csrc, psnk, tsnk, i_tpol, flav, ama)
          prop_tab[string.format("%s_%s", i_tpol, flav)] = prop_load_func(
                                  bkwprop_file, bkwprop_str):adjoin()
          tt("done")
        end
      end

      local c2pt_cpbar  = {}
      for i_wf = 1, wf_nmax do
        gauge_u, prop_tab = gradflow_rkstep_gauge_field(wf_eps, gauge_u, prop_tab)
        
        local gclov = {}
        local gclov_trc0 = {}
        local cm_1 = L:ColorMatrix(1.)
        for i = 0, #L-1 do
          gclov[1+i] = {}
          gclov[1+i][1+i] = false
          gclov_trc0[1+i] = {}
          gclov_trc0[1+i][1+i] = false
          for j = 0, i - 1 do
            local c = clover_term(gauge_u, i, j)
            gclov[1+i][1+j]  = c
            gclov[1+j][1+i]  = -gclov[1+i][1+j]
            gclov_trc0[1+i][1+j] = c - (c:trace() / c:colors()) * cm_1 
            gclov_trc0[1+j][1+i] = -gclov_trc0[1+i][1+j]
          end
        end
        for i_tpol, tpol in pairs(Tpol_list) do
          for i_flav, flav in pairs(c3pt_flav_list) do
            local bkwprop = prop_tab[string.format("%s_%s", i_tpol, flav)]:adjoin()
            local k_cc = string.format('wf%fx%d/proton_%s/%s/dt%d', 
                        wf_eps, i_wf, i_tpol, flav, tsep)
            c2pt_cpbar[k_cc] = bc_fac * (bkwprop * cedm_seqsrc_edm(prop_tab.frwprop, gclov)):trace()
            local k_cc_trc0 = string.format('wf%fx%d_trc0/proton_%s/%s/dt%d', 
                        wf_eps, i_wf, i_tpol, flav, tsep)
            c2pt_cpbar[k_cc_trc0] = bc_fac * (bkwprop * cedm_seqsrc_edm(prop_tab.frwprop, gclov_trc0)):trace()
          end
        end
        force_gc("wflow_iter")
        
      end

      tt = timer("save_c2pt_cpbar")
      local c2pt_cpbar_file = get_hadspec_cpbar_wf_file(cfg_key, csrc, psnk, tsnk, ama)
      printf("[save_c2pt_cpbar] %s\n", c2pt_cpbar_file)
      local c2pt_cpbar_aff  = qcd.aff.Writer(c2pt_cpbar_file)
      save_2pt_list(L, c2pt_cpbar_aff, '/hadspec_cpbar/', 
              c2pt_cpbar, csrc, { {0,0,0,0} }, t_axis, 1.)
      c2pt_cpbar_aff:close()
      tt("done")
    end
  end

  force_gc("sample_cedm_2pt")
end


------------------------------------------------------------------------------
-- MAIN
------------------------------------------------------------------------------

cur_timer = timer("gauge_read")
printf("read gauge '%s'\n", get_gauge_file(cfg_key))
gauge_u = qcd.nersc.read_gauge(L, get_gauge_file(cfg_key))
cur_timer("done")

------------------------------------------------------------------------------
-- AUX FUNCTIONS
------------------------------------------------------------------------------
function smear_func_wup(x) 
  -- reqiures global wup_a, wup_n, wup_gauge_u, t_axis
  return wuppertal_smear(wup_gauge_u, wup_alpha, wup_N, x, t_axis)
end
if false then
function prop_save_func(fname, x, title, prop_prec)
  -- requires in the scope:
  --  prop_volfmt       part_dir for fast
  --  prop_vol_stride   spacing between ranks doing IO (set equal to the number of ranks per 1 IO node)
  if nil == title then
    title = tostring(x)
  end
  local tt = timer(string.format("SAVE %s", title))
  local qio_w = open_qdpc_write(L, fname, "", prop_qio_volfmt, 
                    {rank_stride=prop_qio_stride})
  qio_w:DiracPropagator(prop_prec, x, title)
  qio_w:close()
  tt("done")
end
end
function prop_load_func(fname, title)
  -- requires in the scope:
  --  prop_volfmt       part_dir for fast
  --  prop_vol_stride   spacing between ranks doing IO (set equal to the number of ranks per 1 IO node)
  if nil == title then
    title = ''
  end
  local tt = timer(string.format("LOAD %s", title))
  local qio_r = open_qdpc_read(L, fname, {rank_stride=prop_qio_stride})
  local res = qio_r:DiracPropagator()
  qio_r:close()
  tt("done")
  return res
end


for i_ama, ama in pairs(ama_list) do
  for i_csrc, csrc in pairs(ama['csrc_list']) do 
    sample_contract_wf_cedm_2pt(L, cfg_key, gauge_u, wf_eps, wf_nmax,
              prop_load_func, csrc, 
              c3pt_psnk_list, c3pt_tsep_list, 
              c3pt_flav_list, c3pt_tpol_list, ama)
  end
  force_gc()
  print_obj(qcd.memory_usage())
end

tot_timer("done")
printf("QLUA_RUN_SUCCESS\n")
-- vim : syn=lua
