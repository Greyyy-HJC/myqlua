-- full nedm calculation:
--  * propagators :
--    prop_F prop_B prop_B5 prop_C prop_EpG
--  * proton correlators (without cedm insertion) with Tpol_list polarisations
--  ** hadspec : traditional (Chroma HSPECTRUM)
--  ** c2pt : prop_F^3 
--  ** bb : prop_B*prop_F
--  * proton correlators WITH CEDM insertion with Tpol_list polarisations
--  ** c2pt_cpbar : prop_B5*prop_F
--  ** c2pt_volcedm: prop_F*prop_F*prop_C
--  ** bb_volcedm : prop_B5*prop_C + prop_EpG*propF

package.path = 'qlua-production/?.qlua;qlib-lhpc/?.qlua;qlib/?.qlua;' .. package.path
require 'strict'    -- catch all undefined (nil) variables
require 'stdlib'    -- standard printf, etc
require 'lhpc-std'  -- make_source, etc
require 'ape-smear' -- gauge smear
require 'gauge'
require 'qdpc_io'
require 'setup_util'
require 'latvec'

require 'hadspec'
require 'hex-smear'
require 'madwf_sns'

require 'wuppertal-smear'
require 'hadron/baryon_corr'
require 'util/file'
require 'util/geom'
require 'smear/field_smear'

------------------------------------------------------------------------------
-- INITIALIZATION: 
--  import config(which reads gauge, evecs, sets up ama, make_solver)
------------------------------------------------------------------------------
if true then
--if false then
  -- perhaps use a list of keys to check that all names have been defined?
  -- check `k' ~= nil ! otherwise, _G[k] will be set to nil, avoiding 'strict'
  for k,v in pairs(job_config) do   
    assert('string' == type(k))
    if nil == v then 
      printf("WARNING: job_config.%s = nil\n", k) 
    end
    _G[k] = v
  end
end

------------------------------------------------------------------------------
-- BENCHMARKS
------------------------------------------------------------------------------
-- la benchmark
if preptest.bmark_la then
  for i, la_pp in pairs({
          { "gemm", "c",   300,    300,    300 },
          { "gemm", "z",   300,    300,    300 },
--          { "gemm", "c",  1000,   1000,   1000 },
--          { "gemm", "z",  1000,   1000,   1000 },
  --        { "gemm", "c",  3000,   3000,   3000 },
  --        { "gemm", "z",  3000,   3000,   3000 },
        }) do
    local bm, pd, m,n,k = unpack(la_pp)
    local cur_str = string.format("la_benchmark %2s %6s  %6d %6d %6d", bm, pd, m, n, k)
    printf("%s\n", cur_str)
    local cur_t = timer(cur_str)
    qcd.latmat.la_benchmark(bm, pd, m, n, k)
    cur_t("done")
  end
end

------------------------------------------------------------------------------
-- MAIN
------------------------------------------------------------------------------
require 'cedm/sample_c23pt_cpeven_volcedm_cohbkw'

function have_sample(cfg_key, sample_tag)
  return log_have_tag(sample_log_file(cfg_key), sample_tag)
end
function done_sample(cfg_key, sample_tag)
  return log_done_tag(sample_log_file(cfg_key), sample_tag)
end

-- calc gauge_clover term
function gauge_clover_cedm(gauge_u)
  -- calc clover G_{mu nu} with color trace subtracted
  local L = latvec.lattice(gauge_u)
  local cm_1 = L:ColorMatrix(1.)
  local gauge_gmunu = {}
  for i = 0, #L-1 do
    gauge_gmunu[1+i] = {}
    gauge_gmunu[1+i][1+i] = false
    for j = 0, i - 1 do
      local c = gauge_clover(gauge_u, i, j)
      c = c - (c:trace() / c:colors()) * cm_1
      gauge_gmunu[1+i][1+j]  =  c
      gauge_gmunu[1+j][1+i]  = -c
    end
  end
  return gauge_gmunu
end
gf_clov_list = {
  orig  = gauge_clover_cedm(gauge_u)
}

-- gauge field for source construction
wup_gauge_u = APE_smear(gauge_u, ape_alpha, ape_N, ape_accu, ape_maxiter, t_axis)

-- main loop
for i_ama, ama in pairs(job_config.ama_list) do
  printf("INFO: AMA=%s\n", ama_str(ama))
  local n_sample_tot = #ama['csrcgrp_list']
  local i_sample_list = range(1, 1 + n_sample_tot)
  if sample_list then 
    printf("WARN: request samples {%s}\n", list_tostring(sample_list))
    for i,s in ipairs(sample_list) do 
      if (n_sample_tot < s) then printf("WARN: SKIP sample[%d]: out of range\n", s) end
    end
    i_sample_list = list_slice(i_sample_list, sample_list)
  end
  printf("INFO: select  samples {%s}\n", list_tostring(i_sample_list))

  smear_func_wup = make_smear_func(L, {type='wuppertal', t_axis=t_axis,
      wup_U=wup_gauge_u, wup_alpha=wup_alpha, wup_N=wup_N})
  local solver_func = make_solver(ama)
  for ii_s, i_sample in ipairs(i_sample_list) do
    local csrcgrp = ama['csrcgrp_list'][i_sample]
    local csrcgrp_tag = csrcgrp_str(csrcgrp)
    local sample_tag = string.format('%s.%s.%s', job_tag, ama_str(ama), csrcgrp_tag)
    if (not ama.csrcgrp_skip  or ama.csrcgrp_skip < i_sample) then
      if have_sample(cfg_key, sample_tag) then 
        printf("INFO: SKIP sample[%d] '%s': done\n", i_sample, sample_tag)
      else 
        local tt = timer(string.format('1srcgrp[%d] sample_c23pt_cpeven_volcedm_cohbkw', #csrcgrp))
        sample_c23pt_cpeven_volcedm_cohbkw(L, cfg_key, csrcgrp, hslab_len_t, bbspace_len_t, ama,
              c2pt_psnk_list, c3pt_psnk_list, c3pt_qext_list, c3pt_tsep_list,
              cedm_S2, cedm_S1, 
              cedm_Tpol_c3pt_list, cedm_Tpol5_c3pt_list, 
              flav_list,
              gauge_u, gf_clov_list,
              smear_func_wup, solver_func, 
              t_axis, ferm_bc,
              { hadspec=true, c2pt=true, 
                bb=true, bbspace=true, 
                c2pt_volcedm=true, c2pt_cpbar=true,
                bb_volcedm=true }    -- redo contractions
              )
        done_sample(cfg_key, sample_tag)
        printf("INFO: DONE sample[%d] '%s'\n", i_sample, sample_tag)
        tt('done')
      end
    end
  end
  solver_func = nil
  force_gc()
  print_obj(qcd.memory_usage())
end

job_config.job_timer("done")
printf("QLUA_RUN_SUCCESS\n")
-- vim : syn=lua
