-- XXX recalculating propagators and comparing to saved versions
-- XXX if different, save new version in a different location
-- XXX propagators are defined and stored according to CEDM writeup conventions
--    ie the backward propagator prop_B has the last Dslash applied on the right
require 'latvec'

require 'cedm/cedm-seq'  -- sequential sources
require 'hadron/baryon_corr'
require 'util/file'
require 'util/strkey'

require 'cedm/cedm_get_prop'
  

function get_prop_file_new(prop_file_old)
  return string.format("%s.redo/%s", 
      dirname(prop_file_old), basename(prop_file_old))
end
function xrdiff(x, y) 
  local x_n2 = latvec.norm2(x)
  local y_n2 = latvec.norm2(y)
  if (0 == x_n2 and 0 == y_n2) then 
    printf("WARN xrdiff: zero props\n")
    return 0.
  else 
    local xmy_n2= latvec.norm2(latvec.sub(x, y))
    return 2 * math.sqrt(xmy_n2) / (math.sqrt(x_n2) + math.sqrt(y_n2))
  end
end

------------------------------------------------------------------------------
-- load or compute propagators
------------------------------------------------------------------------------

---------- forward(F) props ----------
-- return (prop_F, rd_P)
function redo_prop_F(
      L, cfg_key, csrc, ama, 
      smear_func, solver_func)
  local prop_file_old = get_frwprop_file(cfg_key, csrc, ama)
  assert(have_prop(cfg_key, "prop_F", prop_file_old))
  local prop_F_old = prop_load_func(prop_file_old, "prop_F")

  local tt = timer("CALC prop_F")
  local tsrc = csrc[1+t_axis]
  local src_F_pt = make_source_point(L, csrc)
  local src_F = L:DiracPropagator()
  L:Subset({axis=#L-1, position=tsrc}):where(function() src_F:set(
        smear_func(src_F_pt)) end)                      ; tt("src")
  local prop_F  = solver_func(src_F)                    ; tt("prop")

  tt = timer('prop_F_cmp')
  local rd_P = xrdiff(prop_F, prop_F_old)
--  if true then      -- XXX test; remove
  if 1e-8 < rd_P then
    printf("WARN redo_prop_F %s %s[%s] rdiff=%e  <<< %s\n", 
        ama_str(ama), cfg_key, strkey.csrc_str_k(csrc), rd_P, prop_file_old)
    latvec.print_cmp(prop_F, prop_F_old, "prop_F new<>old")
    if do_save_prop.F then
      local prop_file_new = get_prop_file_new(prop_file_old)
      prop_save_func(prop_file_new, prop_F, "prop_F", ama['prop_prec'])
      done_prop(cfg_key, "prop_F_new", prop_file_new)
    end
  end
  tt('done')
  return prop_F, rd_P   -- always new
end

-- return (propgrp_B, is_new)
function redo_propgrp_B(
      L, cfg_key, csrcgrp, ama, psnk, tsep, 
      S2, S1, Tpol, tpol_tag, flav_bkw, 
      propgrp_F_sm, 
      smear_func, solver_func)
  local prop_file_old = get_bkwprop_grp_file(cfg_key, csrcgrp, 
              psnk, tsep, tpol_tag, flav_bkw, ama)
  assert(have_prop(cfg_key, "prop_B", prop_file_old))
  local prop_B_old = prop_load_func(prop_file_old, "prop_B")

  local tt = timer("CALC prop_B")
  local src_B_adj = L:DiracPropagator()  -- zero
  for i_csrc, csrc in pairs(csrcgrp) do
    local tsnk = (csrc[1+t_axis] + tsep) % latsize[1+t_axis]
    -- XXX tsnk must be in the correct slab of propgrp_F_sm, propgrp_C_sm
    -- XXX sic! cedm_seqsrc_sink already uses subsets, no need for further opt
    local src_B_pt = cedm_seqsrc_sink(flav_bkw, propgrp_F_sm, propgrp_F_sm,
                                     csrc, psnk, tsnk, S2, S1, Tpol)
    L:Subset({axis=#L-1, position=tsnk}):where(function() src_B_adj:set(
          gamma{n=15} * smear_func(src_B_pt:adjoin()))end)
  end
  local prop_B = solver_func(src_B_adj):adjoin() * gamma{n=15}            ; tt("prop")

  tt = timer('prop_B_cmp')
  local rd_P = xrdiff(prop_B, prop_B_old)
  if true then      -- XXX test; remove
--  if 1e-5 < rd_P then
    printf("WARN redo_prop_B %s %s[%s] rdiff=%e  <<< %s\n", 
        ama_str(ama), cfg_key, strkey.csrcgrp_str_k(csrcgrp), rd_P, prop_file_old)
    latvec.print_cmp(prop_B, prop_B_old, "prop_B new<>old")
    if do_save_prop.B then
      local prop_file_new = get_prop_file_new(prop_file_old)
      prop_save_func(prop_file_new, prop_B, "prop_B", ama['prop_prec'])
      done_prop(cfg_key, "prop_B", prop_file_new)
    end
    tt("done")
  else
  end
  return prop_B, rd_P
end

if false then --TODO update redo_prop_* below
---------- vacins-sequential(C) props ----------
-- return (prop_C, is_new)
function redo_prop_volcedm_C(
      L, cfg_key, csrc, ama,
      prop_F, 
      gf_clov, gf_tag, 
      smear_func, solver_func)
  local prop_C = nil
  local prop_file = get_cedmseqprop_file(cfg_key, csrc, gf_tag, ama)
  local is_new = not have_prop(cfg_key, "prop_C", prop_file)
  if is_new then
    local tt = timer("CALC prop_C")
    local src_C = cedm_seqsrc_edm(prop_F, gf_clov)    ; tt("src")
    prop_C = solver_func(src_C)                       ; tt("prop")
    if do_save_prop.C then
      prop_save_func(prop_file, prop_C, "prop_C", ama['prop_prec'])
      done_prop(cfg_key, "prop_C", prop_file)
    end
    tt("done")
  else
    prop_C = prop_load_func(prop_file, "prop_C")
  end
  return prop_C, is_new
end

-- return (prop_C, is_new)
function redo_prop_volpsc_C(
      L, cfg_key, csrc, ama,
      prop_F, 
      smear_func, solver_func)
  local prop_C = nil
  local prop_file = get_pscseqprop_file(cfg_key, csrc, ama)
  local is_new = not have_prop(cfg_key, "prop_C", prop_file)
  if is_new then
    local tt = timer("CALC prop_C")
    local src_C = seqsrc_psc(prop_F)              ; tt("src")
    prop_C = solver_func(src_C)                       ; tt("prop")
    if do_save_prop.C then
      prop_save_func(prop_file, prop_C, "prop_C", ama['prop_prec'])
      done_prop(cfg_key, "prop_C", prop_file)
    end
    tt("done")
  else
    prop_C = prop_load_func(prop_file, "prop_C")
  end
  return prop_C, is_new
end


---------- nucleon sink-sequential aka backward (B) props ----------
-- return (prop_B, is_new)
function redo_prop_B(
      L, cfg_key, csrc, ama, psnk, tsnk, 
      S2, S1, Tpol, tpol_tag, flav_bkw, 
      prop_F_sm, 
      smear_func, solver_func)
  local prop_B = nil
  local prop_file = get_bkwprop_file(cfg_key, csrc, psnk, tsnk, tpol_tag, flav_bkw, ama)
  local is_new = not have_prop(cfg_key, "prop_B", prop_file)
  if is_new then
    local tt = timer("CALC prop_B")
    local src_B_pt = cedm_seqsrc_sink(flav_bkw, prop_F_sm, prop_F_sm, 
          csrc, psnk, tsnk, S2, S1, Tpol)
    local src_B_adj = L:DiracPropagator()
    L:Subset({axis=#L-1, position=tsnk}):where(function() src_B_adj:set(
          gamma{n=15} * smear_func(src_B_pt:adjoin())) end)           ; tt("src")
    prop_B = solver_func(src_B_adj):adjoin() * gamma{n=15}            ; tt("prop")
    if do_save_prop.B then
      prop_save_func(prop_file, prop_B, "prop_B", ama['prop_prec'])
      done_prop(cfg_key, "prop_B", prop_file)
    end
    tt("done")
  else
    prop_B = prop_load_func(prop_file, "prop_B")
  end
  return prop_B, is_new
end

-- return (prop_B, is_new)
function redo_propgrpemul_B(
      L, cfg_key, csrcgrp, ama, psnk, tsep, 
      S2, S1, Tpol, tpol_tag, flav_bkw, 
      propgrp_F_sm, 
      smear_func, solver_func)
  local is_new_grp = false
  local propgrp_B = L:DiracPropagator()
  for i_csrc, csrc in pairs(csrcgrp) do
    local tsnk = (csrc[1+t_axis] + tsep) % latsize[1+t_axis]
    local prop_B, is_new = get_prop_B(L, cfg_key, csrc, ama, psnk, tsnk,
                  S2, S1, Tpol, tpol_tag, flav_bkw, 
                  propgrp_F_sm, smear_func, solver_func)
    propgrp_B = propgrp_B + prop_B
    is_new_grp= is_new_grp or is_new
  end
  return propgrp_B, is_new_grp
end



---------- nucleon sink- and vacins-sequential (EpG) props ----------
-- return (prop_EpG, is_new)
function redo_prop_volcedm_EpG(
    L, cfg_key, csrc, ama, psnk, tsnk, 
    S2, S1, Tpol, tpol_tag, flav_cur, flav_cedm,
    prop_F_sm, -- frw(F), smeared
      prop_C_sm, -- frw cedm-seq (C), smeared
      prop_B5, -- bkw(\tilde B), unsmeared
    gf_clov, gf_tag,
    smear_func, solver_func)
  local prop_EpG = nil
  local prop_file = get_cedmsinkseqprop_file(cfg_key, csrc, psnk, tsnk, 
                        tpol_tag, flav_cur, flav_cedm, gf_tag, ama)
  local is_new = not have_prop(cfg_key, "prop_EpG", prop_file)
  if is_new then
    local tt = timer("CALC prop_EpG")
    -- G source(cEDM-sink-seq), smeared from right
    local src_EpG_pt = cedm_seqsrc_ins_sink(flav_cur, flav_cedm, 
        prop_F_sm, prop_C_sm, csrc, psnk, tsnk, S2, S1, Tpol)
    local src_EpG_adj = L:DiracPropagator()
    L:Subset({axis=#L-1, position=tsnk}):where(function() src_EpG_adj:set(
        gamma{n=15} * smear_func(src_EpG_pt:adjoin())) end)
    -- E source(sink-cEDM-seq), no smearing
    if flav_cur == flav_cedm then 
      src_EpG_adj = src_EpG_adj + gamma{n=15} * cedm_seqsrc_edm_bkw(prop_B5, gf_clov):adjoin()
    end
    tt("src")
    prop_EpG = solver_func(src_EpG_adj):adjoin() * gamma{n=15} ; tt("prop")
    if do_save_prop.EpG then
      prop_save_func(prop_file, prop_EpG, "prop_EpG", ama['prop_prec'])
      done_prop(cfg_key, "prop_EpG", prop_file)
    end
    tt("done")
  else
    prop_EpG = prop_load_func(prop_file, "prop_EpG")
  end
  return prop_EpG, is_new
end

-- return (prop_EpG, is_new)
function redo_propgrp_volcedm_EpG(
    L, cfg_key, csrcgrp, ama, psnk, tsep, 
    S2, S1, Tpol, tpol_tag, flav_cur, flav_cedm,
    propgrp_F_sm, -- frw(F), smeared
      propgrp_C_sm, -- frw cedm-seq (C), smeared
      propgrp_B5, -- bkw(\tilde B), unsmeared
    gf_clov, gf_tag,
    smear_func, solver_func)
  -- prop_Bcpb must have the same flav_cur==flav_cedm
  local prop_EpG = nil
  local csrc_coh0 = csrcgrp[1]
  local prop_file = get_cedmsinkseqprop_grp_file(cfg_key, csrcgrp, psnk, tsep, 
                        tpol_tag, flav_cur, flav_cedm, gf_tag, ama)
  local is_new = not have_prop(cfg_key, "prop_EpG", prop_file)
  if is_new then
    local tt = timer("CALC prop_EpG")
    -- G source(cEDM-sink-seq), smeared from right
    local src_EpG_adj = L:DiracPropagator() -- zero
    for i_csrc, csrc in pairs(csrcgrp) do
      local tsnk = (csrc[1+t_axis] + tsep) % latsize[1+t_axis]
      -- XXX tsnk must be in the correct slab of propgrp_F_sm, propgrp_C_sm
      -- XXX sic! cedm_seqsrc_sink already uses subsets, no need for further opt
      local src_EpG_pt = cedm_seqsrc_ins_sink(flav_cur, flav_cedm, 
                          propgrp_F_sm, propgrp_C_sm, 
                          csrc, psnk, tsnk, S2, S1, Tpol)
      L:Subset({axis=#L-1, position=tsnk}):where(function() src_EpG_adj:set(
            gamma{n=15} * smear_func(src_EpG_pt:adjoin()))end)
    end
    -- E source(sink-cEDM-seq), no smearing
    if flav_cur == flav_cedm then 
      src_EpG_adj = src_EpG_adj + gamma{n=15} * cedm_seqsrc_edm_bkw(
                        propgrp_B5, gf_clov):adjoin()
    end
    tt("src")
    prop_EpG = solver_func(src_EpG_adj):adjoin() * gamma{n=15} ; tt("prop")
    if do_save_prop.EpG then
      prop_save_func(prop_file, prop_EpG, "prop_EpG", ama['prop_prec'])
      done_prop(cfg_key, "prop_EpG", prop_file)
    end
    tt("done")
  else
    prop_EpG = prop_load_func(prop_file, "prop_EpG")
  end
  return prop_EpG, is_new
end

-- return (prop_EpG, is_new)
function redo_propgrpemul_volcedm_EpG(
    L, cfg_key, csrcgrp, ama, psnk, tsep, 
    S2, S1, Tpol, tpol_tag, flav_cur, flav_cedm,
    propgrp_F_sm, -- frw(F), smeared
      propgrp_C_sm, -- frw cedm-seq (C), smeared
      propgrp_B5, -- bkw(\tilde B), unsmeared
    gf_clov, gf_tag,
    smear_func, solver_func)
  local propgrp_EpG = L:DiracPropagator()
  local is_new_grp= false
  for i_csrc, csrc in pairs(csrcgrp) do
    local tsnk = (csrc[1+t_axis] + tsep) % latsize[1+t_axis]
    local prop_EpG, is_new = get_prop_volcedm_EpG(L, cfg_key, csrc, ama, psnk, tsnk,
                  S2, S1, Tpol, tpol_tag, flav_cur, flav_cedm,
                  propgrp_F_sm, propgrp_C_sm, propgrp_B5, gf_clov, gf_tag, 
                  smear_func, solver_func)
    propgrp_EpG = propgrp_EpG + prop_EpG
    is_new_grp= is_new_grp or is_new
  end
  return propgrp_EpG, is_new_grp
end



-- return (prop_EpG, is_new)
function redo_prop_volpsc_EpG(
    L, cfg_key, csrc, ama, psnk, tsnk, 
    S2, S1, Tpol, tpol_tag, flav_cur, flav_ins,
    prop_F_sm, -- frw(F), smeared
      prop_C_sm, -- frw psc-seq (C), smeared
      prop_B5, -- bkw(\tilde B), unsmeared
    smear_func, solver_func)
  local prop_EpG = nil
  local prop_file = get_pscsinkseqprop_file(cfg_key, csrc, psnk, tsnk, 
                        tpol_tag, flav_cur, flav_ins, ama)
  local is_new = not have_prop(cfg_key, "prop_EpG", prop_file)
  if is_new then
    local tt = timer("CALC prop_EpG")
    -- G source(cEDM-sink-seq), smeared from right
    local src_EpG_pt = seqsrc_expand_nucsink(flav_cur, flav_ins, 
        prop_F_sm, prop_C_sm, csrc, psnk, tsnk, S2, S1, Tpol)
    local src_EpG_adj = L:DiracPropagator()
    L:Subset({axis=#L-1, position=tsnk}):where(function() src_EpG_adj:set(
        gamma{n=15} * smear_func(src_EpG_pt:adjoin())) end)
    -- E source(sink-cEDM-seq), no smearing
    if flav_cur == flav_ins then 
      src_EpG_adj = src_EpG_adj + gamma{n=15} * seqsrc_psc_bkw(prop_B5):adjoin()
    end
    tt("src")
    prop_EpG = solver_func(src_EpG_adj):adjoin() * gamma{n=15} ; tt("prop")
    if do_save_prop.EpG then
      prop_save_func(prop_file, prop_EpG, "prop_EpG", ama['prop_prec'])
      done_prop(cfg_key, "prop_EpG", prop_file)
    end
    tt("done")
  else
    prop_EpG = prop_load_func(prop_file, "prop_EpG")
  end
  return prop_EpG, is_new
end

-- return (prop_EpG, is_new)
function redo_propgrp_volpsc_EpG(
    L, cfg_key, csrcgrp, ama, psnk, tsep, 
    S2, S1, Tpol, tpol_tag, flav_cur, flav_ins,
    propgrp_F_sm, -- frw(F), smeared
      propgrp_C_sm, -- frw psc-seq (C), smeared
      propgrp_B5, -- bkw(\tilde B), unsmeared
    smear_func, solver_func)
  -- prop_Bcpb must have the same flav_cur==flav_ins
  local prop_EpG = nil
  local csrc_coh0 = csrcgrp[1]
  local prop_file = get_pscsinkseqprop_grp_file(cfg_key, csrcgrp, psnk, tsep, 
                        tpol_tag, flav_cur, flav_ins, ama)
  local is_new = not have_prop(cfg_key, "prop_EpG", prop_file)
  if is_new then
    local tt = timer("CALC prop_EpG")
    -- G source(cEDM-sink-seq), smeared from right
    local src_EpG_adj = L:DiracPropagator() -- zero
    for i_csrc, csrc in pairs(csrcgrp) do
      local tsnk = (csrc[1+t_axis] + tsep) % latsize[1+t_axis]
      -- XXX tsnk must be in the correct slab of propgrp_F_sm, propgrp_C_sm
      -- XXX sic! seqsrc_nucsink already uses subsets, no need for further opt
      local src_EpG_pt = seqsrc_expand_nucsink(flav_cur, flav_ins, 
                          propgrp_F_sm, propgrp_C_sm, 
                          csrc, psnk, tsnk, S2, S1, Tpol)
      L:Subset({axis=#L-1, position=tsnk}):where(function() src_EpG_adj:set(
            gamma{n=15} * smear_func(src_EpG_pt:adjoin()))end)
    end
    -- E source(sink-cEDM-seq), no smearing
    if flav_cur == flav_ins then 
      src_EpG_adj = src_EpG_adj + gamma{n=15} * seqsrc_psc_bkw(
                        propgrp_B5):adjoin()
    end
    tt("src")
    prop_EpG = solver_func(src_EpG_adj):adjoin() * gamma{n=15} ; tt("prop")
    if do_save_prop.EpG then
      prop_save_func(prop_file, prop_EpG, "prop_EpG", ama['prop_prec'])
      done_prop(cfg_key, "prop_EpG", prop_file)
    end
    tt("done")
  else
    prop_EpG = prop_load_func(prop_file, "prop_EpG")
  end
  return prop_EpG, is_new
end


end
