package.path = 'qlib/?.qlua;qlib-lhpc/?.qlua;' .. package.path
require 'strict'
require 'setup_util'
require 'stdlib'

-------------------------------------------------------------------------------
-- general
-------------------------------------------------------------------------------
assert(job_key)
cfg_key = job_key -- job# enumerates config#

latsize = {4,4,4,8}
t_axis = #latsize - 1
rnd_seed= 1984

-- for inverter test
test_src_coord = {0,0,0,0}
test_src_wup_N = 0

-------------------------------------------------------------------------------
-- quark action
-------------------------------------------------------------------------------
ferm_bc = {1,1,1,-1}
mdwf_M5 = 1.8
mdwf_mf = 0.01
mdwf_L5_full = 32
mdwf_b5_full = 1.
mdwf_c5_full = 0.
-- zMoebius params : etamax=1.45
mdwf_L5  = 10
mdwf_bmc5 = 1.
mdwf_bpc5 = {
  complex(4.953133333527814,  4.636759671022268),
  complex(5.834549184435342, -0.847375749821817),
  complex(3.727311567410276, 0),
  complex(1.614590791824022, 0),
  complex(0.835373070341761, 0),

  complex(0.7053563878413177, 0),
  complex(1.120047444033678, 0),
  complex(2.420780639614394, 0),
  complex(5.834549184435342,  0.847375749821817),
  complex(4.953133333527814, -4.636759671022268),
}
assert(#mdwf_bpc5 == mdwf_L5)
mdwf_b5, mdwf_c5 = {}, {}
for s = 1, mdwf_L5 do 
  mdwf_b5[s] = .5 * (mdwf_bpc5[s] + mdwf_bmc5)
  mdwf_c5[s] = .5 * (mdwf_bpc5[s] - mdwf_bmc5)
end


-------------------------------------------------------------------------------
-- AMA approximations
-------------------------------------------------------------------------------
-- * coordinates
cfg_list = {}
for s in io.lines('TEST4c8/list.cfg.all') do
  cfg_list[1+#cfg_list] = s
end
cfg_index = table_index(cfg_list, cfg_key)
printf("cfg_key='%s' index=%d\n", cfg_key, cfg_index)

sloppy_csrc_list = make_src_grid(
    {  1,  1,  2,  2 },   -- n_src
    latsize,
    {0,0,0,0},            -- x0
    {7,11,13,23}, cfg_index)   -- displacement by config#
-- * approx modes
ama_list = {
  { ['approx']    = 'exact',
    ['csrc_list'] = { sloppy_csrc_list[1] },
--    ['tol']       = 1e-9 
    ['prop_prec'] = 'double' },
  { ['approx']    = 'sloppy',
    ['csrc_list'] = sloppy_csrc_list,
    ['ncg']       = 50,
    ['prop_prec'] = 'float' }
}

------------------------------------------------------------------------------
-- solver section
------------------------------------------------------------------------------
-- if all propagators have been computed & stored, do not init solvers
do_contract_only = false
--do_contract_only = true

function make_solver(mdwf, gauge_u, ferm_bc, ama)
  -- do_contract_only case
  if nil == mdwf then -- do_contract_only then
    return function(x,p1,p2)
      error('mdwf solver : solver is not initialized (contract-only?)')
    end
  end

  local mdwf_invert = mdwf:mixed_solver(1e-6^2, 10000, 1e-10^2, 10000)
  return make_calc_mdwf_prop(mdwf_invert, gauge_u, ferm_bc, 
                    mdwf_L5, mdwf_M5, mdwf_b5, mdwf_c5)
end


-------------------------------------------------------------------------------
-- source parameters
-------------------------------------------------------------------------------
ape_alpha   = 2.5   -- equiv to CPS ape_beta=0.4
ape_N       = 2
ape_accu    = 1e-6
ape_maxiter = 150
wup_N       = 5
wup_alpha   = 2.5


------------------------------------------------------------------------------
-- Lanczos parameters
------------------------------------------------------------------------------
l_nev         = 200   -- wanted vectors
l_ncv         = 250
l_maxiter     = 50000
l_tol         = 1e-6
-- Chebyshev acc parameters
l_poly_n      = 40
l_poly_a      = .2 -- adjusted for 1400 based on a 1600 run results; eval[1400=67e-5]
l_poly_b      = 10  -- actual lambda_max=4.647 from an LR run
l_poly_x0     = 0.  -- P_n normalization point
-- eigcg parameters (used only to init space for Lanczos)
eigcg_nev     = 2
eigcg_tol     = 1e-6
eigcg_vmax    = 10
eigcg_umax    = l_ncv


------------------------------------------------------------------------------
-- file locations
------------------------------------------------------------------------------
ens_top   = 'TEST4c8'
data_top  = 'TEST4c8/data' 
data_pdir = 'TEST4c8/data_pdir'
evec_pdir = 'TEST4c8/evec_rawdump'
--scratch_dir     = "/scratch/evec_rawdump"
scratch_dir     = evec_pdir   -- taking chances ...
evec_rawdump_stride = 4

prop_qio_stride   = 4
prop_qio_volfmt   = 'part_dir'

--evec_volfmt     = 'part_dir'
--evec_pack_eopc  = true
--evec_qio_prec   = 'float'
--evec_qio_stride = 32
out_tag         = string.format('zm%d', mdwf_L5)


function get_gauge_file(cfg_key)
  return string.format("%s/gauge/ckpoint_lat.%s",
          ens_top, cfg_key)
end

function mdwf_evec_file(cfg_key, nev)
  return string.format("%s/mdwf_evec_nev%05d.%s.%s.raw", 
          evec_pdir, nev, out_tag, cfg_key)
end
function mdwf_evec_file_scratch(cfg_key, nev)
  return string.format("%s/mdwf_evec_nev%05d.%s.%s.raw", 
          scratch_dir, nev, out_tag, cfg_key)
end

function csrc_str(csrc)
  return string.format("x%dy%dz%dt%d", csrc[1], csrc[2], csrc[3], csrc[4])
end
function snk_str(psnk, tsep)
  return string.format("PX%dPY%dPZ%ddt%d", psnk[1], psnk[2], psnk[3], tsep)
end
function snk_str_old(psnk, tsnk)
  return string.format("PX%dPY%dPZ%dT%d", psnk[1], psnk[2], psnk[3], tsnk)
end
-- AMA-dependent output file names
function ama_str(ama)
  if 'exact' == ama['approx'] then
    return string.format("ex")
  elseif 'sloppy' == ama['approx'] then
    return string.format("sl")
  else
    error(string.format('unknown ama="%s"', ama['approx']))
  end
end

-- logging existing propagators
function get_prop_log_file(cfg_key, prop_kind)
  return string.format("%s/prop_log/%s.%s", 
          data_pdir, cfg_key, prop_kind)
end
function get_frwprop_pt_file(cfg_key, csrc, ama)
  return string.format("%s/frw_prop_pt/frw_prop_pt.%s.%s.%s.lime", 
          data_pdir, cfg_key, ama_str(ama), csrc_str(csrc))
end
function get_posnpr_file_h5(cfg_key, csrc, ama, tag)
  return string.format("%s/posnpr/posnpr.%s.%s.%s.h5", 
          data_top, cfg_key, ama_str(ama),
          csrc_str(csrc), tag)
end
function get_posnpr_file_qio(cfg_key, csrc, ama, tag)
  return string.format("%s/posnpr/posnpr.%s.%s.%s.qio", 
          data_top, cfg_key, ama_str(ama),
          csrc_str(csrc), tag)
end

function arpack_logfile(cfg_key)
  return string.format("%s/arpack.log", logdir, cfg_key)
end

