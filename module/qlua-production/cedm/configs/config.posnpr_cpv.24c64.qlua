package.path = 'qlib/?.qlua;qlib-lhpc/?.qlua;' .. package.path
require 'strict'
require 'setup_util'
require 'stdlib'

-------------------------------------------------------------------------------
-- general
-------------------------------------------------------------------------------
assert(job_key)
cfg_key = job_key -- job# enumerates config#

latsize = {24,24,24,64}
t_axis = #latsize - 1
rnd_seed= 1984

-- for inverter test
test_src_coord = {0,0,0,0}
test_src_wup_N = 0

-------------------------------------------------------------------------------
-- quark action
-------------------------------------------------------------------------------
ferm_bc = {1,1,1,-1}
mdwf_M5 = 1.8
mdwf_mf = 0.005
mdwf_L5_full = 16
mdwf_b5_full = 1.
mdwf_c5_full = 0.
-- zMoebius params : etamax=1.45
mdwf_L5  = 10
mdwf_bmc5 = 1.
mdwf_bpc5 = { 
    complex(2.449332, 0.7178647),
    complex(1.730880, 1.872007),
    complex(2.285113, 0.000000),
    complex(1.688023, 0.000000),
    complex(1.237072, 0.000000),

    complex(0.9504206, 0.000000),
    complex(0.7794974, 0.000000),
    complex(0.6994253, 0.000000),
    complex(1.730880, -1.872007),
    complex(2.449332, -0.7178647),
}
assert(#mdwf_bpc5 == mdwf_L5)
mdwf_b5, mdwf_c5 = {}, {}
for s = 1, mdwf_L5 do 
  mdwf_b5[s] = .5 * (mdwf_bpc5[s] + mdwf_bmc5)
  mdwf_c5[s] = .5 * (mdwf_bpc5[s] - mdwf_bmc5)
end


-------------------------------------------------------------------------------
-- AMA approximations
-------------------------------------------------------------------------------
-- * coordinates
cfg_list = {}
for s in io.lines('list.cfg.all') do
  cfg_list[1+#cfg_list] = s
end
cfg_index = table_index(cfg_list, cfg_key)
printf("cfg_key='%s' index=%d\n", cfg_key, cfg_index)

sloppy_csrc_list = make_src_grid(
    {  2,  2,  2,  4 },   -- n_src
    latsize,
    {0,0,0,0},            -- x0
    {7,11,13,23}, cfg_index)   -- displacement by config#
-- * approx modes
ama_list = {
  { ['approx']    = 'exact',
    ['csrc_list'] = { sloppy_csrc_list[1] },
--    ['tol']       = 1e-9 
    ['prop_prec'] = 'double' },
  { ['approx']    = 'sloppy',
    ['csrc_list'] = sloppy_csrc_list,
    ['ncg']       = 200,
    ['prop_prec'] = 'float' }
}

------------------------------------------------------------------------------
-- solver section
------------------------------------------------------------------------------
-- if all propagators have been computed & stored, do not init solvers
do_contract_only = false
--do_contract_only = true


function make_solver(mdwf, gauge_u, ferm_bc, ama)
  local mixcg_maxiter_exact   = 10000
  --   single prec. restart
  local mixcg_tol1            = 1e-6
  local mixcg_maxiter1        = 5000
  local eps_moeb              = 2e-6

  -- sic! the tolerance must be squared
  if 'exact' == ama['approx'] then
    local mdwf_invert = mdwf:mixed_solver(
                mixcg_tol1^2, mixcg_maxiter1,   
                eps_moeb^2,   mixcg_maxiter1) 
    local madwf_solver = make_solver_MADCG_g5herm(
        gauge_u, ferm_bc, mdwf_mf, mdwf_M5,
        mdwf_L5, mdwf_b5, mdwf_c5,
        mdwf_L5_full, mdwf_b5_full, mdwf_c5_full,
        3,
        { eps2_i    = 5e-6,
          eps2_f    = 5e-5,
          solver_moeb = mdwf_invert,
          eps2_m1   = eps_moeb^2, -- to match short solve prec
          eps2_1    = eps_moeb^2,
          })
    return madwf_solver
  elseif 'sloppy' == ama['approx'] then
    local mdwf_invert = mdwf:mixed_solver(
                mixcg_tol1^2, mixcg_maxiter1,   
                mixcg_tol1^2, ama['ncg']) 
    return make_calc_mdwf_prop(mdwf_invert, gauge_u, ferm_bc, 
                      mdwf_L5, mdwf_M5, mdwf_b5, mdwf_c5)
  else
    error(string.format("unknown approx='%s'"), ama['approx'])
  end
end


-------------------------------------------------------------------------------
-- source parameters
-------------------------------------------------------------------------------
ape_alpha   = 2.85   
ape_N       = 25
ape_accu    = 1e-12
ape_maxiter = 150
wup_N       = 40
wup_alpha   = 3.0


------------------------------------------------------------------------------
-- Lanczos parameters
------------------------------------------------------------------------------
l_nev         = 200   -- wanted vectors
l_ncv         = 280   -- +xx% unwanted vectors
l_maxiter     = 50000
l_tol         = 1e-6
-- Chebyshev acc parameters
l_poly_n      = 50
l_poly_a      = 7.0e-3 -- adjusted for 1400 based on a 1600 run results; eval[1400=67e-5]
l_poly_b      = 7  -- actual lambda_max=4.647 from an LR run
l_poly_x0     = 0.  -- P_n normalization point
-- eigcg parameters (used only to init space for Lanczos)
eigcg_nev     = 2
eigcg_tol     = 1e-6
eigcg_vmax    = 10
eigcg_umax    = l_ncv


------------------------------------------------------------------------------
-- file locations
------------------------------------------------------------------------------
ens_top   = '..'
data_top  = 'data' 
data_pdir = 'data_pdir'
evec_pdir = 'evec_rawdump'
--scratch_dir     = "/scratch/evec_rawdump"
scratch_dir     = evec_pdir   -- taking chances ...
evec_rawdump_stride = 32

prop_qio_stride   = 1
prop_qio_volfmt   = 'part_dir'

--evec_volfmt     = 'part_dir'
--evec_pack_eopc  = true
--evec_qio_prec   = 'float'
--evec_qio_stride = 32
out_tag         = string.format('zm%d', mdwf_L5)


function get_gauge_file(cfg_key)
  return string.format("%s/gauge/ckpoint_lat.IEEE64BIG.%s",
          ens_top, cfg_key)
end

function mdwf_evec_file(cfg_key, nev)
  return string.format("%s/mdwf_evec_nev%05d.%s.%s.raw", 
          evec_pdir, nev, out_tag, cfg_key)
end
function mdwf_evec_file_scratch(cfg_key, nev)
  return string.format("%s/mdwf_evec_nev%05d.%s.%s.raw", 
          scratch_dir, nev, out_tag, cfg_key)
end

function csrc_str(csrc)
  return string.format("x%dy%dz%dt%d", csrc[1], csrc[2], csrc[3], csrc[4])
end
function snk_str(psnk, tsep)
  return string.format("PX%dPY%dPZ%ddt%d", psnk[1], psnk[2], psnk[3], tsep)
end
function snk_str_old(psnk, tsnk)
  return string.format("PX%dPY%dPZ%dT%d", psnk[1], psnk[2], psnk[3], tsnk)
end
-- AMA-dependent output file names
function ama_str(ama)
  if 'exact' == ama['approx'] then
    return string.format("ex")
  elseif 'sloppy' == ama['approx'] then
    return string.format("sl")
  else
    error(string.format('unknown ama="%s"', ama['approx']))
  end
end

-- logging existing propagators
function get_prop_log_file(cfg_key, prop_kind)
  return string.format("%s/prop_log/%s.%s", 
          data_pdir, cfg_key, prop_kind)
end
function get_frwprop_pt_file(cfg_key, csrc, ama)
  return string.format("%s/frw_prop_pt/frw_prop_pt.%s.%s.%s.lime", 
          data_pdir, cfg_key, ama_str(ama), csrc_str(csrc))
end
function get_posnpr_file_h5(cfg_key, csrc, ama, tag)
  return string.format("%s/posnpr/posnpr.%s.%s.%s.h5", 
          data_top, cfg_key, ama_str(ama),
          csrc_str(csrc), tag)
end
function get_posnpr_file_qio(cfg_key, csrc, ama, tag)
  return string.format("%s/posnpr/posnpr.%s.%s.%s.qio", 
          data_top, cfg_key, ama_str(ama),
          csrc_str(csrc), tag)
end

function arpack_logfile(cfg_key)
  return string.format("%s/arpack.log", logdir, cfg_key)
end

