package.path = 'qlib/?.qlua;qlib-lhpc/?.qlua;qlua-production/?.qlua;' .. package.path
require 'strict'
require 'setup_util'
require 'stdlib'
require 'madwf_sns'
require 'mdwf_eopc'   -- MDWF ref.impl to check evecs

require 'rcparams'
rcparams.backend.laplacian = 'cpu-clover'
rcparams.backend.qbarq = 'cpu'

--local _P = {}
--job_config = _P
--setmetatable(_P, {__index = _G})
--setfenv(1, _P)
job_config = _G
-------------------------------------------------------------------------------
-- general
-------------------------------------------------------------------------------
assert(job_key)
assert(task_key)  -- for keeping track of samples in task 
assert(subjob_key)
if "" == subjob_key then sample_list = false
else sample_list = parse_int_range(subjob_key) end

cfg_key = job_key -- job# enumerates config#

latsize = {48,48,48,96}
t_axis = #latsize - 1
rnd_seed= 1984

-- for inverter test
test_src_coord = {0,0,0,0}
test_src_wup_N = 0


-------------------------------------------------------------------------------
-- quark action
-------------------------------------------------------------------------------
ferm_bc = {1,1,1,1} ; bc = ferm_bc
mdwf_M5 = 1.8
mdwf_mf = 0.00078
mdwf_L5_full = 24
mdwf_b5_full = 1.5
mdwf_c5_full = 0.5
-- zMoebius params : etamax=1.45
mdwf_L5  = 10
mdwf_bmc5 = 1.
mdwf_bpc5 = {   -- same as 16c32 test XXX check!
  1./complex(1.45806438985048,-0),
  1./complex(1.18231318389348,-0),
  1./complex(0.830951166685955,-0),
  1./complex(0.542352409156791,-0),
  1./complex(0.341985020453729,-0),
  1./complex(0.21137902619029,-0),
  1./complex(0.126074299502912,-0),
  1./complex(0.0990136651962626,-0),
  1./complex(0.0686324988446592,0.0550658530827402),
  1./complex(0.0686324988446592,-0.0550658530827402),
}
assert(#mdwf_bpc5 == mdwf_L5)
mdwf_b5, mdwf_c5 = {}, {}
for s = 1, mdwf_L5 do 
  mdwf_b5[s] = .5 * (mdwf_bpc5[s] + mdwf_bmc5)
  mdwf_c5[s] = .5 * (mdwf_bpc5[s] - mdwf_bmc5)
end

-- testing settings
mdwf_tol1, mdwf_maxiter1 = 1e-05, 1000
mdwf_tol,  mdwf_maxiter  = 1e-10, 3000
mixcg_tol_sloppy,mixcg_maxiter_sloppy      = 1e-5 , 100
mixcg_tol_exact, mixcg_maxiter_exact       = 1e-10, 1500


-------------------------------------------------------------------------------
-- AMA approximations
-------------------------------------------------------------------------------
-- * coordinates
cfg_list = {}
for s in io.lines('list.cfg.all.48I') do
  cfg_list[1+#cfg_list] = s
end
cfg_index = table_index(cfg_list, cfg_key)
printf("cfg_key='%s' index=%d\n", cfg_key, cfg_index)

--if true then
if false then
  sloppy_csrc_list = make_src_grid(
      {  4,  4,  2,  4 },   -- n_src
      latsize,
      {0,0,0,0},            -- x0
      {7,11,13,23}, cfg_index)   -- displacement by config#
  -- * approx modes
  ama_sl = { ['approx']    = 'sloppy',
      ['csrc_list'] = sloppy_csrc_list,
      ['ncg']       = 200,
      ['prop_prec'] = 'float' }
  ama_ex = { ['approx']    = 'exact',
      ['csrc_list'] = { sloppy_csrc_list[1] },
      ['prop_prec'] = 'double' }
  ama_list = { 
    ama_sl, 
--    ama_ex,
  }
else 
  csrcgrid  = { 4, 4, 2, 4 }
  local x0_1= { 0, 0, 0, 0 }
  local dx_g= { 7,11,13,23 }
  local dx_it={ latsize[1]/2, latsize[2]/2, latsize[3]/2, 0 } -- max displacement
  csrcgrid_nt = csrcgrid[1+t_axis]
  hslab_len_t = math.floor(latsize[1+t_axis] / csrcgrid_nt)

  local l1 = make_srcgrp_grid(csrcgrid, latsize, x0_1, dx_g, cfg_index, dx_it)
  local csrcgrp_list_sl = l1
  local csrcgrp_list_ex = { l1[1] }
  ama_ex = { ['approx']    = 'exact',
        ['csrcgrp_list'] = csrcgrp_list_ex,
  --      ['tol']       = 1e-9 
        ['prop_prec'] = 'double' }
  ama_sl = { ['approx']    = 'sloppy',
        ['csrcgrp_list'] = csrcgrp_list_sl,
        ['ncg']       = 200,
        ['prop_prec'] = 'float' }
  ama_list = { 
    ama_sl, 
--    ama_ex,
  }
end


------------------------------------------------------------------------------
-- Lanczos parameters
------------------------------------------------------------------------------
l_nev         = 200   -- wanted vectors
l_ncv         = 280   -- +xx% unwanted vectors
l_maxiter     = 50000
l_tol         = 1e-6
-- Chebyshev acc parameters
l_poly_n      = 50
l_poly_a      = 7.0e-3 -- adjusted for 1400 based on a 1600 run results; eval[1400=67e-5]
l_poly_b      = 7  -- actual lambda_max=4.647 from an LR run
l_poly_x0     = 0.  -- P_n normalization point
-- eigcg parameters (used only to init space for Lanczos)
eigcg_nev     = 2
eigcg_tol     = 1e-6
eigcg_vmax    = 10
eigcg_umax    = l_ncv


------------------------------------------------------------------------------
-- preptest params
------------------------------------------------------------------------------
preptest = {
  bmark_la            = true,
  test_read_gauge     = true,
  test_save_hadspec   = true,
  test_save_bb        = true,
  test_save_bb_gen    = true,
  test_ape            = true,
  test_wup            = true,
  test_prop           = true,
  test_evec           = true,
  test_g5herm         = true,
}


------------------------------------------------------------------------------
-- solver section
------------------------------------------------------------------------------
-- if all propagators have been computed & stored, do not init solvers
do_contract_only = false
do_bogus_prop = false
do_save_prop = { 
  F   = true,     -- need full F to compute C with gamma5
  Fg  = false,    -- keep F instead
  B   = true,     -- need for cvi3 with gamma5, for xspace theta; also, read for reuse in one job
  C   = false,    -- grouped C is sufficient
  Cg  = false,    -- no need to rerun for C
  EpG = false, 
}

-- evec params
mdwf_opt = { parity=1, pctype='eopc2p', defl='qlm' }
printf("mdwf_parity=%d    mdwf_pctype=%s\n", mdwf_opt.parity, mdwf_opt.pctype)
mdwf_nvec, mdwf_nvec_basis = 2000, 400
qlmopt= { sublat='odd', array=10, block={4,4,3,4}, arr_block=10, 
          nvec_basis=mdwf_nvec_basis,
          prec='single'}
evecdwfcl_opt = { file_geom = {4,4,8,8}, dir_stride=32, bufsizeM=1024 }

eps_i,  maxiter_i               = 3e-3, 300   -- initial solve
eps_f,  maxiter_f               = 3e-2, 300   -- final solve
eps_zmobius1, maxiter_zmobius1  = 1e-5, 1000  -- internal zmobius restart
eps_zmobius,  maxiter_zmobius   = 1e-4, 3000  -- internal zmobius solver
eps_pv, maxiter_pv              = 1e-5, 1000  -- PV solver
function make_solver_x(make_mdwf_solver, gauge_u, ferm_bc, ama)
  local mixcg_maxiter_exact   = 10000
  --   single prec. restart
  local mixcg_tol1            = 1e-5    -- restart
  local mixcg_tol             = 1e-10   -- used only in sloppy solver, iters limited by ama.ncg
  local mixcg_maxiter1        = 500
--  local eps_moeb              = 1e-6

  -- sic! the tolerance must be squared
  if 'exact' == ama['approx'] then
    local mdwf_invert = make_mdwf_solver(eps_zmobius, maxiter_zmobius)
    local madwf_solver = make_solver_MADCG_g5herm(
        gauge_u, ferm_bc, mdwf_mf, mdwf_M5,
        mdwf_L5, mdwf_b5, mdwf_c5,
        mdwf_L5_full, mdwf_b5_full, mdwf_c5_full,
        3,
        { eps2_i    = eps_i^2,  maxiter_i = maxiter_i,
          eps2_f    = eps_f^2,  maxiter_f = maxiter_f,
          solver_moeb = mdwf_invert,
          eps2_m1   = eps_pv^2, maxiter_m1= maxiter_pv,
          eps2_1    = mixcg_tol1^2, maxiter_1 = mixcg_maxiter1,
          mdwf_opt  = mdwf_opt,
          verbose   = 'full',
          })
    return madwf_solver
  elseif 'sloppy' == ama['approx'] then
    local mdwf_invert = make_mdwf_solver(mixcg_tol, ama['ncg'])
    return make_calc_mdwf_prop(mdwf_invert, gauge_u, ferm_bc,
                      mdwf_L5, mdwf_M5, mdwf_b5, mdwf_c5)
  else
    error(string.format("unknown approx='%s'"), ama['approx'])
  end
end


-------------------------------------------------------------------------------
-- source parameters
-------------------------------------------------------------------------------
ape_alpha   = 2.85
ape_N       = 25
ape_accu    = 1e-12
ape_maxiter = 150
-- match G0.5625x100 from 2013 runs@Ds
wup_N       = 82
wup_alpha   = 2.5


------------------------------------------------------------------------------
-- correlator parameters
------------------------------------------------------------------------------
-- meson&baryon lists for hadspec
hadspec_psnk_list = make_mom_list(10)
hadspec_baryon_list = {
    "proton_1", "lambda_1", "delta_1", 
    "proton_2", "lambda_2", "delta_2", 
    "proton_3", "lambda_3", "delta_3", 
    "proton_4", "proton_5", "proton_6",
    "xi_1", "xi_2", "proton_negpar_3",
}
hadspec_meson_list = {
    "a0_1", "rho_x_1", "rho_y_1", "b1_z_1",
    "rho_z_1", "b1_y_1", "b1_x_1", "pion_2",
    "a0_2", "rho_x_2", "rho_y_2", "a1_z_1",
    "rho_z_2", "a1_y_1", "a1_x_1", "pion_1" }

-- SINK momenta for hadspec, c2pt_volcedm
c2pt_psnk_list = make_mom_list(10)
-- SINK momenta for c2pt_cpbar, bb, bb_volcedm
c3pt_psnk_list = { {0,0,0} }
-- INSERTION momenta for c2pt_cpbar(cedm), bb, bb_volcedm(current)
c3pt_qext_list    = make_mom_list(10, 0)
-- source-sink separations
c3pt_tsep_list = { 8, 9, 10 }
c3pt_tsep_list_cpeven_extra = { 11, 12}
-- flavor components (assuming proton in&out)
flav_list = { 'U', 'D' }
-- building blocks link paths
bb_link_min, bb_link_max = 0,1
bb_volcedm_link_min, bb_volcedm_link_max = 0,1
bb_volpsc_link_min, bb_volpsc_link_max = 0,1
bbspace_gamma_ins = { 
  g1  = gamma{n=1}, g2 = gamma{n=2}, g4 = gamma{n=4}, g8 = gamma{n=8}
}
bbspace_len_t = 12
bbspace_opt = {
--  fmt     = 'hdf5',
  fmt     = 'qio',
  volfmt  = 'part_dir',
  prec    = 'float',
  qioparam= { rank_stride=1 },
  h5param = {
    method="phdf5", chunk="natural", transfer="collective", 
    alignment=1024 * 512, threshold=1024}
}

-- polarization matrices for nucleon ops
cedm_S1   = gamma{mu=0} * gamma{mu=2}
cedm_S2   = cedm_S1
-- tpol is used in CP-even, tpol5 in CP-odd correlators
tpol_posSzplus  = (1. + gamma{mu=3})/2 *(1. - gamma{mu=0}*gamma{mu=1}*complex(0,1))
tpol_posSzminus = (1. + gamma{mu=3})/2 *(1. + gamma{mu=0}*gamma{mu=1}*complex(0,1))
tpol_posSzplus5 = (1. + gamma{mu=3})/2 *(1. - gamma{mu=0}*gamma{mu=1}*complex(0,1)) *gamma{n=15}
tpol_posSzminus5= (1. + gamma{mu=3})/2 *(1. + gamma{mu=0}*gamma{mu=1}*complex(0,1)) *gamma{n=15}

-- include both spin polarizations for c2pt, one for c3pt
cedm_Tpol_c2pt_list = { 
  posSzplus   = tpol_posSzplus,
  posSzminus  = tpol_posSzminus, 
  posSzplus5  = tpol_posSzplus5,
  posSzminus5 = tpol_posSzminus5, }
cedm_Tpol5_c2pt_list = { 
  posSzplus   = tpol_posSzplus,
  posSzminus  = tpol_posSzminus,
  posSzplus5  = tpol_posSzplus5,
  posSzminus5 = tpol_posSzminus5, }
cedm_Tpol_c3pt_list = { 
  posSzplus   = tpol_posSzplus, }
cedm_Tpol5_c3pt_list = { 
  posSzplus   = tpol_posSzplus, }




------------------------------------------------------------------------------
-- file locations
------------------------------------------------------------------------------
ens_top   = '..'
data_top  = 'data.prod.coh4X'
data_pdir = 'data_pdir.prod'

prop_qio_stride   = 1
prop_qio_volfmt   = 'part_dir'

-- return meta,eval,bpath
function get_evecdwfcl_files(cfg)
  local bpath = string.format("evec-cache/%s/", cfg)
  return bpath..'/metadata.txt', bpath..'/eigen-values.txt', bpath
end


function get_gauge_file(cfg_key)
  return string.format("%s/gauge/ckpoint_lat.%s",
          ens_top, cfg_key)
end


function csrc_str(csrc)
  return string.format("x%dy%dz%dt%d", csrc[1], csrc[2], csrc[3], csrc[4])
end
function csrcgrp_str(csrcgrp)
  local csrc_str_list = {}
  for i_csrc, csrc in ipairs(csrcgrp) do
    csrc_str_list[i_csrc] = csrc_str(csrc)
  end
  return table.concat(csrc_str_list, '_')
end
function psnk_str(psnk)
  return string.format("PX%dPY%dPZ%d", psnk[1], psnk[2], psnk[3])
end
function snk_str_old(psnk, tsnk)
  return string.format("%sT%d", psnk_str(psnk), tsnk)
end
function snk_str(psnk, tsep)
  return string.format("%sdt%d", psnk_str(psnk), tsep)
end
-- AMA-dependent output file names
function ama_str(ama)
  if 'exact' == ama['approx'] then
    return string.format("ex")
  elseif 'sloppy' == ama['approx'] then
    return string.format("sl")
  else
    error(string.format('unknown ama="%s"', ama['approx']))
  end
end

require 'cedm/configs/config_filenames'          

function arpack_logfile(cfg_key)
  return string.format("%s/arpack.log", logdir, cfg_key)
end


-- logging propagators and samples
function get_prop_log_file(cfg_key, prop_kind)
  return string.format("%s/prop_log/%s.%s", 
          data_pdir, cfg_key, prop_kind)
end

job_tag = string.format('%s.%s.dt%s', job_key, task_key, 
    list_tostring(c3pt_tsep_list, '%d', '-'))
function sample_log_file(cfg_key)
  return string.format("%s/sample_log/%s", data_top, job_tag)
end

-------------------------------------------------------------------------------
-- SETUP
-------------------------------------------------------------------------------
job_timer = timer("total")
L = qcd.lattice(latsize, {network=network_geom})
lat = L     -- alias
S = rnd_init(L, rnd_seed)
rnd = S     -- alias

cur_timer = timer("gauge_read")
printf("read gauge '%s'\n", get_gauge_file(cfg_key))
gauge_u = qcd.nersc.read_gauge(L, get_gauge_file(cfg_key))
cur_timer("done")

if do_bogus_prop then
  printf("WARNING: bogus(random) propagators for TESTING ONLY\n")
  make_solver = function(ama) 
    return function(x)
      if 'lattice.dirac.propagator' == type(x) then return rnd:gaussian_DiracPropagator()
      elseif 'lattice.dirac.fermion' == type(x) then return rnd:gaussian_DiracFermion() 
      else error(string.format("solver: argument type '%s'", type(x))) end
    end 
  end
elseif do_contract_only then    
  printf("WARNING: contractions only, no solver initialized\n")
  make_solver = function(ama) 
    return function(x)
      error("invoke solver in 'do_contract_only' mode") 
      -- return nothing (nil)
    end 
  end
else
  local mdwf_gen = qcd.MDWF.generic(gauge_u, ferm_bc, mdwf_L5, mdwf_M5, mdwf_mf, mdwf_b5, mdwf_c5, mdwf_opt)
  if 'internal' == mdwf_opt.defl then  -- regular mdwf deflation
    local mdwf_eigcg_df = mdwf_gen:eig_deflator(eigcg_vmax, eigcg_nev, eigcg_tol, l_nev)

    local evecs_perm = mdwf_evec_file(cfg_key, l_nev)
--    local evecs_scratch = mdwf_evec_file_scratch(cfg_key, l_nev)
--    if evecs_scratch ~= evecs_perm then
--      cur_timer = timer("evecs_rawdump_sync")
--      printf("evecs_rawdump_sync: '%s' -> '%s'\n", evecs_perm, evecs_scratch)
--      evecs_rawdump_sync(evecs_perm, evecs_scratch, evec_rawdump_stride)
--      cur_timer("done")
--    end

    cur_timer = timer("evecs_rawload")
    printf("[evec_read] %s\n", evecs_perm)
    mdwf_eigcg_df:evecs_rawload(evecs_perm, l_nev, 
                  {rank_stride=evec_rawdump_stride})
    print_vector(mdwf_eigcg_df:eigenvalues(), "eval")
    mdwf_eigcg_df:stop()
    cur_timer("done")

    make_solver = function(ama)
      return make_solver_x(mdwf_eigcg_df, gauge_u, ferm_bc, ama)
    end
    get_evec = function(i_ev) return mdwf_eigcg_df:get_vector(i_ev) end
  elseif 'qlm' == mdwf_opt.defl then -- qlm deflation

    -- MDWF evecs
    local mdwf_mxm_qlmx  = qcd.latmat.create(L, 'lattice.dirac.fermion', mdwf_nvec, qlmopt)
    cur_timer = timer("read_df_blk_clehner")
    local evec_md,evec_ev,evec_bp = get_evecdwfcl_files(cfg_key)
    printf("[evec-cache] reading  '%s'  '%s'  '%s'\n", evec_md, evec_ev, evec_bp)
    mdwf_mxm_eval = qcd.latmat.read_df_blk_clehner(mdwf_mxm_qlmx, evec_md, evec_ev, evec_bp, evecdwfcl_opt)
    cur_timer("done")
    print_vector(mdwf_mxm_eval, "mdwf_mxm_eval")

    make_solver = function(ama) 
      return make_solver_x(
          function(tol, maxiter) 
            return mdwf_gen:qlmdefl_mixed_solver(mdwf_mxm_qlmx, mdwf_mxm_eval, 
--              eps_zmobius1^2, maxiter_zmobius1,   -- can have restarts
              tol^2*.1, maxiter + 10,             -- suppress restarts
              tol^2, maxiter, {defl_log=1})
          end, 
          gauge_u, ferm_bc, ama) 
    end
    get_evec = function(i_ev) return mdwf_mxm_qlmx:extract(i_ev) end
  else
    error(string.format("bad defl='%s'", mdwf_opt.defl))
  end

  local gauge_u_bc = latvec.copy(gauge_u)
  gauge_apply_bc(gauge_u_bc, ferm_bc)
  print_obj(mdwf_opt)
  mdwf_op_ref = make_mdwf_op_ref(gauge_u_bc, mdwf_L5, mdwf_M5, mdwf_mf,
            mdwf_b5, mdwf_c5, mdwf_opt.pctype)
  for i_ev = 0, 0 do
    local v = get_evec(i_ev)
    latvec.print_eo_norm2(v, string.format("v[%2d]", i_ev))
    local MxM_v = mdwf_op_ref.op_MxM(v)
    latvec.print_eo_norm2(MxM_v, string.format("MxM_v[%2d]", i_ev))
    latvec.print_cmp(MxM_v, v, string.format("MxM(v)<>v[%2d]", i_ev))
    local v_MxM_v = latvec.vdot(v, MxM_v)
    printf("v.MxM[ref].v[%2d] = (%23.16e,%23.16e)\n", i_ev, v_MxM_v:real(), v_MxM_v:imag())

    local mdwf1_MxM_v = mdwf_gen:debugmesilly('op-Mx', mdwf_gen:debugmesilly('op-M', v))
    local mdwf1_v_MxM_v = latvec.vdot(v, mdwf1_MxM_v)
    printf("v.MxM[mdwf1].v[%2d] = (%23.16e,%23.16e)\n", i_ev, mdwf1_v_MxM_v:real(), mdwf1_v_MxM_v:imag())

    local mdwf2_MxM_v = mdwf_gen:debugmesilly('op-Mxn', mdwf_gen:debugmesilly('op-Mn', v))
    local mdwf2_v_MxM_v = latvec.vdot(v, mdwf2_MxM_v)
    printf("v.MxM[mdwf2].v[%2d] = (%23.16e,%23.16e)\n", i_ev, mdwf2_v_MxM_v:real(), mdwf2_v_MxM_v:imag())
  end

end
