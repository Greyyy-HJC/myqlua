function print_network_settings()
  local ms, s 
  ms, s = qcd.network()
  local s_str=''
  if s[1] then
    s_str = string.format('%3d', s[1])
    for i = 2, #s do s_str = s_str .. string.format(' %3d', s[i]) end
  end
  printf("network: %d nodes [%s]\n", ms, s_str)
end
function print_subgrid_settings(L)
  local ln = L:network()
  local ln_str = string.format('%3d', ln[1])
  local sg_str = string.format('%3d', L[0] / ln[1])
  for i = 2, #ln do
    ln_str = ln_str .. string.format(' %3d', ln[i])
    sg_str = sg_str .. string.format(' %3d', L[i-1] / ln[i])
  end
  printf("%s: network=[%s] subgrid=[%s]\n", tostring(L), ln_str, sg_str)
end

-- print_obj(t, name, 
--           { depth=-1, exclude={refs}, })
--  t     object to print
--  name  optional name; if nil, tostring(t) will be used
--  depth   -1: full depth excluding cycles
--           0: only `t' (no nested refs)
--          +d: nested refs to depth `d'
--  exclude objects to exclude (used to omit cyclic refs)
function print_obj(t, name, opt)
  local opt = opt or {} 
  local exclude = opt.exclude or {}
  local depth =  tonumber(opt.depth or -1)  -- sic! depth=0 iff opt.depth=0 (0 is "true")
  local name  = name or tostring(t)
--  printf("*** %s #exc=%d depth=%d\n", name, #exclude, depth)
  local ex_new = {}
  for i,v in pairs(exclude) do
    if v == t then 
      printf("%s = <cyclicRef>\n", name)
      return
    end
    ex_new[1+#ex_new] = v
  end  
  if type(t) == "table" then
    ex_new[1+#ex_new] = t
    printf("%s : TABLE\n", name)
    if 0 ~= depth then
      local t_mt = getmetatable(t)
      if t_mt then 
        print_obj(t_mt, string.format("%s.META", name), {depth=depth-1, exclude=ex_new})
      end
      for i, v in pairs(t) do
        local name_i = string.format("%s[%s]", name, tostring(i))
        if '__index' == i then printf("%s : %s\n", name_i, tostring(v))
        else print_obj(v, name_i, {depth=depth-1, exclude=ex_new}) end
      end
    end
  else
    printf("%s : (%s) %s\n", name, type(t), tostring(t))
  end
end

function print_type(x, tit)
  tit = tit or tostring(x)
  printf("type(%s) = %s\n", tit, type(x))
end

function spprint_table(t, indent, level, spprint_elem)
  -- pretty-print a table into a string 
  -- level: how many nested levels to put onto a separate line
  spprint_elem = spprint_elem or tostring
  local ind_sh = '  ' -- for each new level
  local tab_start = '{ '
  local tab_end   = ' }'
  local tab_sep   = ', '
  if 'table' == type(t) then
    local sep = tab_sep
    local newindent = indent .. ind_sh
    local newlevel = nil
    if nil ~= level then newlevel = level - 1 end
    if nil == level or 0 < level then
      sep = string.format(',\n%s', newindent)
    end
    if #t <= 0 then return '{}'
    else
      local res = string.format('%s%s', tab_start, 
          spprint_table(t[1], newindent, newlevel, spprint_elem))
      for it=2, #t do
        res = string.format('%s%s%s', res, sep,
          spprint_table(t[it], newindent, newlevel, spprint_elem))
      end
      return string.format('%s%s', res, tab_end)
    end
  else return spprint_elem(t) end
end

function print_mem_usage_short(msg)
  if nil == msg then msg = "" end
  local mem_str = string.format("%s:", msg)
  local mem_tab = {}
  for i,v in pairs(qcd.memory_usage()) do
    local data_str = '?'
    if      'Random'  == i then data_str = 'S'
    elseif  'Int'     == i then data_str = 'I'
    elseif  'Real'    == i then data_str = 'R'
    elseif  'Complex' == i then data_str = 'C'
    elseif  string.find(i, '^ColorVector')      then data_str = 'V'
    elseif  string.find(i, '^ColorMatrix')      then data_str = 'M'
    elseif  string.find(i, '^DiracFermion')     then data_str = 'D'
    elseif  string.find(i, '^DiracPropagator')  then data_str = 'P'
    end
    mem_tab[data_str] = (mem_tab[data_str] or 0) + v
  end
  for i,data_str in pairs({'S', 'I', 'R', 'C', 'V', 'M', 'D', 'P' }) do
    mem_str = string.format("%s %6d%s", mem_str,
                (mem_tab[data_str] or 0), data_str)
  end
  printf("%s\n", mem_str)
end


-------------------------------------------------------------------------------
-- aux functions for managing code updates, testing, warnings, etc
-------------------------------------------------------------------------------
function func_info_fmt(d)
  local di_def = string.format('(%s:%d)', d.source or '??', d.linedefined or 0)
  local name = d.name or di_def
  return string.format("%s[%s]", name, d.what or '?')
end

function call_info_fmt(d)
  d = d or debug.getinfo(3, 'nlS')
  local di_def = string.format("(%s:%d)[%s]", 
      d.source or '??', d.currentline or 0, d.what or '?')
  local name = d.name or '??'
  return string.format("%s%s", name, di_def)
end
function print_warn(...)
  local d = debug.getinfo(2, "nlS")
  local m = string.format(...)
  io.stderr:write(string.format("WARN: %s: %s\n", call_info_fmt(d), m))
end

function depr_warn(func, opt)
  opt = opt or {}
  local report = opt.verbose or rcparam.get('verbose.depr_warn') or 'line'
  local hist_line = {}
  local hist_file = {}
  local newf = opt.replace or func_info_fmt(debug.getinfo(func, "nlS"))
  return function(...)
    local d = debug.getinfo(2, "nlS")
    local kstr_line = string.format("%s:%d:%s", d.source, d.currentline, d.name or '')
    local kstr_file = d.source

    local vv
    if     'once' == report then vv = (nil == next(hist_line))      -- once per run
    elseif 'line' == report then vv = (nil == hist_line[kstr_line]) -- once per line
    elseif 'file' == report then vv = (nil == hist_file[kstr_file]) -- once per file
    elseif 'each' == report then vv = true                          -- each call
    else error(string.format("bad value for depr_warn report='%s'", report)) end
    if vv then
        io.stderr:write(string.format(
              "WARN: %s: deprecated function ; replace with %s\n", 
              call_info_fmt(d), newf))
    end

    hist_line[kstr_line] = 1 + (hist_line[kstr_line] or 0)
    hist_file[kstr_file] = 1 + (hist_file[kstr_file] or 0)
    return func(...)
  end
end


do
  local timeit_table = {}

  function timeit(func, opt)
    -- benchmarking wrapper
    -- unless opt.name is given, all calls to func are counted together
    opt = opt or {}
    local timeit_table = opt.tab or timeit_table
    local verbose = opt.verbose or rcparam.get('verbose.timeit') or 'summ'
    local di = debug.getinfo(func, 'nS')
    local di_def = string.format('(%s:%d)', di.source or '??', di.linedefined or 0)
    local name = opt.name or di.name or di_def
    local fk = func_info_fmt(di)
    if opt.name then fk = string.format('%s=%s', opt.name, fk) end -- discr
    timeit_table[fk] = {cnt = 0, tot_s = 0, name = name}
    
    return function(...)
      local tstart  = os.time()
      local res     = {func(...)}
      local dt      = os.time() - tstart
      local tfk     = timeit_table[fk]
      tfk.tot_s     = tfk.tot_s + dt
      tfk.cnt       = tfk.cnt + 1
      if 'each' == verbose then 
        local ci      = debug.getinfo(2, 'Sl')
        local csrc    = ci.source or '??'
        local cline   = ci.currentline or 0
        printf("%s[%s:%d]\t%.3fs\n", name or '??', csrc, cline, dt)
      end
      return unpack(res)
    end
  end

  function timeit_report(opt)
    opt = opt or {}
    local timeit_table = opt.tab or timeit_table
    printf("%-30s\t%6s\t%12s\t%12s\n", 'NAME', 'CNT', 'TOT[s]', 'AVG[s]')
    for k, v in pairs(timeit_table) do
      if 0 < v.cnt then
        printf("%-30s\t%6d\t%12.3f\t%12.3f\n", v.name or '??', v.cnt, v.tot_s, v.tot_s / v.cnt)
      end
    end
  end
end


do -- class to accumulate failed test results
  local function report_test(status, title, lev)
    local c_rst = string.char(27) .. '[0m'
    local c_red = string.char(27) .. '[1;5;7;31m'
    local c_grn = string.char(27) .. '[1;32m'
    lev = lev or 0
    local x = debug.getinfo(2 + lev, 'n')
    local x_name = x.name or '(none)'
    title = title or ''
    local status_str
    if status then status_str = c_grn .. 'OK  ' .. c_rst
    else           status_str = c_red .. 'Fail' .. c_rst end
    printf("%s  %-40s (%s)\n", status_str, x_name, title)
  end
  local __mt_test_status = {
    __call = function(self, test, result)
      if (not result) then
        -- increment this test
        self.failed[test] = 1 + (self.failed[test] or 0)
      end
    end,
    report = function(self)
      local tabstr = table_tostring(self.failed, "%s[%s]", ',')
      report_test(0 == #tabstr, tabstr, 1)
      self.reported = true
    end,
  }
  __mt_test_status.__index = __mt_test_status
  __mt_test_status.__gc = __mt_test_status.report -- make sure it is not forgotten - does it work?
  function test_status(name)
    local x = debug.getinfo(2, 'n')
    name = name or x.name
    local res = { failed = {}, name = name }
    setmetatable(res, __mt_test_status)
    return res
  end
end

function table_opt_extra(t, kl)
  local t_kset = {}
  for k,v in pairs(t) do t_kset[k] = true end   -- set of keys in t
  for i,k in ipairs(kl) do t_kset[k] = nil end  --  minus items of kl
  local klist = {}
  for k,v in pairs(t_kset) do list_append(klist, k) end
  return klist
end
function warn_opt_extra(t, kl)
  local kl_extra = table_opt_extra(t, kl)
  if 0 < #kl_extra then
    local ci_str = func_info_fmt(debug.getinfo(2, 'nS'))
    for i, k in pairs(kl_extra) do
      printf("%s: extra option '%s'\n", ci_str, k)
    end
  end
  return kl_extra
end
