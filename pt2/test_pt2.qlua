package.path = package.path .. ';../module/qlib/?.qlua;../module/lhpc/?.qlua;../module/jinchen/?.qlua'
require "strict"
require "stdlib"
require "latvec"
require "mygfix"
require "gauge"

-- Set up
L = qcd.lattice {8, 8, 8, 32}
volume = 1
for i = 0, #L - 1 do
    volume = volume * L[i]
end

-- Initialize the random state
r = {}
do
    r.x = os.random()
    local x = L:Int(r.x)
    for i = 0, #L - 1 do
        r[i + 1] = os.random()
        x = x * L[i] + L:pcoord(i) * r[i + 1]
    end
    r.f = os.random()
    S = L:RandomState(r.f, x)
end


-- Print random numbers
printf("r.x  = %12d\n", r.x)
printf("r.f  = %12d\n", r.f)
for i = 0, #L - 1 do
    printf("r[%d] = %12d\n", i, r[i + 1])
end

U = {}
for i = 0, #L - 1 do
    U[i + 1] = toSUn(0.3 * S:gaussian_ColorMatrix())
end

do
    local p = 0
    local k = 0
    for i = 0, #L - 1 do
        for j = i + 1, #L - 1 do
            p = p + gauge_plaquette(U, i, j):trace():real():sum()
            k = k + volume * U[1]:colors()
        end
    end
    printf("plaqutte = %f\n", p / k)
end

-- construct the clover object and make the mixed solver out of it.
CL = qcd.Clover(U, 0.139727, 1.0, {1,1,1, -1})
solve = CL:mixed_solver(1e-10, 1000, 1e-25, 2000)


-- Build the 4-component point source at the origin
src = L:DiracPropagator()
Nc = src:colors()
for ic = 0, Nc - 1 do
  for is = 0, qcd.Ns - 1 do
    local dv = L:DiracFermion()
    dv[{0,0,0,0,c=ic,d=is}] = complex(1,0)
    src[{c=ic,d=is}] = dv
  end
end


-- Calculate 2pt
q_prop = solve(src)
a_prop = gamma({mu=5}) * q_prop * gamma({mu=5})

qq = qcd.dot(a_prop, gamma({n=0}) * q_prop * gamma({n=0}))

-- Output the result list
for t = 0, L[3] - 1 do
    printf("t = %d, qq = %f\n", t, qq[{0,0,0,t}]:real() * 1e9)
end


-- Gauge fixing
Nd = #L
Nc = U[1]:colors()

gf_accu = 1e-10
tol_switch_fletcher = 1e-6 -- switch to Fletcher-Reeves if tol < tol_switch_fletcher
gf_maxiter = 1000

for mu = 0, Nd - 1 do
    printf("# [%d]\t%e\t%e\n", mu, U[1 + mu]:norm2() / (Nc * volume),
           U[1 + mu]:trace():real():sum() / (Nc * volume))
end

gfix_func, gfix_grad = gfix_func_and_grad(U, "coulomb")

-- Fourier-accelerated (nonlinear) CG
verbose = true
g, iter, tol = gaugefix_facg(U, gfix_func, gfix_grad, gf_accu, gf_maxiter,
                             verbose, tol_switch_fletcher)

Ufix = gauge_transform_U(g, U)



-- After gauge fixing

-- construct the clover object and make the mixed solver out of it.
CL = qcd.Clover(Ufix, 0.139727, 1.0, {1,1,1, -1})
solve = CL:mixed_solver(1e-10, 1000, 1e-25, 2000)


-- Build the 4-component point source at the origin
src = L:DiracPropagator()
Nc = src:colors()
for ic = 0, Nc - 1 do
  for is = 0, qcd.Ns - 1 do
    local dv = L:DiracFermion()
    dv[{0,0,0,0,c=ic,d=is}] = complex(1,0)
    src[{c=ic,d=is}] = dv
  end
end


-- Calculate 2pt after gauge fixing
q_prop = solve(src)
a_prop = gamma({mu=5}) * q_prop * gamma({mu=5})

qq = qcd.dot(a_prop, gamma({n=0}) * q_prop * gamma({n=0}))

-- Output the result list
for t = 0, L[3] - 1 do
    printf("t = %d, qq = %f\n", t, qq[{0,0,0,t}]:real() * 1e9)
end